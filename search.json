[
  {
    "objectID": "05_oop.html",
    "href": "05_oop.html",
    "title": "Object oriented design in Python",
    "section": "",
    "text": "Benefits of object oriented design:\n\nEncapsulation\nCode reuse (composition, inheritance)\nAbstraction"
  },
  {
    "objectID": "05_oop.html#object-oriented-design",
    "href": "05_oop.html#object-oriented-design",
    "title": "Object oriented design in Python",
    "section": "",
    "text": "Benefits of object oriented design:\n\nEncapsulation\nCode reuse (composition, inheritance)\nAbstraction"
  },
  {
    "objectID": "05_oop.html#encapsulation",
    "href": "05_oop.html#encapsulation",
    "title": "Object oriented design in Python",
    "section": "Encapsulation",
    "text": "Encapsulation\nclass Location:\n    def __init__(self, name, longitude, latitude):\n        self.name = name.upper() # Names are always uppercase\n        self.longitude = longitude\n        self.latitude = latitude\n\n&gt;&gt;&gt; loc = Location(\"Antwerp\", 4.42, 51.22)\n&gt;&gt;&gt; loc.name\n'ANTWERP'\n&gt;&gt;&gt; loc.name = \"Antwerpen\"\n&gt;&gt;&gt; loc.name\n\"Antwerpen\" üòü"
  },
  {
    "objectID": "05_oop.html#encapsulation---attributes",
    "href": "05_oop.html#encapsulation---attributes",
    "title": "Object oriented design in Python",
    "section": "Encapsulation - Attributes",
    "text": "Encapsulation - Attributes\nVariables prefixed with an underscore (self._name) is a convention to indicate that the instance variable is private.\nclass Location:\n    def __init__(self, name, longitude, latitude):\n        self._name = name.upper() # Names are always uppercase\n        ...\n\n    @property\n    def name(self):\n        return self._name\n\n    @name.setter\n    def name(self, value):\n        self._name = value.upper()\n\n&gt;&gt;&gt; loc = Location(\"Antwerp\", 4.42, 51.22)\n&gt;&gt;&gt; loc.name = \"Antwerpen\"\n&gt;&gt;&gt; loc.name\n\"ANTWERPEN\" üòä"
  },
  {
    "objectID": "05_oop.html#composition",
    "href": "05_oop.html#composition",
    "title": "Object oriented design in Python",
    "section": "Composition",
    "text": "Composition\n\n\nComposition in object oriented design is a way to combine objects or data types into more complex objects.\n\n\n\n\n\n\nclassDiagram\n\n    class Grid{\n        + nx\n        + dx\n        + ny\n        + dy\n        + find_index()\n    }\n\n    class ItemInfo{\n        + name\n        + type\n        + unit\n    }\n\n    class DataArray{\n        + data\n        + time\n        + item\n        + geometry\n        + plot()\n    }\n\n    DataArray --* Grid\n    DataArray --* ItemInfo"
  },
  {
    "objectID": "05_oop.html#composition---example",
    "href": "05_oop.html#composition---example",
    "title": "Object oriented design in Python",
    "section": "Composition - Example",
    "text": "Composition - Example\nclass Grid:\n    def __init__(self, nx, dx, ny, dy):\n        self.nx = nx\n        self.dx = dx\n        self.ny = ny\n        self.dy = dy\n    \n    def find_index(self, x,y):\n        ...\n\nclass DataArray:\n    def __init__(self, data, time, item, geometry):\n        self.data = data\n        self.time = time\n        self.item = item\n        self.geometry = geometry\n\n    def plot(self):\n        ...\n. . .\nDataArray has a geometry (e.g.¬†Grid) and an item (ItemInfo)."
  },
  {
    "objectID": "05_oop.html#inheritance",
    "href": "05_oop.html#inheritance",
    "title": "Object oriented design in Python",
    "section": "Inheritance",
    "text": "Inheritance\n\n\nInheritance is a way to reuse code and specialize behavior.\nA child class inherits the attributes and methods from the parent class.\nA child class can override the methods of the parent class.\nA child class can add new methods."
  },
  {
    "objectID": "05_oop.html#inheritance---example",
    "href": "05_oop.html#inheritance---example",
    "title": "Object oriented design in Python",
    "section": "Inheritance - Example",
    "text": "Inheritance - Example\n\n\n\n\n\nclassDiagram\n\nclass _GeometryFM{\n+ node_coordinates\n+ element_table\n}\n\nclass GeometryFM2D{\n+ interp2d()\n+ get_element_area()\n+ plot()\n}\n\nclass _GeometryFMLayered{\n- _n_layers\n- _n_sigma\n+ to_2d_geometry()\n}\n\nclass GeometryFM3D{\n+ plot()\n}\n\nclass GeometryFMVerticalProfile{\n+ plot()\n}\n  _GeometryFM &lt;|-- GeometryFM2D\n  _GeometryFM &lt;|-- _GeometryFMLayered\n  _GeometryFMLayered &lt;|-- GeometryFM3D\n  _GeometryFMLayered &lt;|-- GeometryFMVerticalProfile\n\n\n\n\n\n\n. . .\nGeometryFM3D inherits from _GeometryFMLayered, it is a _GeometryFMLayered."
  },
  {
    "objectID": "05_oop.html#inheritance---example-2",
    "href": "05_oop.html#inheritance---example-2",
    "title": "Object oriented design in Python",
    "section": "Inheritance - Example (2)",
    "text": "Inheritance - Example (2)\nclass _GeometryFMLayered(_GeometryFM):\n    def __init__(self, nodes, elements, n_layers, n_sigma):\n        # call the parent class init method\n        super().__init__(\n            nodes=nodes,\n            elements=elements,\n        )\n        self._n_layers = n_layers\n        self._n_sigma = n_sigma"
  },
  {
    "objectID": "05_oop.html#composition-vs-inheritance",
    "href": "05_oop.html#composition-vs-inheritance",
    "title": "Object oriented design in Python",
    "section": "Composition vs inheritance",
    "text": "Composition vs inheritance\n\n\nInheritance is often used to reuse code, but this is not the main purpose of inheritance.\nInheritance is used to specialize behavior.\nIn most cases, composition is a better choice than inheritance.\nSome recent programming languages (e.g.¬†Go & Rust) do not support this style of inheritance.\nUse inheritance only when it makes sense.\n\n\n\n\nHillard, 2020, Ch. 8 ‚ÄúThe rules (and exceptions) of inheritance‚Äù"
  },
  {
    "objectID": "05_oop.html#types",
    "href": "05_oop.html#types",
    "title": "Object oriented design in Python",
    "section": "Types",
    "text": "Types\nC#\nint n = 2;\nString s = \"Hello\";\n\npublic String RepeatedString(String s, int n) {\n    return Enumerable.Repeat(s, n).Aggregate((a, b) =&gt; a + b);\n}\n. . .\nPython\nn = 2\ns = \"Hello\"\n\ndef repeated_string(s, n):\n    return s * n"
  },
  {
    "objectID": "05_oop.html#types-1",
    "href": "05_oop.html#types-1",
    "title": "Object oriented design in Python",
    "section": "Types",
    "text": "Types\n\n\nPython is a dynamically typed language\nTypes are not checked at compile time by the interpreter\nTypes can be checked before runtime using a linter (e.g.¬†mypy)\nType hints can be used by VS Code to provide auto-completion\n\n\n. . .\nn: int = 2\ns: str = \"Hello\"\n\ndef repeated_string(s:str, n:int) -&gt; str:\n    return s * n"
  },
  {
    "objectID": "05_oop.html#abstraction",
    "href": "05_oop.html#abstraction",
    "title": "Object oriented design in Python",
    "section": "Abstraction",
    "text": "Abstraction\n\n\nVersion A\ntotal = 0.0\nfor x in values:\n    total = total +x\n\nVersion B\ntotal = sum(values)\n\n\n. . .\n\n\nUsing functions, e.g.¬†sum() allows us to operate on a higher level of abstraction.\nToo little abstraction will force you to write many lines of boiler-plate code\nToo much abstraction limits the flexibility\n‚ú®Find the right level of abstraction!‚ú®\n\n\n\n\nWhich version is easiest to understand?\nWhich version is easiest to change?"
  },
  {
    "objectID": "05_oop.html#collections-abstract-base-classes",
    "href": "05_oop.html#collections-abstract-base-classes",
    "title": "Object oriented design in Python",
    "section": "Collections Abstract Base Classes",
    "text": "Collections Abstract Base Classes\n\n\n\n\n\nclassDiagram\n    Container &lt;|-- Collection\n    Sized &lt;|-- Collection\n    Iterable &lt;|-- Collection\n   \n    class Container{\n        __contains__(self, x)\n    }\n\n    class Sized{\n        __len__(self)\n    }\n\n    class Iterable{\n        __iter__(self)\n    }\n\n\n\n\n\n\n. . .\n\n\nIf a class implements __len__ it is a Sized object.\nIf a class implements __contains__ it is a Container object.\nIf a class implements __iter__ it is a Iterable object."
  },
  {
    "objectID": "05_oop.html#collections-abstract-base-classes-1",
    "href": "05_oop.html#collections-abstract-base-classes-1",
    "title": "Object oriented design in Python",
    "section": "Collections Abstract Base Classes",
    "text": "Collections Abstract Base Classes\n&gt;&gt;&gt; a = [1, 2, 3]\n&gt;&gt;&gt; 1 in a\nTrue\n&gt;&gt;&gt; a.__contains__(1)\nTrue\n&gt;&gt;&gt; len(a)\n3\n&gt;&gt;&gt; a.__len__()\n3\n&gt;&gt;&gt; for x in a:\n...     v.append(x)\n&gt;&gt;&gt; it = a.__iter__()\n&gt;&gt;&gt; next(it)\n1\n&gt;&gt;&gt; next(it)\n2\n&gt;&gt;&gt; next(it)\n3\n&gt;&gt;&gt; next(it)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nStopIteration"
  },
  {
    "objectID": "05_oop.html#collections-abstract-base-classes-2",
    "href": "05_oop.html#collections-abstract-base-classes-2",
    "title": "Object oriented design in Python",
    "section": "Collections Abstract Base Classes",
    "text": "Collections Abstract Base Classes\n\n\n\n\n\nclassDiagram\n    Container &lt;|-- Collection\n    Sized &lt;|-- Collection\n    Iterable &lt;|-- Collection\n    Collection &lt;|-- Sequence\n    Collection &lt;|-- Set\n    Sequence &lt;|-- MutableSequence\n    Mapping &lt;|-- MutableMapping\n    Collection &lt;|-- Mapping\n\n    MutableSequence &lt;|-- List\n    Sequence &lt;|-- Tuple\n    MutableMapping &lt;|-- Dict"
  },
  {
    "objectID": "05_oop.html#pythonic",
    "href": "05_oop.html#pythonic",
    "title": "Object oriented design in Python",
    "section": "Pythonic",
    "text": "Pythonic\nIf you want your code to be Pythonic, you have to be familiar with these types and their methods.\nDundermethods:\n\n__getitem__\n__setitem__\n__len__\n__contains__\n‚Ä¶\n\n\n\nfrom collections.abc import Collection\n\nclass Tool:\n    ...\n\nclass Hammer(Tool):\n    name=\"hammer\"\n\nclass Screwdriver(Tool):\n    name=\"screwdriver\"\n\n\nclass JavaLikeToolbox:\n\n    def __init__(self, tools: Collection[Tool]) -&gt; None:\n        self.tools = tools\n    \n    def getToolByName(self, name: str) -&gt; Tool:\n        for tool in self.tools:\n            if tool.name == name:\n                return tool\n\n    def numberOfTools(self) -&gt; int:\n        return len(self.tools)\n\ntb = JavaLikeToolbox([Hammer(), Screwdriver()])\ntb.getToolByName(\"hammer\")\n\n&lt;__main__.Hammer at 0x7f4628a496a0&gt;\n\n\n\ntb.numberOfTools()\n\n2\n\n\n\n\nclass Toolbox:\n\n    def __init__(self, tools: Collection[Tool]):\n        self._tools = {tool.name: tool for tool in tools}\n\n    def __getitem__(self, name: str) -&gt; Tool:\n        return self._tools[name]\n    \n    def __len__(self) -&gt; int:\n        return len(self._tools)\n\ntb = Toolbox([Hammer(), Screwdriver()])\ntb[\"hammer\"]\n\n&lt;__main__.Hammer at 0x7f4628a5c7d0&gt;\n\n\n\nlen(tb)\n\n2\n\n\n\nYou want your code to feel like the built-in types.\n\n\n\nclass SparseMatrix:\n    def __init__(self, shape, fill_value=0.0, data=None):\n        self.shape = shape\n        self._data = data if data is not None else {}\n        self.fill_value = fill_value\n        \n    def __setitem__(self, key, value):\n        i,j = key\n        self._data[i,j] = float(value) \n\n    def __getitem__(self, key) -&gt; float:\n        i,j = key\n        return self._data.get((i,j), self.fill_value)\n    \n    def transpose(self) -&gt; \"SparseMatrix\":\n        data = {(j,i) : v for (i,j),v in self._data.items()}\n        return SparseMatrix(data=data,\n                            shape=self.shape,\n                            fill_value=self.fill_value)\n    \n    def __repr__(self):\n        matrix_str = \"\"\n        for j in range(self.shape[1]):\n            for i in range(self.shape[0]):\n                value = self[i, j]\n                matrix_str += f\"{value:&lt;4}\"\n            matrix_str += \"\\n\"\n        return matrix_str\n\n\n\nm = SparseMatrix(shape=(2,2), fill_value=0.0)\nm\n\n0.0 0.0 \n0.0 0.0 \n\n\n. . .\n\nm[0,1]\n\n0.0\n\n\n. . .\n\nm[0,1] = 1.0\nm[1,0] = 2.0\nm\n\n0.0 2.0 \n1.0 0.0 \n\n\n. . .\n\nm.transpose()\n\n0.0 1.0 \n2.0 0.0"
  },
  {
    "objectID": "05_oop.html#duck-typing",
    "href": "05_oop.html#duck-typing",
    "title": "Object oriented design in Python",
    "section": "Duck typing",
    "text": "Duck typing\n\n\n‚ÄúIf it walks like a duck and quacks like a duck, it‚Äôs a duck‚Äù\nFrom the perspective of the caller, it doesn‚Äôt matter if it is a rubber duck or a real duck.\nThe type of the object is not important, as long as it has the right methods.\nPython is different than C# or Java, where you would have to create an interface IToolbox and implement it for Toolbox."
  },
  {
    "objectID": "05_oop.html#duck-typing---example",
    "href": "05_oop.html#duck-typing---example",
    "title": "Object oriented design in Python",
    "section": "Duck typing - Example",
    "text": "Duck typing - Example\nAn example is a Scikit learn transformers\n\nfit\ntransform\nfit_transform\n\nIf you want to make a transformer compatible with sklearn, you have to implement these methods."
  },
  {
    "objectID": "05_oop.html#duck-typing---example-1",
    "href": "05_oop.html#duck-typing---example-1",
    "title": "Object oriented design in Python",
    "section": "Duck typing - Example",
    "text": "Duck typing - Example\nclass PositiveNumberTransformer:\n\n    def fit(self, X, y=None):\n        # no need to fit (still need to have the method!)\n        return self\n\n    def transform(self, X):\n        return np.abs(X)\n\n    def fit_transform(self, X, y=None):\n        return self.fit(X, y).transform(X)"
  },
  {
    "objectID": "05_oop.html#duck-typing---mixins",
    "href": "05_oop.html#duck-typing---mixins",
    "title": "Object oriented design in Python",
    "section": "Duck typing - Mixins",
    "text": "Duck typing - Mixins\nWe can inherit some behavior from sklearn.base.TransformerMixin\nfrom sklearn.base import TransformerMixin\n\nclass RemoveOutliersTransformer(TransformerMixin):\n\n    def __init__(self, lower_bound, upper_bound):\n        self.lower_bound = lower_bound\n        self.upper_bound = upper_bound\n        self.lower_ = None\n        self.upper_ = None\n\n    def fit(self, X, y=None):\n        self.lower_ = np.quantile(X, self.lower_bound)\n        self.upper_ = np.quantile(X, self.upper_bound)\n\n    def transform(self, X):\n        return np.clip(X, self.lower_, self.upper_)\n\n    # def fit_transform(self, X, y=None):\n    # we get this for free, from TransformerMixin"
  },
  {
    "objectID": "05_oop.html#lets-revisit-the-date-interval",
    "href": "05_oop.html#lets-revisit-the-date-interval",
    "title": "Object oriented design in Python",
    "section": "Let‚Äôs revisit the (date) Interval",
    "text": "Let‚Äôs revisit the (date) Interval\nThe Interval class represent an interval in time.\nclass Interval:\n    def __init__(self, start, end):\n        self.start = start\n        self.end = end\n\n    def __contains__(self, x):\n        return self.start &lt; x &lt; self.end\n\n&gt;&gt;&gt; dr = Interval(date(2020, 1, 1), date(2020, 1, 31))\n\n&gt;&gt;&gt; date(2020,1,15) in dr\nTrue\n&gt;&gt;&gt; date(1970,1,1) in dr\nFalse\n. . .\nWhat if we want to make another type of interval, e.g.¬†a interval of numbers \\([1.0, 2.0]\\)?"
  },
  {
    "objectID": "05_oop.html#a-number-interval",
    "href": "05_oop.html#a-number-interval",
    "title": "Object oriented design in Python",
    "section": "A number interval",
    "text": "A number interval\nclass Interval:\n    def __init__(self, start, end):\n        self.start = start\n        self.end = end\n\n    def __contains__(self, x):\n        return self.start &lt; x &lt; self.end\n    \n&gt;&gt;&gt; interval = Interval(5, 10)\n\n&gt;&gt;&gt; 8 in interval\nTrue\n&gt;&gt;&gt; 12 in interval\nFalse\n. . .\nAs long as the start, end and x are comparable, the Interval class is a generic class able to handle integers, floats, dates, datetimes, strings ‚Ä¶"
  },
  {
    "objectID": "05_oop.html#postels-law",
    "href": "05_oop.html#postels-law",
    "title": "Object oriented design in Python",
    "section": "Postel‚Äôs law",
    "text": "Postel‚Äôs law\na.k.a. the Robustness principle of software design\n\nBe liberal in what you accept\nBe conservative in what you send\n\n. . .\ndef process(number: Union[int,str,float]) -&gt; int:\n    # make sure number is an int from now on\n    number = int(number)\n\n    result = number * 2\n    return result"
  },
  {
    "objectID": "05_oop.html#section",
    "href": "05_oop.html#section",
    "title": "Object oriented design in Python",
    "section": "",
    "text": ". . .\nThe consumers of your package (future self), will be grateful if you are not overly restricitive in what types you accept as input."
  },
  {
    "objectID": "05_oop.html#example---pydantic",
    "href": "05_oop.html#example---pydantic",
    "title": "Object oriented design in Python",
    "section": "Example - Pydantic",
    "text": "Example - Pydantic\n\nfrom pydantic import BaseModel\nfrom datetime import date\n\nclass Sensor(BaseModel):\n    name: str\n    voltage: float\n    install_date: date\n    location: tuple[float, float]\n\ns1 = Sensor(name=\"Sensor 1\",\n            voltage=3.3,\n            install_date=date(2020, 1, 1),\n            location=(4.42, 51.22))\ns1\n\nSensor(name='Sensor 1', voltage=3.3, install_date=datetime.date(2020, 1, 1), location=(4.42, 51.22))\n\n\n\ndata = {\n    \"name\": \"Sensor 1\",\n    \"voltage\": \"3.3\",\n    \"install_date\": \"2020-01-01\",\n    \"location\": (\"4.42\", \"51.22\")\n}\n\ns2 = Sensor(**data)\ns2\n\nSensor(name='Sensor 1', voltage=3.3, install_date=datetime.date(2020, 1, 1), location=(4.42, 51.22))"
  },
  {
    "objectID": "05_oop.html#refactoring",
    "href": "05_oop.html#refactoring",
    "title": "Object oriented design in Python",
    "section": "Refactoring",
    "text": "Refactoring\n\n\nRefactoring is a way to improve the design of existing code\nChanging a software system in such a way that it does not alter the external behavior of the code, yet improves its internal structure\nRefactoring is a way to make code more readable and maintainable\nHousekeeping"
  },
  {
    "objectID": "05_oop.html#common-refactoring-techniques",
    "href": "05_oop.html#common-refactoring-techniques",
    "title": "Object oriented design in Python",
    "section": "Common refactoring techniques:",
    "text": "Common refactoring techniques:\n\nExtract method\nExtract variable\nRename method\nRename variable\nRename class\nInline method\nInline variable\nInline class"
  },
  {
    "objectID": "05_oop.html#rename-variable",
    "href": "05_oop.html#rename-variable",
    "title": "Object oriented design in Python",
    "section": "Rename variable",
    "text": "Rename variable\nBefore\nn = 0\nfor v in y:\n    if v &lt; 0:\n        n = n + 1\n. . .\nAfter\nFREEZING_POINT = 0.0\nn_freezing_days = 0\nfor temp in daily_max_temperatures:\n    if temp &lt; FREEZING_POINT:\n        n_freezing_days = n_freezing_days + 1"
  },
  {
    "objectID": "05_oop.html#extract-variable",
    "href": "05_oop.html#extract-variable",
    "title": "Object oriented design in Python",
    "section": "Extract variable",
    "text": "Extract variable\nBefore\ndef predict(x):\n    return min(0.0, 0.5 + 2.0 * min(0,x) + (random.random() - 0.5) / 10.0)\n. . .\nAfter\ndef predict(x):\n    scale = 10.0\n    error = (random.random() - 0.5) / scale)\n    a = 0.5\n    b = 2.0 \n    draft = a + b * x + error\n    return  min(0.0, draft)"
  },
  {
    "objectID": "05_oop.html#extract-method",
    "href": "05_oop.html#extract-method",
    "title": "Object oriented design in Python",
    "section": "Extract method",
    "text": "Extract method\ndef error(scale):\n    return (random.random() - 0.5) / scale)\n\ndef linear_model(x, *, a=0.0, b=1.0):\n    return a + b * x\n\ndef clip(x, *, min_value=0.0):\n    return min(min_value, x)\n\ndef predict(x): \n    draft = linear_model(x, a=0.5, b=2.0) + error(scale=10.0)\n    return clip(draft, min_value=0.)"
  },
  {
    "objectID": "05_oop.html#inline-method",
    "href": "05_oop.html#inline-method",
    "title": "Object oriented design in Python",
    "section": "Inline method",
    "text": "Inline method\nOpposite of extract mehtod.\ndef predict(x): \n    draft = linear_model(x, a=0.5, b=2.0) + error(scale=10.0)\n    return min(0.0, x)"
  },
  {
    "objectID": "05_oop.html#composed-method",
    "href": "05_oop.html#composed-method",
    "title": "Object oriented design in Python",
    "section": "Composed method",
    "text": "Composed method\nBreak up a long method into smaller methods.\n\n# get data\nos.shutil.copyfile(thisfile, localfile)\ndf = read_csv(localfile)\n\n# clean data\ndf.dropna()\ndf.drop_duplicates()\ndf[somevar&lt;0.0] = 0.0\n\n# transform data\ndf.date = pd.to_datetime(df.date) - 86400\n\n# predict\npredictions = df.height + df.weight * df.age\n\n\ndef get_data(filename,...):\n    ...\n\ndef clean_data(df):\n    ...\n\ndef transform_data(df):\n    ...\n\ndef predict(df):\n    ...\n\ndef main():\n    df = get_data(\"raw_data.csv\")\n    cleaned_data = clean_data(df)\n    final_data = transform_data(cleaned_data)\n    predictions = predict(final_data)"
  },
  {
    "objectID": "05_oop.html#composed-method-1",
    "href": "05_oop.html#composed-method-1",
    "title": "Object oriented design in Python",
    "section": "Composed method",
    "text": "Composed method\n\nDivide your program into methods that perform one identifiable task\nKeep all of the operations in a method at the same level of abstraction.\nThis will naturally result in programs with many small methods, each a few lines long.\nWhen you use Extract method a bunch of times on a method the original method becomes a Composed method.\n\n\n\n\n\n\nIf you want to learn more about refactoring, I recommend the book ‚ÄúRefactoring: Improving the Design of Existing Code‚Äù by Martin Fowler."
  },
  {
    "objectID": "05_oop.html#summary",
    "href": "05_oop.html#summary",
    "title": "Object oriented design in Python",
    "section": "Summary",
    "text": "Summary\n\n\nOOP is a way to organize your code\nEncapsulation, composition, inheritance, abstraction\nDuck Typing\nPostel‚Äôs law\nRefactoring"
  },
  {
    "objectID": "05_oop_slides.html#object-oriented-design",
    "href": "05_oop_slides.html#object-oriented-design",
    "title": "Object oriented design in Python",
    "section": "Object oriented design",
    "text": "Object oriented design\nBenefits of object oriented design:\n\nEncapsulation\nCode reuse (composition, inheritance)\nAbstraction"
  },
  {
    "objectID": "05_oop_slides.html#encapsulation",
    "href": "05_oop_slides.html#encapsulation",
    "title": "Object oriented design in Python",
    "section": "Encapsulation",
    "text": "Encapsulation\nclass Location:\n    def __init__(self, name, longitude, latitude):\n        self.name = name.upper() # Names are always uppercase\n        self.longitude = longitude\n        self.latitude = latitude\n\n&gt;&gt;&gt; loc = Location(\"Antwerp\", 4.42, 51.22)\n&gt;&gt;&gt; loc.name\n'ANTWERP'\n&gt;&gt;&gt; loc.name = \"Antwerpen\"\n&gt;&gt;&gt; loc.name\n\"Antwerpen\" üòü"
  },
  {
    "objectID": "05_oop_slides.html#encapsulation---attributes",
    "href": "05_oop_slides.html#encapsulation---attributes",
    "title": "Object oriented design in Python",
    "section": "Encapsulation - Attributes",
    "text": "Encapsulation - Attributes\nVariables prefixed with an underscore (self._name) is a convention to indicate that the instance variable is private.\nclass Location:\n    def __init__(self, name, longitude, latitude):\n        self._name = name.upper() # Names are always uppercase\n        ...\n\n    @property\n    def name(self):\n        return self._name\n\n    @name.setter\n    def name(self, value):\n        self._name = value.upper()\n\n&gt;&gt;&gt; loc = Location(\"Antwerp\", 4.42, 51.22)\n&gt;&gt;&gt; loc.name = \"Antwerpen\"\n&gt;&gt;&gt; loc.name\n\"ANTWERPEN\" üòä"
  },
  {
    "objectID": "05_oop_slides.html#composition",
    "href": "05_oop_slides.html#composition",
    "title": "Object oriented design in Python",
    "section": "Composition",
    "text": "Composition\n\n\nComposition in object oriented design is a way to combine objects or data types into more complex objects.\n\n\n\n\n\n\nclassDiagram\n\n    class Grid{\n        + nx\n        + dx\n        + ny\n        + dy\n        + find_index()\n    }\n\n    class ItemInfo{\n        + name\n        + type\n        + unit\n    }\n\n    class DataArray{\n        + data\n        + time\n        + item\n        + geometry\n        + plot()\n    }\n\n    DataArray --* Grid\n    DataArray --* ItemInfo"
  },
  {
    "objectID": "05_oop_slides.html#composition---example",
    "href": "05_oop_slides.html#composition---example",
    "title": "Object oriented design in Python",
    "section": "Composition - Example",
    "text": "Composition - Example\nclass Grid:\n    def __init__(self, nx, dx, ny, dy):\n        self.nx = nx\n        self.dx = dx\n        self.ny = ny\n        self.dy = dy\n    \n    def find_index(self, x,y):\n        ...\n\nclass DataArray:\n    def __init__(self, data, time, item, geometry):\n        self.data = data\n        self.time = time\n        self.item = item\n        self.geometry = geometry\n\n    def plot(self):\n        ...\n\nDataArray has a geometry (e.g.¬†Grid) and an item (ItemInfo)."
  },
  {
    "objectID": "05_oop_slides.html#inheritance",
    "href": "05_oop_slides.html#inheritance",
    "title": "Object oriented design in Python",
    "section": "Inheritance",
    "text": "Inheritance\n\nInheritance is a way to reuse code and specialize behavior.\nA child class inherits the attributes and methods from the parent class.\nA child class can override the methods of the parent class.\nA child class can add new methods."
  },
  {
    "objectID": "05_oop_slides.html#inheritance---example",
    "href": "05_oop_slides.html#inheritance---example",
    "title": "Object oriented design in Python",
    "section": "Inheritance - Example",
    "text": "Inheritance - Example\n\n\n\n\n\nclassDiagram\n\nclass _GeometryFM{\n+ node_coordinates\n+ element_table\n}\n\nclass GeometryFM2D{\n+ interp2d()\n+ get_element_area()\n+ plot()\n}\n\nclass _GeometryFMLayered{\n- _n_layers\n- _n_sigma\n+ to_2d_geometry()\n}\n\nclass GeometryFM3D{\n+ plot()\n}\n\nclass GeometryFMVerticalProfile{\n+ plot()\n}\n  _GeometryFM &lt;|-- GeometryFM2D\n  _GeometryFM &lt;|-- _GeometryFMLayered\n  _GeometryFMLayered &lt;|-- GeometryFM3D\n  _GeometryFMLayered &lt;|-- GeometryFMVerticalProfile\n\n\n\n\n\n\n\nGeometryFM3D inherits from _GeometryFMLayered, it is a _GeometryFMLayered."
  },
  {
    "objectID": "05_oop_slides.html#inheritance---example-2",
    "href": "05_oop_slides.html#inheritance---example-2",
    "title": "Object oriented design in Python",
    "section": "Inheritance - Example (2)",
    "text": "Inheritance - Example (2)\nclass _GeometryFMLayered(_GeometryFM):\n    def __init__(self, nodes, elements, n_layers, n_sigma):\n        # call the parent class init method\n        super().__init__(\n            nodes=nodes,\n            elements=elements,\n        )\n        self._n_layers = n_layers\n        self._n_sigma = n_sigma"
  },
  {
    "objectID": "05_oop_slides.html#composition-vs-inheritance",
    "href": "05_oop_slides.html#composition-vs-inheritance",
    "title": "Object oriented design in Python",
    "section": "Composition vs inheritance",
    "text": "Composition vs inheritance\n\nInheritance is often used to reuse code, but this is not the main purpose of inheritance.\nInheritance is used to specialize behavior.\nIn most cases, composition is a better choice than inheritance.\nSome recent programming languages (e.g.¬†Go & Rust) do not support this style of inheritance.\nUse inheritance only when it makes sense.\n\n\n\nHillard, 2020, Ch. 8 ‚ÄúThe rules (and exceptions) of inheritance‚Äù"
  },
  {
    "objectID": "05_oop_slides.html#types",
    "href": "05_oop_slides.html#types",
    "title": "Object oriented design in Python",
    "section": "Types",
    "text": "Types\nC#\nint n = 2;\nString s = \"Hello\";\n\npublic String RepeatedString(String s, int n) {\n    return Enumerable.Repeat(s, n).Aggregate((a, b) =&gt; a + b);\n}\n\nPython\nn = 2\ns = \"Hello\"\n\ndef repeated_string(s, n):\n    return s * n"
  },
  {
    "objectID": "05_oop_slides.html#types-1",
    "href": "05_oop_slides.html#types-1",
    "title": "Object oriented design in Python",
    "section": "Types",
    "text": "Types\n\nPython is a dynamically typed language\nTypes are not checked at compile time by the interpreter\nTypes can be checked before runtime using a linter (e.g.¬†mypy)\nType hints can be used by VS Code to provide auto-completion\n\n\nn: int = 2\ns: str = \"Hello\"\n\ndef repeated_string(s:str, n:int) -&gt; str:\n    return s * n"
  },
  {
    "objectID": "05_oop_slides.html#abstraction",
    "href": "05_oop_slides.html#abstraction",
    "title": "Object oriented design in Python",
    "section": "Abstraction",
    "text": "Abstraction\n\n\nVersion A\ntotal = 0.0\nfor x in values:\n    total = total +x\n\nVersion B\ntotal = sum(values)\n\n\n\nUsing functions, e.g.¬†sum() allows us to operate on a higher level of abstraction.\nToo little abstraction will force you to write many lines of boiler-plate code\nToo much abstraction limits the flexibility\n‚ú®Find the right level of abstraction!‚ú®\n\n\n\nWhich version is easiest to understand?\nWhich version is easiest to change?"
  },
  {
    "objectID": "05_oop_slides.html#collections-abstract-base-classes",
    "href": "05_oop_slides.html#collections-abstract-base-classes",
    "title": "Object oriented design in Python",
    "section": "Collections Abstract Base Classes",
    "text": "Collections Abstract Base Classes\n\n\n\n\n\nclassDiagram\n    Container &lt;|-- Collection\n    Sized &lt;|-- Collection\n    Iterable &lt;|-- Collection\n   \n    class Container{\n        __contains__(self, x)\n    }\n\n    class Sized{\n        __len__(self)\n    }\n\n    class Iterable{\n        __iter__(self)\n    }\n\n\n\n\n\n\n\n\nIf a class implements __len__ it is a Sized object.\nIf a class implements __contains__ it is a Container object.\nIf a class implements __iter__ it is a Iterable object."
  },
  {
    "objectID": "05_oop_slides.html#collections-abstract-base-classes-1",
    "href": "05_oop_slides.html#collections-abstract-base-classes-1",
    "title": "Object oriented design in Python",
    "section": "Collections Abstract Base Classes",
    "text": "Collections Abstract Base Classes\n&gt;&gt;&gt; a = [1, 2, 3]\n&gt;&gt;&gt; 1 in a\nTrue\n&gt;&gt;&gt; a.__contains__(1)\nTrue\n&gt;&gt;&gt; len(a)\n3\n&gt;&gt;&gt; a.__len__()\n3\n&gt;&gt;&gt; for x in a:\n...     v.append(x)\n&gt;&gt;&gt; it = a.__iter__()\n&gt;&gt;&gt; next(it)\n1\n&gt;&gt;&gt; next(it)\n2\n&gt;&gt;&gt; next(it)\n3\n&gt;&gt;&gt; next(it)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nStopIteration"
  },
  {
    "objectID": "05_oop_slides.html#collections-abstract-base-classes-2",
    "href": "05_oop_slides.html#collections-abstract-base-classes-2",
    "title": "Object oriented design in Python",
    "section": "Collections Abstract Base Classes",
    "text": "Collections Abstract Base Classes\n\n\n\n\n\nclassDiagram\n    Container &lt;|-- Collection\n    Sized &lt;|-- Collection\n    Iterable &lt;|-- Collection\n    Collection &lt;|-- Sequence\n    Collection &lt;|-- Set\n    Sequence &lt;|-- MutableSequence\n    Mapping &lt;|-- MutableMapping\n    Collection &lt;|-- Mapping\n\n    MutableSequence &lt;|-- List\n    Sequence &lt;|-- Tuple\n    MutableMapping &lt;|-- Dict"
  },
  {
    "objectID": "05_oop_slides.html#pythonic",
    "href": "05_oop_slides.html#pythonic",
    "title": "Object oriented design in Python",
    "section": "Pythonic",
    "text": "Pythonic\nIf you want your code to be Pythonic, you have to be familiar with these types and their methods.\nDundermethods:\n\n__getitem__\n__setitem__\n__len__\n__contains__\n‚Ä¶"
  },
  {
    "objectID": "05_oop_slides.html#duck-typing",
    "href": "05_oop_slides.html#duck-typing",
    "title": "Object oriented design in Python",
    "section": "Duck typing",
    "text": "Duck typing\n\n‚ÄúIf it walks like a duck and quacks like a duck, it‚Äôs a duck‚Äù\nFrom the perspective of the caller, it doesn‚Äôt matter if it is a rubber duck or a real duck.\nThe type of the object is not important, as long as it has the right methods.\nPython is different than C# or Java, where you would have to create an interface IToolbox and implement it for Toolbox."
  },
  {
    "objectID": "05_oop_slides.html#duck-typing---example",
    "href": "05_oop_slides.html#duck-typing---example",
    "title": "Object oriented design in Python",
    "section": "Duck typing - Example",
    "text": "Duck typing - Example\nAn example is a Scikit learn transformers\n\nfit\ntransform\nfit_transform\n\nIf you want to make a transformer compatible with sklearn, you have to implement these methods."
  },
  {
    "objectID": "05_oop_slides.html#duck-typing---example-1",
    "href": "05_oop_slides.html#duck-typing---example-1",
    "title": "Object oriented design in Python",
    "section": "Duck typing - Example",
    "text": "Duck typing - Example\nclass PositiveNumberTransformer:\n\n    def fit(self, X, y=None):\n        # no need to fit (still need to have the method!)\n        return self\n\n    def transform(self, X):\n        return np.abs(X)\n\n    def fit_transform(self, X, y=None):\n        return self.fit(X, y).transform(X)"
  },
  {
    "objectID": "05_oop_slides.html#duck-typing---mixins",
    "href": "05_oop_slides.html#duck-typing---mixins",
    "title": "Object oriented design in Python",
    "section": "Duck typing - Mixins",
    "text": "Duck typing - Mixins\nWe can inherit some behavior from sklearn.base.TransformerMixin\nfrom sklearn.base import TransformerMixin\n\nclass RemoveOutliersTransformer(TransformerMixin):\n\n    def __init__(self, lower_bound, upper_bound):\n        self.lower_bound = lower_bound\n        self.upper_bound = upper_bound\n        self.lower_ = None\n        self.upper_ = None\n\n    def fit(self, X, y=None):\n        self.lower_ = np.quantile(X, self.lower_bound)\n        self.upper_ = np.quantile(X, self.upper_bound)\n\n    def transform(self, X):\n        return np.clip(X, self.lower_, self.upper_)\n\n    # def fit_transform(self, X, y=None):\n    # we get this for free, from TransformerMixin"
  },
  {
    "objectID": "05_oop_slides.html#lets-revisit-the-date-interval",
    "href": "05_oop_slides.html#lets-revisit-the-date-interval",
    "title": "Object oriented design in Python",
    "section": "Let‚Äôs revisit the (date) Interval",
    "text": "Let‚Äôs revisit the (date) Interval\nThe Interval class represent an interval in time.\nclass Interval:\n    def __init__(self, start, end):\n        self.start = start\n        self.end = end\n\n    def __contains__(self, x):\n        return self.start &lt; x &lt; self.end\n\n&gt;&gt;&gt; dr = Interval(date(2020, 1, 1), date(2020, 1, 31))\n\n&gt;&gt;&gt; date(2020,1,15) in dr\nTrue\n&gt;&gt;&gt; date(1970,1,1) in dr\nFalse\n\nWhat if we want to make another type of interval, e.g.¬†a interval of numbers \\([1.0, 2.0]\\)?"
  },
  {
    "objectID": "05_oop_slides.html#a-number-interval",
    "href": "05_oop_slides.html#a-number-interval",
    "title": "Object oriented design in Python",
    "section": "A number interval",
    "text": "A number interval\nclass Interval:\n    def __init__(self, start, end):\n        self.start = start\n        self.end = end\n\n    def __contains__(self, x):\n        return self.start &lt; x &lt; self.end\n    \n&gt;&gt;&gt; interval = Interval(5, 10)\n\n&gt;&gt;&gt; 8 in interval\nTrue\n&gt;&gt;&gt; 12 in interval\nFalse\n\nAs long as the start, end and x are comparable, the Interval class is a generic class able to handle integers, floats, dates, datetimes, strings ‚Ä¶"
  },
  {
    "objectID": "05_oop_slides.html#postels-law",
    "href": "05_oop_slides.html#postels-law",
    "title": "Object oriented design in Python",
    "section": "Postel‚Äôs law",
    "text": "Postel‚Äôs law\na.k.a. the Robustness principle of software design\n\nBe liberal in what you accept\nBe conservative in what you send\n\n\ndef process(number: Union[int,str,float]) -&gt; int:\n    # make sure number is an int from now on\n    number = int(number)\n\n    result = number * 2\n    return result"
  },
  {
    "objectID": "05_oop_slides.html#section",
    "href": "05_oop_slides.html#section",
    "title": "Object oriented design in Python",
    "section": "",
    "text": "The consumers of your package (future self), will be grateful if you are not overly restricitive in what types you accept as input."
  },
  {
    "objectID": "05_oop_slides.html#example---pydantic",
    "href": "05_oop_slides.html#example---pydantic",
    "title": "Object oriented design in Python",
    "section": "Example - Pydantic",
    "text": "Example - Pydantic\n\nfrom pydantic import BaseModel\nfrom datetime import date\n\nclass Sensor(BaseModel):\n    name: str\n    voltage: float\n    install_date: date\n    location: tuple[float, float]\n\ns1 = Sensor(name=\"Sensor 1\",\n            voltage=3.3,\n            install_date=date(2020, 1, 1),\n            location=(4.42, 51.22))\ns1\n\nSensor(name='Sensor 1', voltage=3.3, install_date=datetime.date(2020, 1, 1), location=(4.42, 51.22))\n\n\n\ndata = {\n    \"name\": \"Sensor 1\",\n    \"voltage\": \"3.3\",\n    \"install_date\": \"2020-01-01\",\n    \"location\": (\"4.42\", \"51.22\")\n}\n\ns2 = Sensor(**data)\ns2\n\nSensor(name='Sensor 1', voltage=3.3, install_date=datetime.date(2020, 1, 1), location=(4.42, 51.22))"
  },
  {
    "objectID": "05_oop_slides.html#refactoring",
    "href": "05_oop_slides.html#refactoring",
    "title": "Object oriented design in Python",
    "section": "Refactoring",
    "text": "Refactoring\n\nRefactoring is a way to improve the design of existing code\nChanging a software system in such a way that it does not alter the external behavior of the code, yet improves its internal structure\nRefactoring is a way to make code more readable and maintainable\nHousekeeping"
  },
  {
    "objectID": "05_oop_slides.html#common-refactoring-techniques",
    "href": "05_oop_slides.html#common-refactoring-techniques",
    "title": "Object oriented design in Python",
    "section": "Common refactoring techniques:",
    "text": "Common refactoring techniques:\n\nExtract method\nExtract variable\nRename method\nRename variable\nRename class\nInline method\nInline variable\nInline class"
  },
  {
    "objectID": "05_oop_slides.html#rename-variable",
    "href": "05_oop_slides.html#rename-variable",
    "title": "Object oriented design in Python",
    "section": "Rename variable",
    "text": "Rename variable\nBefore\nn = 0\nfor v in y:\n    if v &lt; 0:\n        n = n + 1\n\nAfter\nFREEZING_POINT = 0.0\nn_freezing_days = 0\nfor temp in daily_max_temperatures:\n    if temp &lt; FREEZING_POINT:\n        n_freezing_days = n_freezing_days + 1"
  },
  {
    "objectID": "05_oop_slides.html#extract-variable",
    "href": "05_oop_slides.html#extract-variable",
    "title": "Object oriented design in Python",
    "section": "Extract variable",
    "text": "Extract variable\nBefore\ndef predict(x):\n    return min(0.0, 0.5 + 2.0 * min(0,x) + (random.random() - 0.5) / 10.0)\n\nAfter\ndef predict(x):\n    scale = 10.0\n    error = (random.random() - 0.5) / scale)\n    a = 0.5\n    b = 2.0 \n    draft = a + b * x + error\n    return  min(0.0, draft)"
  },
  {
    "objectID": "05_oop_slides.html#extract-method",
    "href": "05_oop_slides.html#extract-method",
    "title": "Object oriented design in Python",
    "section": "Extract method",
    "text": "Extract method\ndef error(scale):\n    return (random.random() - 0.5) / scale)\n\ndef linear_model(x, *, a=0.0, b=1.0):\n    return a + b * x\n\ndef clip(x, *, min_value=0.0):\n    return min(min_value, x)\n\ndef predict(x): \n    draft = linear_model(x, a=0.5, b=2.0) + error(scale=10.0)\n    return clip(draft, min_value=0.)"
  },
  {
    "objectID": "05_oop_slides.html#inline-method",
    "href": "05_oop_slides.html#inline-method",
    "title": "Object oriented design in Python",
    "section": "Inline method",
    "text": "Inline method\nOpposite of extract mehtod.\ndef predict(x): \n    draft = linear_model(x, a=0.5, b=2.0) + error(scale=10.0)\n    return min(0.0, x)"
  },
  {
    "objectID": "05_oop_slides.html#composed-method",
    "href": "05_oop_slides.html#composed-method",
    "title": "Object oriented design in Python",
    "section": "Composed method",
    "text": "Composed method\nBreak up a long method into smaller methods."
  },
  {
    "objectID": "05_oop_slides.html#composed-method-1",
    "href": "05_oop_slides.html#composed-method-1",
    "title": "Object oriented design in Python",
    "section": "Composed method",
    "text": "Composed method\n\nDivide your program into methods that perform one identifiable task\nKeep all of the operations in a method at the same level of abstraction.\nThis will naturally result in programs with many small methods, each a few lines long.\nWhen you use Extract method a bunch of times on a method the original method becomes a Composed method."
  },
  {
    "objectID": "05_oop_slides.html#summary",
    "href": "05_oop_slides.html#summary",
    "title": "Object oriented design in Python",
    "section": "Summary",
    "text": "Summary\n\nOOP is a way to organize your code\nEncapsulation, composition, inheritance, abstraction\nDuck Typing\nPostel‚Äôs law\nRefactoring"
  },
  {
    "objectID": "01_version_control.html#why-use-version-control-1",
    "href": "01_version_control.html#why-use-version-control-1",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Why use version control?",
    "text": "Why use version control?"
  },
  {
    "objectID": "01_version_control.html#why-use-version-control-2",
    "href": "01_version_control.html#why-use-version-control-2",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Why use version control?",
    "text": "Why use version control?\n\n\n\n\n\nKeep track of changes\nBackup and restore\nTransparency\nEasier collaboration\nImproved code quality\nAllow experimentation"
  },
  {
    "objectID": "01_version_control.html#centralized-version-control",
    "href": "01_version_control.html#centralized-version-control",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Centralized version control",
    "text": "Centralized version control\n\nSingle source with the entire history\nLocal copy with latest version . . .\nExamples: SVN, Surround"
  },
  {
    "objectID": "01_version_control.html#distributed-version-control",
    "href": "01_version_control.html#distributed-version-control",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Distributed version control",
    "text": "Distributed version control\n\nLocal copy has the entire history\nCommit changes to code offline\nAuthorative source (origin) . . .\nExamples: Git, Mercurial"
  },
  {
    "objectID": "01_version_control.html#git",
    "href": "01_version_control.html#git",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Git",
    "text": "Git\nGit is a powerful tool for managing code changes and collaborating with others on a project.\n. . .\nUse Git from the command-line, or a graphical user interface.\n. . .\n\n\n&gt; git add foo.py\n&gt; git commit -m \"Fixed\"\n&gt; git push"
  },
  {
    "objectID": "01_version_control.html#basic-git-commands",
    "href": "01_version_control.html#basic-git-commands",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Basic Git commands",
    "text": "Basic Git commands\n\n\ngit add: adds a file to the staging area\ngit commit: creates a new commit with the changes in the staging area\ngit status: shows the current status of your repository\ngit log: shows the commit history of your repository\ngit stash: temporarily save changes that are not ready to be committed"
  },
  {
    "objectID": "01_version_control.html#working-with-remote-repositories",
    "href": "01_version_control.html#working-with-remote-repositories",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Working with remote repositories",
    "text": "Working with remote repositories\n\n\ngit clone: creates a copy of the codebase on your local machine.\ngit push: pushes changes back to the remote repository.\ngit pull: pulls changes from the remote repository."
  },
  {
    "objectID": "01_version_control.html#git-hosting-platforms",
    "href": "01_version_control.html#git-hosting-platforms",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Git hosting platforms",
    "text": "Git hosting platforms"
  },
  {
    "objectID": "01_version_control.html#github",
    "href": "01_version_control.html#github",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "GitHub",
    "text": "GitHub\n\n\nGit repository hosting service\nCollaborate with others on codebase\nFork a repository to work on your own version\nPull requests for code review and merging changes\nIssue tracking and project management tools\nGitHub Pages for hosting websites"
  },
  {
    "objectID": "01_version_control.html#demo-1",
    "href": "01_version_control.html#demo-1",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Demo 1",
    "text": "Demo 1\n\nCreate a new repository on GitHub\nClone the repository to your local machine\nAdd a file\nCommit the file\nPush the file to GitHub"
  },
  {
    "objectID": "01_version_control.html#branching-and-merging",
    "href": "01_version_control.html#branching-and-merging",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Branching and Merging",
    "text": "Branching and Merging\n\nA branch is a separate version of your code that you can work on independently from the main branch.\ngit merge: merges changes back into the main branch (we will do this from GitHub)"
  },
  {
    "objectID": "01_version_control.html#pull-request-workflow",
    "href": "01_version_control.html#pull-request-workflow",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Pull request workflow",
    "text": "Pull request workflow\n\n\n\nCreate a branch\nMake changes\nCreate a pull request\nReview\nMerge\n\n\n\n\nClone a repository to work on a copy (optionally: fork first)\nCreate a branch for each new feature or fix\nCommit changes and push to remote repository\nOpen a pull request to propose changes and request code review\nMerge changes back into the main branch"
  },
  {
    "objectID": "01_version_control.html#demo-2",
    "href": "01_version_control.html#demo-2",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Demo 2",
    "text": "Demo 2\n\nCreate a new branch\nMake changes\nCommit the file\nCreate a pull request\nGet feedback and merge changes"
  },
  {
    "objectID": "01_version_control.html#best-practices",
    "href": "01_version_control.html#best-practices",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Best practices",
    "text": "Best practices\n\n\nCommit often\nUse descriptive commit messages\nKeep pull requests small and focused\nUse ‚Äúissues‚Äù to track work\nReview code regularly\nUse .gitignore to exclude files\nDon‚Äôt commit data (only very small test data)\nDon‚Äôt commit passwords"
  },
  {
    "objectID": "01_version_control.html#gettings-started",
    "href": "01_version_control.html#gettings-started",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Gettings started",
    "text": "Gettings started\n\nCreate a GitHub account\nInstall GitHub Desktop (includes Git)\nCreate a new repository on GitHub"
  },
  {
    "objectID": "01_version_control.html#resources",
    "href": "01_version_control.html#resources",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Resources",
    "text": "Resources\n\nGitHub: quickstart\nRealPython: git and github intro"
  },
  {
    "objectID": "01_version_control.html#word-list",
    "href": "01_version_control.html#word-list",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Word list",
    "text": "Word list\n\nClone\n\nmaking a local copy of a remote repository on your computer.\n\nRemote\n\na reference to a Git repository that is hosted on a remote server, typically on a service like GitHub.\n\nCommit\n\na record of changes made to a repository, including the changes themselves and a message describing what was changed.\n\nStage\n\nselecting changes that you want to include in the next commit.\n\nPush\n\nsending changes from your local repository to a remote repository.\n\nPull\n\nretrieving changes from a remote repository and merging them into your local repository.\n\nBranch\n\na separate line of development that can be used to work on new features or bug fixes without affecting the main codebase.\n\nPull request\n\na way to propose changes to a repository by asking the repository owner to ‚Äúpull‚Äù in the changes from a branch or fork.\n\nStash\n\ntemporarily save changes that are not ready to be committed (bring them back later when needed).\n\nMerge\n\nthe process of combining changes from one branch or fork into another, typically the main codebase.\n\nRebase\n\na way to integrate changes from one branch into another by applying the changes from the first branch to the second branch as if they were made there all along.\n\nMerge conflict\n\nwhen Git is unable to automatically merge changes from two different branches, because the changes overlap or conflict.\n\nCheckout\n\nswitching between different branches or commits in a repository.\n\nFork\n\na copy of a repository that you create on your own account, which you can modify without affecting the original repository."
  },
  {
    "objectID": "01_version_control.html#summary",
    "href": "01_version_control.html#summary",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Summary",
    "text": "Summary\n\n\nVersion control is a tool for managing changes to code\nGit is a version control system (software)\nGitHub is a platform for hosting and collaborating on Git repositories\nGitHub Desktop is a GUI for Git (and GitHub)\nPull requests are a way to propose changes to a repository"
  },
  {
    "objectID": "01_version_control_slides.html#why-use-version-control",
    "href": "01_version_control_slides.html#why-use-version-control",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Why use version control?",
    "text": "Why use version control?"
  },
  {
    "objectID": "01_version_control_slides.html#why-use-version-control-1",
    "href": "01_version_control_slides.html#why-use-version-control-1",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Why use version control?",
    "text": "Why use version control?"
  },
  {
    "objectID": "01_version_control_slides.html#why-use-version-control-2",
    "href": "01_version_control_slides.html#why-use-version-control-2",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Why use version control?",
    "text": "Why use version control?\n\n\n\n\n\nKeep track of changes\nBackup and restore\nTransparency\nEasier collaboration\nImproved code quality\nAllow experimentation"
  },
  {
    "objectID": "01_version_control_slides.html#centralized-version-control",
    "href": "01_version_control_slides.html#centralized-version-control",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Centralized version control",
    "text": "Centralized version control\n\nSingle source with the entire history\nLocal copy with latest version . . .\nExamples: SVN, Surround"
  },
  {
    "objectID": "01_version_control_slides.html#distributed-version-control",
    "href": "01_version_control_slides.html#distributed-version-control",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Distributed version control",
    "text": "Distributed version control\n\nLocal copy has the entire history\nCommit changes to code offline\nAuthorative source (origin) . . .\nExamples: Git, Mercurial"
  },
  {
    "objectID": "01_version_control_slides.html#git",
    "href": "01_version_control_slides.html#git",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Git",
    "text": "Git\nGit is a powerful tool for managing code changes and collaborating with others on a project.\n\nUse Git from the command-line, or a graphical user interface.\n\n\n\n\n&gt; git add foo.py\n&gt; git commit -m \"Fixed\"\n&gt; git push"
  },
  {
    "objectID": "01_version_control_slides.html#basic-git-commands",
    "href": "01_version_control_slides.html#basic-git-commands",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Basic Git commands",
    "text": "Basic Git commands\n\ngit add: adds a file to the staging area\ngit commit: creates a new commit with the changes in the staging area\ngit status: shows the current status of your repository\ngit log: shows the commit history of your repository\ngit stash: temporarily save changes that are not ready to be committed"
  },
  {
    "objectID": "01_version_control_slides.html#working-with-remote-repositories",
    "href": "01_version_control_slides.html#working-with-remote-repositories",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Working with remote repositories",
    "text": "Working with remote repositories\n\ngit clone: creates a copy of the codebase on your local machine.\ngit push: pushes changes back to the remote repository.\ngit pull: pulls changes from the remote repository."
  },
  {
    "objectID": "01_version_control_slides.html#git-hosting-platforms",
    "href": "01_version_control_slides.html#git-hosting-platforms",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Git hosting platforms",
    "text": "Git hosting platforms"
  },
  {
    "objectID": "01_version_control_slides.html#github",
    "href": "01_version_control_slides.html#github",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "GitHub",
    "text": "GitHub\n\nGit repository hosting service\nCollaborate with others on codebase\nFork a repository to work on your own version\nPull requests for code review and merging changes\nIssue tracking and project management tools\nGitHub Pages for hosting websites"
  },
  {
    "objectID": "01_version_control_slides.html#demo-1",
    "href": "01_version_control_slides.html#demo-1",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Demo 1",
    "text": "Demo 1\n\nCreate a new repository on GitHub\nClone the repository to your local machine\nAdd a file\nCommit the file\nPush the file to GitHub"
  },
  {
    "objectID": "01_version_control_slides.html#branching-and-merging",
    "href": "01_version_control_slides.html#branching-and-merging",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Branching and Merging",
    "text": "Branching and Merging\n\nA branch is a separate version of your code that you can work on independently from the main branch.\ngit merge: merges changes back into the main branch (we will do this from GitHub)"
  },
  {
    "objectID": "01_version_control_slides.html#pull-request-workflow",
    "href": "01_version_control_slides.html#pull-request-workflow",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Pull request workflow",
    "text": "Pull request workflow\n\n\nCreate a branch\nMake changes\nCreate a pull request\nReview\nMerge\n\n\n\nClone a repository to work on a copy (optionally: fork first)\nCreate a branch for each new feature or fix\nCommit changes and push to remote repository\nOpen a pull request to propose changes and request code review\nMerge changes back into the main branch"
  },
  {
    "objectID": "01_version_control_slides.html#demo-2",
    "href": "01_version_control_slides.html#demo-2",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Demo 2",
    "text": "Demo 2\n\nCreate a new branch\nMake changes\nCommit the file\nCreate a pull request\nGet feedback and merge changes"
  },
  {
    "objectID": "01_version_control_slides.html#best-practices",
    "href": "01_version_control_slides.html#best-practices",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Best practices",
    "text": "Best practices\n\nCommit often\nUse descriptive commit messages\nKeep pull requests small and focused\nUse ‚Äúissues‚Äù to track work\nReview code regularly\nUse .gitignore to exclude files\nDon‚Äôt commit data (only very small test data)\nDon‚Äôt commit passwords"
  },
  {
    "objectID": "01_version_control_slides.html#gettings-started",
    "href": "01_version_control_slides.html#gettings-started",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Gettings started",
    "text": "Gettings started\n\nCreate a GitHub account\nInstall GitHub Desktop (includes Git)\nCreate a new repository on GitHub"
  },
  {
    "objectID": "01_version_control_slides.html#resources",
    "href": "01_version_control_slides.html#resources",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Resources",
    "text": "Resources\n\nGitHub: quickstart\nRealPython: git and github intro"
  },
  {
    "objectID": "01_version_control_slides.html#word-list",
    "href": "01_version_control_slides.html#word-list",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Word list",
    "text": "Word list\n\nClone\n\nmaking a local copy of a remote repository on your computer.\n\nRemote\n\na reference to a Git repository that is hosted on a remote server, typically on a service like GitHub.\n\nCommit\n\na record of changes made to a repository, including the changes themselves and a message describing what was changed.\n\nStage\n\nselecting changes that you want to include in the next commit.\n\nPush\n\nsending changes from your local repository to a remote repository.\n\nPull\n\nretrieving changes from a remote repository and merging them into your local repository.\n\nBranch\n\na separate line of development that can be used to work on new features or bug fixes without affecting the main codebase.\n\nPull request\n\na way to propose changes to a repository by asking the repository owner to ‚Äúpull‚Äù in the changes from a branch or fork.\n\nStash\n\ntemporarily save changes that are not ready to be committed (bring them back later when needed).\n\nMerge\n\nthe process of combining changes from one branch or fork into another, typically the main codebase.\n\nRebase\n\na way to integrate changes from one branch into another by applying the changes from the first branch to the second branch as if they were made there all along.\n\nMerge conflict\n\nwhen Git is unable to automatically merge changes from two different branches, because the changes overlap or conflict.\n\nCheckout\n\nswitching between different branches or commits in a repository.\n\nFork\n\na copy of a repository that you create on your own account, which you can modify without affecting the original repository."
  },
  {
    "objectID": "01_version_control_slides.html#summary",
    "href": "01_version_control_slides.html#summary",
    "title": "Git, GitHub, Pull Requests, and code reviews",
    "section": "Summary",
    "text": "Summary\n\nVersion control is a tool for managing changes to code\nGit is a version control system (software)\nGitHub is a platform for hosting and collaborating on Git repositories\nGitHub Desktop is a GUI for Git (and GitHub)\nPull requests are a way to propose changes to a repository"
  },
  {
    "objectID": "course_structure.html",
    "href": "course_structure.html",
    "title": "Python package development",
    "section": "",
    "text": "flowchart TD\n\n    M1(Git, Pull Requests, and code reviews)\n    M2(Python functions, classes, and modules)\n    M3(Testing and auto-formatting)\n    M4(Dependencies and GitHub actions)\n    M5(Documentation)\n    M6(Object oriented design in Python)\n    M7(Distributing your package)\n\n    B1[1. The bigger picture]\n    B2[2. Separations of concern]\n    B3[3. Abstraction and encapsulation]\n    B4[4. Designing for high performance]\n    B5[5. Testing your software]\n    B6[6. Separations of concerns in practice]\n    B7[7. Extensibility and flexibility]\n    B8[8. The rules and exceptions of inheritance]\n    B9[9. Keeping things lightweight]\n    B10[10. Achieving loose coupling]\n\n    M1 --&gt; M2 --&gt; M3 --&gt; M4 --&gt; M5 --&gt; M6 --&gt; M7\n\n    B1 --&gt; M2\n    B2 --&gt; M2\n    B3 --&gt; M6\n    B8 --&gt; M6\n    B4 --&gt; M4\n    B5 --&gt; M4\n    B6 --&gt; M5\n    B7 --&gt; M3\n\n    B9 --&gt; M7\n    B10 --&gt; M7"
  },
  {
    "objectID": "04_dependencies_ci.html",
    "href": "04_dependencies_ci.html",
    "title": "Dependencies and Continuous Integration",
    "section": "",
    "text": "Application\nA program that is run by a user\n\ncommand line tool\nscript\nweb application\n\nPin versions to ensure reproducibility, e.g.¬†numpy==1.11.0\n\nLibrary\nA program that is used by another program\n\nPython package\nLow level library (C, Fortran, Rust, ‚Ä¶)\n\nMake the requirements as loose as possible, e.g.¬†numpy&gt;=1.11.0\n\n\n\nMake the requirements loose, to avoid conflicts with other packages."
  },
  {
    "objectID": "04_dependencies_ci.html#section",
    "href": "04_dependencies_ci.html#section",
    "title": "Dependencies and Continuous Integration",
    "section": "",
    "text": "Application\nA program that is run by a user\n\ncommand line tool\nscript\nweb application\n\nPin versions to ensure reproducibility, e.g.¬†numpy==1.11.0\n\nLibrary\nA program that is used by another program\n\nPython package\nLow level library (C, Fortran, Rust, ‚Ä¶)\n\nMake the requirements as loose as possible, e.g.¬†numpy&gt;=1.11.0\n\n\n\nMake the requirements loose, to avoid conflicts with other packages."
  },
  {
    "objectID": "04_dependencies_ci.html#dependency-tree",
    "href": "04_dependencies_ci.html#dependency-tree",
    "title": "Dependencies and Continuous Integration",
    "section": "Dependency tree",
    "text": "Dependency tree"
  },
  {
    "objectID": "04_dependencies_ci.html#uv",
    "href": "04_dependencies_ci.html#uv",
    "title": "Dependencies and Continuous Integration",
    "section": "uv",
    "text": "uv\n\nüöÄ A single tool to replace pip, pip-tools, pipx, poetry, pyenv, twine, virtualenv, and more.\n‚ö°Ô∏è 10-100x faster than pip.\nüóÇÔ∏è Provides comprehensive project management, with a universal lockfile.\n‚ùáÔ∏è Runs scripts, with support for inline dependency metadata.\nüêç Installs and manages Python versions.\nüõ†Ô∏è Runs and installs tools published as Python packages.\nüî© Includes a pip-compatible interface for a performance boost with a familiar CLI.\nüíæ Disk-space efficient, with a global cache for dependency deduplication.\n‚è¨ Installable without Rust or Python via curl or pip.\nüñ•Ô∏è Supports macOS, Linux, and Windows."
  },
  {
    "objectID": "04_dependencies_ci.html#dependency-management",
    "href": "04_dependencies_ci.html#dependency-management",
    "title": "Dependencies and Continuous Integration",
    "section": "Dependency management",
    "text": "Dependency management\nuv is the recommended tool for managing a Python project including dependencies.\nExample of pinning versions:\n\n\npyproject.toml\n\ndependencies = [\n  \"numpy==1.11.0\",\n  \"scipy==0.17.0\",\n  \"matplotlib==1.5.1\",\n]\n\n. . .\nOr using a range of versions:\n\n\npyproject.toml\n\ndependencies = [\n  \"numpy&gt;=1.11.0\",\n  \"scipy&gt;=0.17.0\",\n  \"matplotlib&gt;=1.5.1,&lt;=2.0.0\"\n]\n\n. . .\nInstall dependencies:\n$ uv sync"
  },
  {
    "objectID": "04_dependencies_ci.html#development-dependencies",
    "href": "04_dependencies_ci.html#development-dependencies",
    "title": "Dependencies and Continuous Integration",
    "section": "Development dependencies",
    "text": "Development dependencies\nI.e. dependencies needed for testing, building documentation, linting, etc. not needed to run the package.\n\n\npyproject.toml\n\n[dependency-groups]\ndev = [\n    \"pytest&gt;=8.4.1\",\n]"
  },
  {
    "objectID": "04_dependencies_ci.html#dependency-management-using-uv",
    "href": "04_dependencies_ci.html#dependency-management-using-uv",
    "title": "Dependencies and Continuous Integration",
    "section": "Dependency management using uv",
    "text": "Dependency management using uv\n\nAdd a dependency:\n\n$ uv add matplotlib\n\nRemove a dependency:\n\n$ uv remove seaborn\n\nAdd development dependency:\n\n$ uv add --dev pytest"
  },
  {
    "objectID": "04_dependencies_ci.html#creating-an-installable-package",
    "href": "04_dependencies_ci.html#creating-an-installable-package",
    "title": "Dependencies and Continuous Integration",
    "section": "Creating an installable package",
    "text": "Creating an installable package\nCreate a new library project:\n$ uv init --lib\nStart a Python session:\n$ uv run python\n&gt;&gt;&gt; import mini\n&gt;&gt;&gt; mini.foo()\n42\n. . .\nRun tests:\n$ uv run pytest\n...\n\ntests/test_foo.py .                       [100%]\n\n=============== 1 passed in 0.01s ==============="
  },
  {
    "objectID": "04_dependencies_ci.html#virtual-environments",
    "href": "04_dependencies_ci.html#virtual-environments",
    "title": "Dependencies and Continuous Integration",
    "section": "Virtual environments",
    "text": "Virtual environments\n\n\nCreates a clean environment for each project\nAllows different versions of a package to coexist on your machine\nCan be used to create a reproducible environment for a project\nVirtual environments are managed by uv"
  },
  {
    "objectID": "04_dependencies_ci.html#continuous-integration",
    "href": "04_dependencies_ci.html#continuous-integration",
    "title": "Dependencies and Continuous Integration",
    "section": "Continuous Integration",
    "text": "Continuous Integration\n\nRunning tests on every commit in a well defined environment ensures that the code is working as expected.\nIt solves the ‚Äúit works on my machine‚Äù problem.\nExecuting code on a remote server is a good way to ensure that the code is working as expected.\nExample of CI services:\n\nGitHub Actions\nAzure Pipelines\nTravis CI"
  },
  {
    "objectID": "04_dependencies_ci.html#github-actions",
    "href": "04_dependencies_ci.html#github-actions",
    "title": "Dependencies and Continuous Integration",
    "section": "GitHub Actions",
    "text": "GitHub Actions\n\n\n\nWorkflow are stored in the .github/workflows folder.\nWorkflow is described in a YAML file.\nYAML is whitespace sensitive (like Python).\nYAML can contain lists, dictionaries and strings, and can be nested.\n\n\n$ tree mikeio/.github/\nmikeio/.github/\n‚îî‚îÄ‚îÄ workflows\n    ‚îú‚îÄ‚îÄ docs.yml\n    ‚îú‚îÄ‚îÄ downstream_test.yml\n    ‚îú‚îÄ‚îÄ full_test.yml\n    ‚îú‚îÄ‚îÄ notebooks_test.yml\n    ‚îú‚îÄ‚îÄ perf_test.yml\n    ‚îú‚îÄ‚îÄ python-publish.yml\n    ‚îî‚îÄ‚îÄ quick_test.yml"
  },
  {
    "objectID": "04_dependencies_ci.html#workflow-example",
    "href": "04_dependencies_ci.html#workflow-example",
    "title": "Dependencies and Continuous Integration",
    "section": "Workflow example",
    "text": "Workflow example\nname: Quick test\n\non: # when to run the workflow\n  push:\n    branches: [ main]\n  pull_request:\n    branches: [ main ]\n\njobs: # which jobs to run\n  build: # descriptive name üôÑ\n    runs-on: ubuntu-latest # on what operating system\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up uv\n      uses: astral-sh/setup-uv@v6\n      with:\n        python-version: \"3.13\"\n    - name: Install dependencies\n      run: |\n        uv sync\n\n    - name: Test with pytest\n      run: |\n        uv run pytest\n\nüôÇüöÄ\n\n\n‚òπÔ∏è"
  },
  {
    "objectID": "04_dependencies_ci.html#benefits-of-ci",
    "href": "04_dependencies_ci.html#benefits-of-ci",
    "title": "Dependencies and Continuous Integration",
    "section": "Benefits of CI",
    "text": "Benefits of CI\n\n\nRun tests on every commit\nTest on different operating systems\nTest on different Python versions\nCreate API documentation (next week)\nPublish package to PyPI or similar package repository (two weeks from now)"
  },
  {
    "objectID": "04_dependencies_ci.html#triggers",
    "href": "04_dependencies_ci.html#triggers",
    "title": "Dependencies and Continuous Integration",
    "section": "Triggers",
    "text": "Triggers\n\npush and pull_request are the most common triggers\nschedule can be used to run the workflow on a schedule\nworkflow_dispatch can be used to trigger the workflow manually\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '0 0 * * 0'\n  workflow_dispatch:"
  },
  {
    "objectID": "04_dependencies_ci.html#jobs",
    "href": "04_dependencies_ci.html#jobs",
    "title": "Dependencies and Continuous Integration",
    "section": "Jobs",
    "text": "Jobs\n\nOperating system\nPython version\n‚Ä¶\n\n...\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n        python-version: [\"3.10\",\"3.13\"]\n..."
  },
  {
    "objectID": "04_dependencies_ci.html#github-releases",
    "href": "04_dependencies_ci.html#github-releases",
    "title": "Dependencies and Continuous Integration",
    "section": "GitHub Releases",
    "text": "GitHub Releases\n\n\n\nGitHub releases are a way to publish software releases.\nYou can upload files, write release notes and tag the release.\nAs a minimum, the release will contain the source code at the time of the release.\nCreating a release can trigger other workflows, e.g.¬†publishing a package to PyPI.\n\n\n\n\n\nhttps://github.com/pydata/xarray/releases/tag/v2022.12.0"
  },
  {
    "objectID": "04_dependencies_ci.html#summary",
    "href": "04_dependencies_ci.html#summary",
    "title": "Dependencies and Continuous Integration",
    "section": "Summary",
    "text": "Summary\n\n\nApplication vs library\nUse a separate virtual environment for each project\nUse GitHub Actions to run tests on every commit\nUse GitHub Releases to publish software releases"
  },
  {
    "objectID": "04_dependencies_ci_slides.html#section",
    "href": "04_dependencies_ci_slides.html#section",
    "title": "Dependencies and Continuous Integration",
    "section": "",
    "text": "Application\nA program that is run by a user\n\ncommand line tool\nscript\nweb application\n\nPin versions to ensure reproducibility, e.g.¬†numpy==1.11.0\n\nLibrary\nA program that is used by another program\n\nPython package\nLow level library (C, Fortran, Rust, ‚Ä¶)\n\nMake the requirements as loose as possible, e.g.¬†numpy&gt;=1.11.0\n\n\nMake the requirements loose, to avoid conflicts with other packages."
  },
  {
    "objectID": "04_dependencies_ci_slides.html#dependency-tree",
    "href": "04_dependencies_ci_slides.html#dependency-tree",
    "title": "Dependencies and Continuous Integration",
    "section": "Dependency tree",
    "text": "Dependency tree"
  },
  {
    "objectID": "04_dependencies_ci_slides.html#uv",
    "href": "04_dependencies_ci_slides.html#uv",
    "title": "Dependencies and Continuous Integration",
    "section": "uv",
    "text": "uv\n\nüöÄ A single tool to replace pip, pip-tools, pipx, poetry, pyenv, twine, virtualenv, and more.\n‚ö°Ô∏è 10-100x faster than pip.\nüóÇÔ∏è Provides comprehensive project management, with a universal lockfile.\n‚ùáÔ∏è Runs scripts, with support for inline dependency metadata.\nüêç Installs and manages Python versions.\nüõ†Ô∏è Runs and installs tools published as Python packages.\nüî© Includes a pip-compatible interface for a performance boost with a familiar CLI.\nüíæ Disk-space efficient, with a global cache for dependency deduplication.\n‚è¨ Installable without Rust or Python via curl or pip.\nüñ•Ô∏è Supports macOS, Linux, and Windows."
  },
  {
    "objectID": "04_dependencies_ci_slides.html#dependency-management",
    "href": "04_dependencies_ci_slides.html#dependency-management",
    "title": "Dependencies and Continuous Integration",
    "section": "Dependency management",
    "text": "Dependency management\nuv is the recommended tool for managing a Python project including dependencies.\nExample of pinning versions:\n\n\npyproject.toml\n\ndependencies = [\n  \"numpy==1.11.0\",\n  \"scipy==0.17.0\",\n  \"matplotlib==1.5.1\",\n]\n\n\nOr using a range of versions:\n\n\npyproject.toml\n\ndependencies = [\n  \"numpy&gt;=1.11.0\",\n  \"scipy&gt;=0.17.0\",\n  \"matplotlib&gt;=1.5.1,&lt;=2.0.0\"\n]\n\n\n\nInstall dependencies:\n$ uv sync"
  },
  {
    "objectID": "04_dependencies_ci_slides.html#development-dependencies",
    "href": "04_dependencies_ci_slides.html#development-dependencies",
    "title": "Dependencies and Continuous Integration",
    "section": "Development dependencies",
    "text": "Development dependencies\nI.e. dependencies needed for testing, building documentation, linting, etc. not needed to run the package.\n\n\npyproject.toml\n\n[dependency-groups]\ndev = [\n    \"pytest&gt;=8.4.1\",\n]"
  },
  {
    "objectID": "04_dependencies_ci_slides.html#dependency-management-using-uv",
    "href": "04_dependencies_ci_slides.html#dependency-management-using-uv",
    "title": "Dependencies and Continuous Integration",
    "section": "Dependency management using uv",
    "text": "Dependency management using uv\n\nAdd a dependency:\n\n$ uv add matplotlib\n\nRemove a dependency:\n\n$ uv remove seaborn\n\nAdd development dependency:\n\n$ uv add --dev pytest"
  },
  {
    "objectID": "04_dependencies_ci_slides.html#creating-an-installable-package",
    "href": "04_dependencies_ci_slides.html#creating-an-installable-package",
    "title": "Dependencies and Continuous Integration",
    "section": "Creating an installable package",
    "text": "Creating an installable package\nCreate a new library project:\n$ uv init --lib\nStart a Python session:\n$ uv run python\n&gt;&gt;&gt; import mini\n&gt;&gt;&gt; mini.foo()\n42\n\nRun tests:\n$ uv run pytest\n...\n\ntests/test_foo.py .                       [100%]\n\n=============== 1 passed in 0.01s ==============="
  },
  {
    "objectID": "04_dependencies_ci_slides.html#virtual-environments",
    "href": "04_dependencies_ci_slides.html#virtual-environments",
    "title": "Dependencies and Continuous Integration",
    "section": "Virtual environments",
    "text": "Virtual environments\n\nCreates a clean environment for each project\nAllows different versions of a package to coexist on your machine\nCan be used to create a reproducible environment for a project\nVirtual environments are managed by uv"
  },
  {
    "objectID": "04_dependencies_ci_slides.html#continuous-integration",
    "href": "04_dependencies_ci_slides.html#continuous-integration",
    "title": "Dependencies and Continuous Integration",
    "section": "Continuous Integration",
    "text": "Continuous Integration\n\nRunning tests on every commit in a well defined environment ensures that the code is working as expected.\nIt solves the ‚Äúit works on my machine‚Äù problem.\nExecuting code on a remote server is a good way to ensure that the code is working as expected.\nExample of CI services:\n\nGitHub Actions\nAzure Pipelines\nTravis CI"
  },
  {
    "objectID": "04_dependencies_ci_slides.html#github-actions",
    "href": "04_dependencies_ci_slides.html#github-actions",
    "title": "Dependencies and Continuous Integration",
    "section": "GitHub Actions",
    "text": "GitHub Actions\n\n\n\nWorkflow are stored in the .github/workflows folder.\nWorkflow is described in a YAML file.\nYAML is whitespace sensitive (like Python).\nYAML can contain lists, dictionaries and strings, and can be nested.\n\n\n$ tree mikeio/.github/\nmikeio/.github/\n‚îî‚îÄ‚îÄ workflows\n    ‚îú‚îÄ‚îÄ docs.yml\n    ‚îú‚îÄ‚îÄ downstream_test.yml\n    ‚îú‚îÄ‚îÄ full_test.yml\n    ‚îú‚îÄ‚îÄ notebooks_test.yml\n    ‚îú‚îÄ‚îÄ perf_test.yml\n    ‚îú‚îÄ‚îÄ python-publish.yml\n    ‚îî‚îÄ‚îÄ quick_test.yml"
  },
  {
    "objectID": "04_dependencies_ci_slides.html#workflow-example",
    "href": "04_dependencies_ci_slides.html#workflow-example",
    "title": "Dependencies and Continuous Integration",
    "section": "Workflow example",
    "text": "Workflow example\nname: Quick test\n\non: # when to run the workflow\n  push:\n    branches: [ main]\n  pull_request:\n    branches: [ main ]\n\njobs: # which jobs to run\n  build: # descriptive name üôÑ\n    runs-on: ubuntu-latest # on what operating system\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up uv\n      uses: astral-sh/setup-uv@v6\n      with:\n        python-version: \"3.13\"\n    - name: Install dependencies\n      run: |\n        uv sync\n\n    - name: Test with pytest\n      run: |\n        uv run pytest"
  },
  {
    "objectID": "04_dependencies_ci_slides.html#benefits-of-ci",
    "href": "04_dependencies_ci_slides.html#benefits-of-ci",
    "title": "Dependencies and Continuous Integration",
    "section": "Benefits of CI",
    "text": "Benefits of CI\n\nRun tests on every commit\nTest on different operating systems\nTest on different Python versions\nCreate API documentation (next week)\nPublish package to PyPI or similar package repository (two weeks from now)"
  },
  {
    "objectID": "04_dependencies_ci_slides.html#triggers",
    "href": "04_dependencies_ci_slides.html#triggers",
    "title": "Dependencies and Continuous Integration",
    "section": "Triggers",
    "text": "Triggers\n\npush and pull_request are the most common triggers\nschedule can be used to run the workflow on a schedule\nworkflow_dispatch can be used to trigger the workflow manually\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '0 0 * * 0'\n  workflow_dispatch:"
  },
  {
    "objectID": "04_dependencies_ci_slides.html#jobs",
    "href": "04_dependencies_ci_slides.html#jobs",
    "title": "Dependencies and Continuous Integration",
    "section": "Jobs",
    "text": "Jobs\n\nOperating system\nPython version\n‚Ä¶\n\n...\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n        python-version: [\"3.10\",\"3.13\"]\n..."
  },
  {
    "objectID": "04_dependencies_ci_slides.html#github-releases",
    "href": "04_dependencies_ci_slides.html#github-releases",
    "title": "Dependencies and Continuous Integration",
    "section": "GitHub Releases",
    "text": "GitHub Releases\n\n\n\nGitHub releases are a way to publish software releases.\nYou can upload files, write release notes and tag the release.\nAs a minimum, the release will contain the source code at the time of the release.\nCreating a release can trigger other workflows, e.g.¬†publishing a package to PyPI.\n\n\n\n\nhttps://github.com/pydata/xarray/releases/tag/v2022.12.0"
  },
  {
    "objectID": "04_dependencies_ci_slides.html#summary",
    "href": "04_dependencies_ci_slides.html#summary",
    "title": "Dependencies and Continuous Integration",
    "section": "Summary",
    "text": "Summary\n\nApplication vs library\nUse a separate virtual environment for each project\nUse GitHub Actions to run tests on every commit\nUse GitHub Releases to publish software releases"
  },
  {
    "objectID": "group_work/07_module.html",
    "href": "group_work/07_module.html",
    "title": "Python package development",
    "section": "",
    "text": "Q1: TBD\n\nBack to overview"
  },
  {
    "objectID": "group_work/07_module.html#module-07",
    "href": "group_work/07_module.html#module-07",
    "title": "Python package development",
    "section": "",
    "text": "Q1: TBD\n\nBack to overview"
  },
  {
    "objectID": "group_work/06_module.html",
    "href": "group_work/06_module.html",
    "title": "Python package development",
    "section": "",
    "text": "Q1: Reflect on the work your did on your project for module 5 (OOP design).\nQ2: What is good documentation for you? Have you come across a software library or application that was well documented. Why did you find the documentation useful (e.g.¬†examples ready to copy/paste? When you start with a new library what is most important to get you started?\nQ3: What is the most important thing you learned in this module?\n\nBack to overview"
  },
  {
    "objectID": "group_work/06_module.html#module-06",
    "href": "group_work/06_module.html#module-06",
    "title": "Python package development",
    "section": "",
    "text": "Q1: Reflect on the work your did on your project for module 5 (OOP design).\nQ2: What is good documentation for you? Have you come across a software library or application that was well documented. Why did you find the documentation useful (e.g.¬†examples ready to copy/paste? When you start with a new library what is most important to get you started?\nQ3: What is the most important thing you learned in this module?\n\nBack to overview"
  },
  {
    "objectID": "group_work/01_module.html",
    "href": "group_work/01_module.html",
    "title": "Python package development",
    "section": "",
    "text": "Study this script clean_project_data_v4_final2.py for 3 minutes\nConsider what you could do to improve it\nQ1: Discuss in your group how to improve the script.\nQ2: Version control. What is your experience with version control?\n\nThink about a project you‚Äôve worked on in the past that involved collaborating with others on code. What challenges did you face, and how do you think Git and GitHub could have helped to address those challenges?\n\n\nBack to overview"
  },
  {
    "objectID": "group_work/01_module.html#module-1",
    "href": "group_work/01_module.html#module-1",
    "title": "Python package development",
    "section": "",
    "text": "Study this script clean_project_data_v4_final2.py for 3 minutes\nConsider what you could do to improve it\nQ1: Discuss in your group how to improve the script.\nQ2: Version control. What is your experience with version control?\n\nThink about a project you‚Äôve worked on in the past that involved collaborating with others on code. What challenges did you face, and how do you think Git and GitHub could have helped to address those challenges?\n\n\nBack to overview"
  },
  {
    "objectID": "group_work/04_module.html",
    "href": "group_work/04_module.html",
    "title": "Python package development",
    "section": "",
    "text": "Q1: In your course project homework from last module, you separated the classes into separate files, how did it go? In some programming language, the convention is to put each class into a separate file, it this always a good practice?\nQ2: One of the goals with this course is to be able to create software in a collaborative way, have you experienced or can you image any challenges with creating software in a collaborative way? What could be done to mitigate these challenges?\nQ3: Have you have problems with conflicting dependencies in the past? (E.g. some library needs a specific version of another library, but you need a different version of the same library for another part of your code.) How did you solve it?\n\nBack to overview"
  },
  {
    "objectID": "group_work/04_module.html#module-04",
    "href": "group_work/04_module.html#module-04",
    "title": "Python package development",
    "section": "",
    "text": "Q1: In your course project homework from last module, you separated the classes into separate files, how did it go? In some programming language, the convention is to put each class into a separate file, it this always a good practice?\nQ2: One of the goals with this course is to be able to create software in a collaborative way, have you experienced or can you image any challenges with creating software in a collaborative way? What could be done to mitigate these challenges?\nQ3: Have you have problems with conflicting dependencies in the past? (E.g. some library needs a specific version of another library, but you need a different version of the same library for another part of your code.) How did you solve it?\n\nBack to overview"
  },
  {
    "objectID": "07_packaging.html",
    "href": "07_packaging.html",
    "title": "Distributing your Python package",
    "section": "",
    "text": "Packaging means creating a package that can be installed by pip.\nThere are many ways to create an installable package, and many ways to distribute it.\nWe will show how to create a package using hatchling, and how to distribute it on GitHub, PyPI and a private PyPI server."
  },
  {
    "objectID": "07_packaging.html#packaging",
    "href": "07_packaging.html#packaging",
    "title": "Distributing your Python package",
    "section": "",
    "text": "Packaging means creating a package that can be installed by pip.\nThere are many ways to create an installable package, and many ways to distribute it.\nWe will show how to create a package using hatchling, and how to distribute it on GitHub, PyPI and a private PyPI server."
  },
  {
    "objectID": "07_packaging.html#benefits-of-packaging",
    "href": "07_packaging.html#benefits-of-packaging",
    "title": "Distributing your Python package",
    "section": "Benefits of packaging",
    "text": "Benefits of packaging\n\n\nDistribute your package to others\nInstall your package with pip\nSpecify dependencies\nReproducibility\nSpecify version\nRelease vs.¬†development versions"
  },
  {
    "objectID": "07_packaging.html#packaging-workflow",
    "href": "07_packaging.html#packaging-workflow",
    "title": "Distributing your Python package",
    "section": "Packaging workflow",
    "text": "Packaging workflow\n\nCreate a pyproject.toml in the root folder of the project\nBuild a package (e.g.¬†myproject-0.1.0-py3-none-any.whl)\nUpload the package to location, where others can find it"
  },
  {
    "objectID": "07_packaging.html#pyproject.toml",
    "href": "07_packaging.html#pyproject.toml",
    "title": "Distributing your Python package",
    "section": "pyproject.toml",
    "text": "pyproject.toml\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"my_library\"\nversion = \"0.0.1\"\ndependencies = [\n    \"numpy\"\n]\n\nauthors = [\n  { name=\"First Last\", email=\"initials@dhigroup.com\" },\n]\ndescription = \"Useful library\"\nreadme = \"README.md\"\nrequires-python = \"&gt;=3.9\"\nclassifiers = [\n    \"Programming Language :: Python :: 3\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Development Status :: 2 - Pre-Alpha\",\n    \"Operating System :: OS Independent\",\n    \"Intended Audience :: Science/Research\",\n    \"Topic :: Scientific/Engineering\",\n]\n\n[project.optional-dependencies]\ndev = [\"pytest\", \"ruff\", \"mypy\", \"mkdocs\", \"mkdocstrings[python]\", \"mkdocs-material\"]\ntest= [\"pytest\"]\n\n[project.urls]\n\"Homepage\" = \"https://github.com/DHI/my_library\"\n\"Bug Tracker\" = \"https://github.com/DHI/my_library/issues\""
  },
  {
    "objectID": "07_packaging.html#versioning",
    "href": "07_packaging.html#versioning",
    "title": "Distributing your Python package",
    "section": "Versioning",
    "text": "Versioning\nVersioning your package is important for reproducibility and to avoid breaking changes.\n. . .\n\n\nSemantic versioning use three numbers {major}.{minor}.{patch}, e.g.¬†1.1.0\n\n\nA new major version indicates breaking changes\nA new minor version indicates new features, without breaking changes\nA new patch version indicates a small change, e.g.¬†a bug fix\nEach of the numbers can be higher than 9, e.g.¬†1.0.0 is more recent than 0.24.12"
  },
  {
    "objectID": "07_packaging.html#version-1.0",
    "href": "07_packaging.html#version-1.0",
    "title": "Distributing your Python package",
    "section": "Version 1.0",
    "text": "Version 1.0\n\n\nA version number of 1.0 indicates that the package is ready for production\nThe API is stable, and breaking changes will only be introduced in new major versions\nThe package is well tested, and the documentation is complete\nStart with version 0.1.0 and increase the version number as you add features"
  },
  {
    "objectID": "07_packaging.html#breaking-changes",
    "href": "07_packaging.html#breaking-changes",
    "title": "Distributing your Python package",
    "section": "Breaking changes",
    "text": "Breaking changes\nWhat is a breaking change?\n\n\nRemoving a function\nChanging the name of a function\nChanging the signature of a function (arguments, types, return value)\n\n\n. . .\nTry to avoid breaking changes, if possible, but if you do, increase the major version number!"
  },
  {
    "objectID": "07_packaging.html#installing-specific-versions",
    "href": "07_packaging.html#installing-specific-versions",
    "title": "Distributing your Python package",
    "section": "Installing specific versions",
    "text": "Installing specific versions\n\npip install my_library will install the latest version\npip install my_library==1.0.0 will install version 1.0.0\npip install my_library&gt;=1.0.0 will install version 1.0.0 or higher"
  },
  {
    "objectID": "07_packaging.html#pre-release-versions",
    "href": "07_packaging.html#pre-release-versions",
    "title": "Distributing your Python package",
    "section": "Pre-release versions",
    "text": "Pre-release versions\n\n\n\nVersions that are not ready for production\nIndicated by a suffix, e.g.¬†1.0.0rc1\nWill not be installed by default\nCan be installed with pip install my_library==1.0.0rc1\nListed on PyPI, but not on the search page"
  },
  {
    "objectID": "07_packaging.html#understanding-software-licenses",
    "href": "07_packaging.html#understanding-software-licenses",
    "title": "Distributing your Python package",
    "section": "Understanding Software Licenses",
    "text": "Understanding Software Licenses\n\nA software license is a legal agreement that grants users certain rights and imposes restrictions on the use, modification, and distribution of a software package.\nSpecifying a license for your Python package is crucial, as it determines how others can legally use and interact with your code.\nIf you don‚Äôt specify a license, your package is effectively ‚Äúall rights reserved,‚Äù making it legally unusable by others.\nCheck that your dependencies have a license!"
  },
  {
    "objectID": "07_packaging.html#common-open-source-license-types",
    "href": "07_packaging.html#common-open-source-license-types",
    "title": "Distributing your Python package",
    "section": "Common Open-Source License Types",
    "text": "Common Open-Source License Types\n\nMIT License: Highly permissive, allows commercial use, modification, and distribution with minimal restrictions.\nBSD-3 Clause License: Similar to MIT, but includes a clause prohibiting use of the name for endorsement.\nApache License 2.0: Includes a patent grant and is compatible with the GPL family of licenses.\nGNU GPL Family (GPL, LGPL, AGPL): Copyleft licenses that require derivative works to be open-source and distributed under the same terms.\n\nMany popular Python packages, such as scikit-learn, use licenses like BSD-3 or Apache 2.0."
  },
  {
    "objectID": "07_packaging.html#licenses-for-internal-packages",
    "href": "07_packaging.html#licenses-for-internal-packages",
    "title": "Distributing your Python package",
    "section": "Licenses for internal packages",
    "text": "Licenses for internal packages\n\nFor internal packages that will not be distributed outside your organization:\nYou can use a simple copyright notice instead of a full license\nExample copyright notice:\n\n# Copyright (c) [COMPANY NAME]\n# All rights reserved.\n\nThe copyright notice can be placed in the header of each Python file\nAvoids the need to maintain a separate license file"
  },
  {
    "objectID": "07_packaging.html#choosing-and-implementing-a-license",
    "href": "07_packaging.html#choosing-and-implementing-a-license",
    "title": "Distributing your Python package",
    "section": "Choosing and Implementing a License",
    "text": "Choosing and Implementing a License\n\nWhen using open-source dependencies in internal packages:\nCheck the licenses of your dependencies and ensure compatibility\nDocument the licenses of all third-party components in your project\nResources for learning more about licenses:\nchoosealicense.com\nOpen Source Initiative\nSoftware Licenses on wikipedia\n\nBy following these practices, you can effectively manage the licensing for both your internal and publicly distributed Python packages."
  },
  {
    "objectID": "07_packaging.html#dependencies",
    "href": "07_packaging.html#dependencies",
    "title": "Distributing your Python package",
    "section": "Dependencies",
    "text": "Dependencies\n\n\nApplication\nA program that is run by a user\n\ncommand line tool\nscript\nweb application\n\nPin versions to ensure reproducibility, e.g.¬†numpy==1.11.0\n\nLibrary\nA program that is used by another program\n\nPython package\nLow level library (C, Fortran, Rust, ‚Ä¶)\n\nMake the requirements as loose as possible, e.g.¬†numpy&gt;=1.11.0\n\n\n\nMake the requirements loose, to avoid conflicts with other packages."
  },
  {
    "objectID": "07_packaging.html#pyproject.toml-1",
    "href": "07_packaging.html#pyproject.toml-1",
    "title": "Distributing your Python package",
    "section": "pyproject.toml",
    "text": "pyproject.toml\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"my_library\"\nversion = \"0.0.1\"\ndependencies = [\n    \"numpy\"\n]\n\nauthors = [\n  { name=\"First Last\", email=\"initials@dhigroup.com\" },\n]\ndescription = \"Useful library\"\nreadme = \"README.md\"\nrequires-python = \"&gt;=3.12\"\nclassifiers = [\n    \"Programming Language :: Python :: 3\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Development Status :: 2 - Pre-Alpha\",\n    \"Operating System :: OS Independent\",\n    \"Intended Audience :: Science/Research\",\n    \"Topic :: Scientific/Engineering\",\n]\n\n[dependency-groups]\ndev = [\"pytest\", \"ruff\", \"mypy\", \"mkdocs\", \"mkdocstrings[python]\", \"mkdocs-material\"]\ntest= [\"pytest\"]\n\n[project.urls]\n\"Homepage\" = \"https://github.com/DHI/my_library\"\n\"Bug Tracker\" = \"https://github.com/DHI/my_library/issues\"\n\n\nMandatory dependencies are specified in the dependencies section.\nDevelopment dependencies are specified in the relevant dependency-groups sections."
  },
  {
    "objectID": "07_packaging.html#classifiers",
    "href": "07_packaging.html#classifiers",
    "title": "Distributing your Python package",
    "section": "Classifiers",
    "text": "Classifiers\nclassifiers = [\n    \"Programming Language :: Python :: 3\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Development Status :: 2 - Pre-Alpha\",\n    \"Operating System :: OS Independent\",\n    \"Intended Audience :: Science/Research\",\n    \"Topic :: Scientific/Engineering\",\n]\n\nClassifiers are used to categorize your package\nLess relevant for internal packages\nOperating system (Windows, Linux, MacOS)\nDevelopment status (Alpha, Beta, Production/Stable)"
  },
  {
    "objectID": "07_packaging.html#packaging-non-python-files",
    "href": "07_packaging.html#packaging-non-python-files",
    "title": "Distributing your Python package",
    "section": "Packaging non-Python files",
    "text": "Packaging non-Python files\n\nIncluding non-Python files can be useful for e.g.¬†machine learning models.\nIf you use hatchling, you can include non-Python files in your package.\nhatchling uses .gitignore to determine which files to include."
  },
  {
    "objectID": "07_packaging.html#github-secrets",
    "href": "07_packaging.html#github-secrets",
    "title": "Distributing your Python package",
    "section": "GitHub secrets",
    "text": "GitHub secrets\n\nStore sensitive information, e.g.¬†passwords, in your repository.\nSecrets are encrypted, and only visible to you and GitHub Actions.\nAdd secrets in the repository settings.\n\nTo use secrets as environment variables in GitHub Actions, add them to the env section of the workflow:\nenv:\n  USERNAME: ${{ secrets.USERNAME }}\n  PASSWORD: ${{ secrets.PASSWORD }}"
  },
  {
    "objectID": "07_packaging.html#github-actions",
    "href": "07_packaging.html#github-actions",
    "title": "Distributing your Python package",
    "section": "GitHub Actions",
    "text": "GitHub Actions\n\nModern publishing uses Trusted Publishers.\nAvoids managing secrets in the repository.\n\n\n\n.github/workflows/python_publish.yml\n\nname: Publish Python Package\non:\n  release:\n    types: [created]\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.13'\n    - name: Install dependencies\n      run: |\n        uv sync\n    - name: Build package\n      run: uv build\n    - name: Publish package distributions to PyPI\n      uses: pypa/gh-action-pypi-publish@release/v1"
  },
  {
    "objectID": "07_packaging.html#publishing-to-pypi-and-testpypi",
    "href": "07_packaging.html#publishing-to-pypi-and-testpypi",
    "title": "Distributing your Python package",
    "section": "Publishing to PyPI and TestPyPI",
    "text": "Publishing to PyPI and TestPyPI\n\nPyPI is the Python Package Index, where you can publish your package.\nTestPyPI is a test version of PyPI for trying out publish workflows.\nOnly publish to PyPI when you are ready to release a new version.\n\n. . .\nExample:\n\n\n.github/workflows/python_publish.yml\n\n    - name: Build package\n      run: python -m build\n    - name: Publish package distributions to PyPI\n      uses: pypa/gh-action-pypi-publish@release/v1\n      with:\n          repository-url: https://test.pypi.org/legacy/"
  },
  {
    "objectID": "07_packaging.html#private-pypi-server",
    "href": "07_packaging.html#private-pypi-server",
    "title": "Distributing your Python package",
    "section": "Private PyPI server",
    "text": "Private PyPI server\n\nPrivate packages can be be hosted on e.g.¬†Azure Arfifacts or Posit Package Manager.\nThese servers behaves like PyPI, and can be used with pip\nAccess policies can be used to control who can install packages.\n\n. . .\nExample:\n$ pip install --extra-index-url https://pkgs.dev.azure.com/dhigroup/_packaging/pond/pypi/simple/ sampling\nLooking in indexes: https://pypi.org/simple, https://pkgs.dev.azure.com/dhigroup/_packaging/pond/pypi/simple/\n...\nSuccessfully installed sampling-0.0.1"
  },
  {
    "objectID": "07_packaging.html#installing-a-development-version",
    "href": "07_packaging.html#installing-a-development-version",
    "title": "Distributing your Python package",
    "section": "Installing a development version",
    "text": "Installing a development version\n\nInstall latest dev version, e.g.¬†pip install https://github.com/DHI/mikeio/archive/main.zip\nInstall from fix-interp branch, e.g.¬†pip install https://github.com/DHI/mikeio/archive/fix-interp.zip"
  },
  {
    "objectID": "07_packaging.html#recap",
    "href": "07_packaging.html#recap",
    "title": "Distributing your Python package",
    "section": "Recap",
    "text": "Recap\n\nGit, Pull Requests, and code reviews üõù\nPython functions, classes, and modules üõù\nTesting and auto-formatting üõù\nDependencies and GitHub actions üõù\nObject oriented design in Python üõù\nDocumentation üõù\nDistributing your package üõù"
  },
  {
    "objectID": "07_packaging.html#git-pull-requests-and-code-reviews",
    "href": "07_packaging.html#git-pull-requests-and-code-reviews",
    "title": "Distributing your Python package",
    "section": "Git, Pull Requests, and code reviews",
    "text": "Git, Pull Requests, and code reviews"
  },
  {
    "objectID": "07_packaging.html#github-flow",
    "href": "07_packaging.html#github-flow",
    "title": "Distributing your Python package",
    "section": "Github flow",
    "text": "Github flow\n\n\nCreate a branch\nMake changes\nCreate a pull request\nReview\nMerge"
  },
  {
    "objectID": "07_packaging.html#github-best-practices",
    "href": "07_packaging.html#github-best-practices",
    "title": "Distributing your Python package",
    "section": "Github best practices",
    "text": "Github best practices\n\nCommit often\nUse descriptive commit messages\nKeep pull requests small and focused\nUse ‚Äúissues‚Äù to track work\nReview code regularly"
  },
  {
    "objectID": "07_packaging.html#python-functions-classes-and-modules",
    "href": "07_packaging.html#python-functions-classes-and-modules",
    "title": "Distributing your Python package",
    "section": "Python functions, classes, and modules",
    "text": "Python functions, classes, and modules"
  },
  {
    "objectID": "07_packaging.html#functions-as-black-boxes",
    "href": "07_packaging.html#functions-as-black-boxes",
    "title": "Distributing your Python package",
    "section": "Functions as black boxes",
    "text": "Functions as black boxes\n\n\n\n\n\nflowchart LR\n    A(Input A) --&gt; F[\"Black box\"]\n    B(Input B) --&gt;  F\n    F --&gt; O(Output)\n\n    style F fill:#000,color:#fff,stroke:#333,stroke-width:4px\n\n\n\n\n\n\n\nA function is a black box that takes some input and produces some output.\nThe input and output can be anything, including other functions.\nAs long as the input and output are the same, the function body can be modified."
  },
  {
    "objectID": "07_packaging.html#naming-conventions---general",
    "href": "07_packaging.html#naming-conventions---general",
    "title": "Distributing your Python package",
    "section": "Naming conventions - general",
    "text": "Naming conventions - general\n\nUse lowercase characters\nSeparate words with underscores\n\nmodel_name = \"NorthSeaModel\"\nn_epochs = 100\n\ndef my_function():\n    pass"
  },
  {
    "objectID": "07_packaging.html#constants",
    "href": "07_packaging.html#constants",
    "title": "Distributing your Python package",
    "section": "Constants",
    "text": "Constants\n\nUse all uppercase characters\n\nGRAVITY = 9.81\n\nAVOGADRO_CONSTANT = 6.02214076e23\n\nSECONDS_IN_A_DAY = 86400\n\nN_LEGS_PER_ANIMAL = {\n    \"human\": 2,\n    \"dog\": 4,\n    \"spider\": 8,\n}"
  },
  {
    "objectID": "07_packaging.html#classes",
    "href": "07_packaging.html#classes",
    "title": "Distributing your Python package",
    "section": "Classes",
    "text": "Classes\n\nUse CamelCase for the name of the class\nUse lowercase characters for the name of the methods\nSeparate words with underscores\n\nclass RandomClassifier:\n\n    def fit(self, X, y):\n        self.classes_ = np.unique(y)\n\n    def predict(self, X):\n        return np.random.choice(self.classes_, size=len(X))\n\n    def fit_predict(self, X, y):\n        self.fit(X, y)\n        return self.predict(X)"
  },
  {
    "objectID": "07_packaging.html#dataclasses",
    "href": "07_packaging.html#dataclasses",
    "title": "Distributing your Python package",
    "section": "Dataclasses",
    "text": "Dataclasses\nimport datetime\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass Interval:\n    start: date\n    end: date\n\n&gt;&gt;&gt; dr1 = Interval(start=datetime.date(2020, 1, 1), end=datetime.date(2020, 1, 31))\n&gt;&gt;&gt; dr1\nInterval(start=datetime.date(2020, 1, 1), end=datetime.date(2020, 1, 31))\n&gt;&gt;&gt; dr2 = Interval(start=datetime.date(2020, 1, 1), end=datetime.date(2020, 1, 31))\n&gt;&gt;&gt; dr1 == dr2\nTrue"
  },
  {
    "objectID": "07_packaging.html#types-abstraction-and-refactoring",
    "href": "07_packaging.html#types-abstraction-and-refactoring",
    "title": "Distributing your Python package",
    "section": "Types, abstraction, and refactoring",
    "text": "Types, abstraction, and refactoring"
  },
  {
    "objectID": "07_packaging.html#pythonic",
    "href": "07_packaging.html#pythonic",
    "title": "Distributing your Python package",
    "section": "Pythonic",
    "text": "Pythonic\nIf you want your code to be Pythonic, you have to be familiar with these types and their methods.\nDundermethods:\n\n__getitem__\n__setitem__\n__len__\n__contains__\n‚Ä¶\n\n\nclass JavaLikeToolbox:\n    \n    def getToolByName(self, name: str) -&gt; Tool:\n        for tool in self.tools:\n            if tool.name == name:\n                return tool\n\n    def numberOfTools(self) -&gt; int:\n        return len(self.tools)\n\n&gt;&gt;&gt; tb = JavaLikeToolbox([Hammer(), Screwdriver()])\n&gt;&gt;&gt; tb.getToolByName(\"hammer\")\nHammer()\n&gt;&gt;&gt; tb.numberOfTools()\n2\n\nclass Toolbox:\n\n    def __getitem__(self, name: str) -&gt; Tool:\n        return self._tools[name]\n    \n    def __len__(self) -&gt; int:\n        return len(self.tools)\n\n&gt;&gt;&gt; tb = Toolbox([Hammer(), Screwdriver()])\n&gt;&gt;&gt; tb[\"hammer\"]\nHammer()\n&gt;&gt;&gt; len(tb)\n2"
  },
  {
    "objectID": "07_packaging.html#duck-typing",
    "href": "07_packaging.html#duck-typing",
    "title": "Distributing your Python package",
    "section": "Duck typing",
    "text": "Duck typing\n\n‚ÄúIf it walks like a duck and quacks like a duck, it‚Äôs a duck‚Äù\nFrom the perspective of the caller, it doesn‚Äôt matter if it is a rubber duck or a real duck.\nThe type of the object is not important, as long as it has the right methods.\n\n\nAn example is a Scikit learn transformers\n\nfit\ntransform\nfit_transform\n\nIf you want to make a transformer compatible with sklearn, you have to implement these methods.\n\nclass MyTransformer:\n    def fit(self, X, y=None):\n        # do something\n        return self\n\n    def transform(self, X):\n        # do something\n        return X\n\n    def fit_transform(self, X, y=None):\n        return self.fit(X, y).transform(X)"
  },
  {
    "objectID": "07_packaging.html#testing-and-auto-formatting",
    "href": "07_packaging.html#testing-and-auto-formatting",
    "title": "Distributing your Python package",
    "section": "Testing and auto-formatting",
    "text": "Testing and auto-formatting"
  },
  {
    "objectID": "07_packaging.html#unit-testing",
    "href": "07_packaging.html#unit-testing",
    "title": "Distributing your Python package",
    "section": "Unit testing",
    "text": "Unit testing\n\n\n\n\n\n\nDefinition ‚ÄúUnit‚Äù\n\n\n\n\nA small, fundamental piece of code.\nExecuted in isolation with appropriate inputs.\n\n\n\n\nA function is typically considered a ‚Äúunit‚Äù\nLines of code within functions are smaller (can‚Äôt be isolated)\nClasses are considered bigger (but can be treated as units)"
  },
  {
    "objectID": "07_packaging.html#a-good-unit-test",
    "href": "07_packaging.html#a-good-unit-test",
    "title": "Distributing your Python package",
    "section": "A good unit test",
    "text": "A good unit test\n\nFully automated\nHas full control over all the pieces running (‚Äúfake‚Äù external dependencies)\nCan be run in any order\nRuns in memory (no DB or file access, for example)\nConsistently returns the same result (no random numbers)\nRuns fast\nTests a single logical concept in the system\nReadable\nMaintainable\nTrustworthy"
  },
  {
    "objectID": "07_packaging.html#thank-you",
    "href": "07_packaging.html#thank-you",
    "title": "Distributing your Python package",
    "section": "Thank you!",
    "text": "Thank you!"
  },
  {
    "objectID": "07_packaging_slides.html#packaging",
    "href": "07_packaging_slides.html#packaging",
    "title": "Distributing your Python package",
    "section": "Packaging",
    "text": "Packaging\nPackaging means creating a package that can be installed by pip.\nThere are many ways to create an installable package, and many ways to distribute it.\nWe will show how to create a package using hatchling, and how to distribute it on GitHub, PyPI and a private PyPI server."
  },
  {
    "objectID": "07_packaging_slides.html#benefits-of-packaging",
    "href": "07_packaging_slides.html#benefits-of-packaging",
    "title": "Distributing your Python package",
    "section": "Benefits of packaging",
    "text": "Benefits of packaging\n\nDistribute your package to others\nInstall your package with pip\nSpecify dependencies\nReproducibility\nSpecify version\nRelease vs.¬†development versions"
  },
  {
    "objectID": "07_packaging_slides.html#packaging-workflow",
    "href": "07_packaging_slides.html#packaging-workflow",
    "title": "Distributing your Python package",
    "section": "Packaging workflow",
    "text": "Packaging workflow\n\nCreate a pyproject.toml in the root folder of the project\nBuild a package (e.g.¬†myproject-0.1.0-py3-none-any.whl)\nUpload the package to location, where others can find it"
  },
  {
    "objectID": "07_packaging_slides.html#pyproject.toml",
    "href": "07_packaging_slides.html#pyproject.toml",
    "title": "Distributing your Python package",
    "section": "pyproject.toml",
    "text": "pyproject.toml\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"my_library\"\nversion = \"0.0.1\"\ndependencies = [\n    \"numpy\"\n]\n\nauthors = [\n  { name=\"First Last\", email=\"initials@dhigroup.com\" },\n]\ndescription = \"Useful library\"\nreadme = \"README.md\"\nrequires-python = \"&gt;=3.9\"\nclassifiers = [\n    \"Programming Language :: Python :: 3\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Development Status :: 2 - Pre-Alpha\",\n    \"Operating System :: OS Independent\",\n    \"Intended Audience :: Science/Research\",\n    \"Topic :: Scientific/Engineering\",\n]\n\n[project.optional-dependencies]\ndev = [\"pytest\", \"ruff\", \"mypy\", \"mkdocs\", \"mkdocstrings[python]\", \"mkdocs-material\"]\ntest= [\"pytest\"]\n\n[project.urls]\n\"Homepage\" = \"https://github.com/DHI/my_library\"\n\"Bug Tracker\" = \"https://github.com/DHI/my_library/issues\""
  },
  {
    "objectID": "07_packaging_slides.html#versioning",
    "href": "07_packaging_slides.html#versioning",
    "title": "Distributing your Python package",
    "section": "Versioning",
    "text": "Versioning\nVersioning your package is important for reproducibility and to avoid breaking changes.\n\n\n\nSemantic versioning use three numbers {major}.{minor}.{patch}, e.g.¬†1.1.0\n\nA new major version indicates breaking changes\nA new minor version indicates new features, without breaking changes\nA new patch version indicates a small change, e.g.¬†a bug fix\nEach of the numbers can be higher than 9, e.g.¬†1.0.0 is more recent than 0.24.12"
  },
  {
    "objectID": "07_packaging_slides.html#version-1.0",
    "href": "07_packaging_slides.html#version-1.0",
    "title": "Distributing your Python package",
    "section": "Version 1.0",
    "text": "Version 1.0\n\nA version number of 1.0 indicates that the package is ready for production\nThe API is stable, and breaking changes will only be introduced in new major versions\nThe package is well tested, and the documentation is complete\nStart with version 0.1.0 and increase the version number as you add features"
  },
  {
    "objectID": "07_packaging_slides.html#breaking-changes",
    "href": "07_packaging_slides.html#breaking-changes",
    "title": "Distributing your Python package",
    "section": "Breaking changes",
    "text": "Breaking changes\nWhat is a breaking change?\n\nRemoving a function\nChanging the name of a function\nChanging the signature of a function (arguments, types, return value)\n\n\nTry to avoid breaking changes, if possible, but if you do, increase the major version number!"
  },
  {
    "objectID": "07_packaging_slides.html#installing-specific-versions",
    "href": "07_packaging_slides.html#installing-specific-versions",
    "title": "Distributing your Python package",
    "section": "Installing specific versions",
    "text": "Installing specific versions\n\npip install my_library will install the latest version\npip install my_library==1.0.0 will install version 1.0.0\npip install my_library&gt;=1.0.0 will install version 1.0.0 or higher"
  },
  {
    "objectID": "07_packaging_slides.html#pre-release-versions",
    "href": "07_packaging_slides.html#pre-release-versions",
    "title": "Distributing your Python package",
    "section": "Pre-release versions",
    "text": "Pre-release versions\n\n\n\nVersions that are not ready for production\nIndicated by a suffix, e.g.¬†1.0.0rc1\nWill not be installed by default\nCan be installed with pip install my_library==1.0.0rc1\nListed on PyPI, but not on the search page"
  },
  {
    "objectID": "07_packaging_slides.html#understanding-software-licenses",
    "href": "07_packaging_slides.html#understanding-software-licenses",
    "title": "Distributing your Python package",
    "section": "Understanding Software Licenses",
    "text": "Understanding Software Licenses\n\nA software license is a legal agreement that grants users certain rights and imposes restrictions on the use, modification, and distribution of a software package.\nSpecifying a license for your Python package is crucial, as it determines how others can legally use and interact with your code.\nIf you don‚Äôt specify a license, your package is effectively ‚Äúall rights reserved,‚Äù making it legally unusable by others.\nCheck that your dependencies have a license!"
  },
  {
    "objectID": "07_packaging_slides.html#common-open-source-license-types",
    "href": "07_packaging_slides.html#common-open-source-license-types",
    "title": "Distributing your Python package",
    "section": "Common Open-Source License Types",
    "text": "Common Open-Source License Types\n\nMIT License: Highly permissive, allows commercial use, modification, and distribution with minimal restrictions.\nBSD-3 Clause License: Similar to MIT, but includes a clause prohibiting use of the name for endorsement.\nApache License 2.0: Includes a patent grant and is compatible with the GPL family of licenses.\nGNU GPL Family (GPL, LGPL, AGPL): Copyleft licenses that require derivative works to be open-source and distributed under the same terms.\n\nMany popular Python packages, such as scikit-learn, use licenses like BSD-3 or Apache 2.0."
  },
  {
    "objectID": "07_packaging_slides.html#licenses-for-internal-packages",
    "href": "07_packaging_slides.html#licenses-for-internal-packages",
    "title": "Distributing your Python package",
    "section": "Licenses for internal packages",
    "text": "Licenses for internal packages\n\nFor internal packages that will not be distributed outside your organization:\nYou can use a simple copyright notice instead of a full license\nExample copyright notice:\n\n# Copyright (c) [COMPANY NAME]\n# All rights reserved.\n\nThe copyright notice can be placed in the header of each Python file\nAvoids the need to maintain a separate license file"
  },
  {
    "objectID": "07_packaging_slides.html#choosing-and-implementing-a-license",
    "href": "07_packaging_slides.html#choosing-and-implementing-a-license",
    "title": "Distributing your Python package",
    "section": "Choosing and Implementing a License",
    "text": "Choosing and Implementing a License\n\nWhen using open-source dependencies in internal packages:\nCheck the licenses of your dependencies and ensure compatibility\nDocument the licenses of all third-party components in your project\nResources for learning more about licenses:\nchoosealicense.com\nOpen Source Initiative\nSoftware Licenses on wikipedia\n\nBy following these practices, you can effectively manage the licensing for both your internal and publicly distributed Python packages."
  },
  {
    "objectID": "07_packaging_slides.html#dependencies",
    "href": "07_packaging_slides.html#dependencies",
    "title": "Distributing your Python package",
    "section": "Dependencies",
    "text": "Dependencies\n\n\nApplication\nA program that is run by a user\n\ncommand line tool\nscript\nweb application\n\nPin versions to ensure reproducibility, e.g.¬†numpy==1.11.0\n\nLibrary\nA program that is used by another program\n\nPython package\nLow level library (C, Fortran, Rust, ‚Ä¶)\n\nMake the requirements as loose as possible, e.g.¬†numpy&gt;=1.11.0\n\n\nMake the requirements loose, to avoid conflicts with other packages."
  },
  {
    "objectID": "07_packaging_slides.html#pyproject.toml-1",
    "href": "07_packaging_slides.html#pyproject.toml-1",
    "title": "Distributing your Python package",
    "section": "pyproject.toml",
    "text": "pyproject.toml\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"my_library\"\nversion = \"0.0.1\"\ndependencies = [\n    \"numpy\"\n]\n\nauthors = [\n  { name=\"First Last\", email=\"initials@dhigroup.com\" },\n]\ndescription = \"Useful library\"\nreadme = \"README.md\"\nrequires-python = \"&gt;=3.12\"\nclassifiers = [\n    \"Programming Language :: Python :: 3\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Development Status :: 2 - Pre-Alpha\",\n    \"Operating System :: OS Independent\",\n    \"Intended Audience :: Science/Research\",\n    \"Topic :: Scientific/Engineering\",\n]\n\n[dependency-groups]\ndev = [\"pytest\", \"ruff\", \"mypy\", \"mkdocs\", \"mkdocstrings[python]\", \"mkdocs-material\"]\ntest= [\"pytest\"]\n\n[project.urls]\n\"Homepage\" = \"https://github.com/DHI/my_library\"\n\"Bug Tracker\" = \"https://github.com/DHI/my_library/issues\"\n\n\nMandatory dependencies are specified in the dependencies section.\nDevelopment dependencies are specified in the relevant dependency-groups sections."
  },
  {
    "objectID": "07_packaging_slides.html#classifiers",
    "href": "07_packaging_slides.html#classifiers",
    "title": "Distributing your Python package",
    "section": "Classifiers",
    "text": "Classifiers\nclassifiers = [\n    \"Programming Language :: Python :: 3\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Development Status :: 2 - Pre-Alpha\",\n    \"Operating System :: OS Independent\",\n    \"Intended Audience :: Science/Research\",\n    \"Topic :: Scientific/Engineering\",\n]\n\nClassifiers are used to categorize your package\nLess relevant for internal packages\nOperating system (Windows, Linux, MacOS)\nDevelopment status (Alpha, Beta, Production/Stable)"
  },
  {
    "objectID": "07_packaging_slides.html#packaging-non-python-files",
    "href": "07_packaging_slides.html#packaging-non-python-files",
    "title": "Distributing your Python package",
    "section": "Packaging non-Python files",
    "text": "Packaging non-Python files\n\nIncluding non-Python files can be useful for e.g.¬†machine learning models.\nIf you use hatchling, you can include non-Python files in your package.\nhatchling uses .gitignore to determine which files to include."
  },
  {
    "objectID": "07_packaging_slides.html#github-secrets",
    "href": "07_packaging_slides.html#github-secrets",
    "title": "Distributing your Python package",
    "section": "GitHub secrets",
    "text": "GitHub secrets\n\nStore sensitive information, e.g.¬†passwords, in your repository.\nSecrets are encrypted, and only visible to you and GitHub Actions.\nAdd secrets in the repository settings.\n\nTo use secrets as environment variables in GitHub Actions, add them to the env section of the workflow:\nenv:\n  USERNAME: ${{ secrets.USERNAME }}\n  PASSWORD: ${{ secrets.PASSWORD }}"
  },
  {
    "objectID": "07_packaging_slides.html#github-actions",
    "href": "07_packaging_slides.html#github-actions",
    "title": "Distributing your Python package",
    "section": "GitHub Actions",
    "text": "GitHub Actions\n\nModern publishing uses Trusted Publishers.\nAvoids managing secrets in the repository.\n\n\n\n.github/workflows/python_publish.yml\n\nname: Publish Python Package\non:\n  release:\n    types: [created]\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.13'\n    - name: Install dependencies\n      run: |\n        uv sync\n    - name: Build package\n      run: uv build\n    - name: Publish package distributions to PyPI\n      uses: pypa/gh-action-pypi-publish@release/v1"
  },
  {
    "objectID": "07_packaging_slides.html#publishing-to-pypi-and-testpypi",
    "href": "07_packaging_slides.html#publishing-to-pypi-and-testpypi",
    "title": "Distributing your Python package",
    "section": "Publishing to PyPI and TestPyPI",
    "text": "Publishing to PyPI and TestPyPI\n\nPyPI is the Python Package Index, where you can publish your package.\nTestPyPI is a test version of PyPI for trying out publish workflows.\nOnly publish to PyPI when you are ready to release a new version.\n\n\nExample:\n\n\n.github/workflows/python_publish.yml\n\n    - name: Build package\n      run: python -m build\n    - name: Publish package distributions to PyPI\n      uses: pypa/gh-action-pypi-publish@release/v1\n      with:\n          repository-url: https://test.pypi.org/legacy/"
  },
  {
    "objectID": "07_packaging_slides.html#private-pypi-server",
    "href": "07_packaging_slides.html#private-pypi-server",
    "title": "Distributing your Python package",
    "section": "Private PyPI server",
    "text": "Private PyPI server\n\nPrivate packages can be be hosted on e.g.¬†Azure Arfifacts or Posit Package Manager.\nThese servers behaves like PyPI, and can be used with pip\nAccess policies can be used to control who can install packages.\n\n\nExample:\n$ pip install --extra-index-url https://pkgs.dev.azure.com/dhigroup/_packaging/pond/pypi/simple/ sampling\nLooking in indexes: https://pypi.org/simple, https://pkgs.dev.azure.com/dhigroup/_packaging/pond/pypi/simple/\n...\nSuccessfully installed sampling-0.0.1"
  },
  {
    "objectID": "07_packaging_slides.html#installing-a-development-version",
    "href": "07_packaging_slides.html#installing-a-development-version",
    "title": "Distributing your Python package",
    "section": "Installing a development version",
    "text": "Installing a development version\n\nInstall latest dev version, e.g.¬†pip install https://github.com/DHI/mikeio/archive/main.zip\nInstall from fix-interp branch, e.g.¬†pip install https://github.com/DHI/mikeio/archive/fix-interp.zip"
  },
  {
    "objectID": "07_packaging_slides.html#recap",
    "href": "07_packaging_slides.html#recap",
    "title": "Distributing your Python package",
    "section": "Recap",
    "text": "Recap\n\nGit, Pull Requests, and code reviews üõù\nPython functions, classes, and modules üõù\nTesting and auto-formatting üõù\nDependencies and GitHub actions üõù\nObject oriented design in Python üõù\nDocumentation üõù\nDistributing your package üõù"
  },
  {
    "objectID": "07_packaging_slides.html#git-pull-requests-and-code-reviews",
    "href": "07_packaging_slides.html#git-pull-requests-and-code-reviews",
    "title": "Distributing your Python package",
    "section": "Git, Pull Requests, and code reviews",
    "text": "Git, Pull Requests, and code reviews"
  },
  {
    "objectID": "07_packaging_slides.html#github-flow",
    "href": "07_packaging_slides.html#github-flow",
    "title": "Distributing your Python package",
    "section": "Github flow",
    "text": "Github flow\n\n\nCreate a branch\nMake changes\nCreate a pull request\nReview\nMerge"
  },
  {
    "objectID": "07_packaging_slides.html#github-best-practices",
    "href": "07_packaging_slides.html#github-best-practices",
    "title": "Distributing your Python package",
    "section": "Github best practices",
    "text": "Github best practices\n\nCommit often\nUse descriptive commit messages\nKeep pull requests small and focused\nUse ‚Äúissues‚Äù to track work\nReview code regularly"
  },
  {
    "objectID": "07_packaging_slides.html#python-functions-classes-and-modules",
    "href": "07_packaging_slides.html#python-functions-classes-and-modules",
    "title": "Distributing your Python package",
    "section": "Python functions, classes, and modules",
    "text": "Python functions, classes, and modules"
  },
  {
    "objectID": "07_packaging_slides.html#functions-as-black-boxes",
    "href": "07_packaging_slides.html#functions-as-black-boxes",
    "title": "Distributing your Python package",
    "section": "Functions as black boxes",
    "text": "Functions as black boxes\n\n\n\n\n\nflowchart LR\n    A(Input A) --&gt; F[\"Black box\"]\n    B(Input B) --&gt;  F\n    F --&gt; O(Output)\n\n    style F fill:#000,color:#fff,stroke:#333,stroke-width:4px\n\n\n\n\n\n\n\nA function is a black box that takes some input and produces some output.\nThe input and output can be anything, including other functions.\nAs long as the input and output are the same, the function body can be modified."
  },
  {
    "objectID": "07_packaging_slides.html#naming-conventions---general",
    "href": "07_packaging_slides.html#naming-conventions---general",
    "title": "Distributing your Python package",
    "section": "Naming conventions - general",
    "text": "Naming conventions - general\n\nUse lowercase characters\nSeparate words with underscores\n\nmodel_name = \"NorthSeaModel\"\nn_epochs = 100\n\ndef my_function():\n    pass"
  },
  {
    "objectID": "07_packaging_slides.html#constants",
    "href": "07_packaging_slides.html#constants",
    "title": "Distributing your Python package",
    "section": "Constants",
    "text": "Constants\n\nUse all uppercase characters\n\nGRAVITY = 9.81\n\nAVOGADRO_CONSTANT = 6.02214076e23\n\nSECONDS_IN_A_DAY = 86400\n\nN_LEGS_PER_ANIMAL = {\n    \"human\": 2,\n    \"dog\": 4,\n    \"spider\": 8,\n}"
  },
  {
    "objectID": "07_packaging_slides.html#classes",
    "href": "07_packaging_slides.html#classes",
    "title": "Distributing your Python package",
    "section": "Classes",
    "text": "Classes\n\nUse CamelCase for the name of the class\nUse lowercase characters for the name of the methods\nSeparate words with underscores\n\nclass RandomClassifier:\n\n    def fit(self, X, y):\n        self.classes_ = np.unique(y)\n\n    def predict(self, X):\n        return np.random.choice(self.classes_, size=len(X))\n\n    def fit_predict(self, X, y):\n        self.fit(X, y)\n        return self.predict(X)"
  },
  {
    "objectID": "07_packaging_slides.html#dataclasses",
    "href": "07_packaging_slides.html#dataclasses",
    "title": "Distributing your Python package",
    "section": "Dataclasses",
    "text": "Dataclasses\nimport datetime\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass Interval:\n    start: date\n    end: date\n\n&gt;&gt;&gt; dr1 = Interval(start=datetime.date(2020, 1, 1), end=datetime.date(2020, 1, 31))\n&gt;&gt;&gt; dr1\nInterval(start=datetime.date(2020, 1, 1), end=datetime.date(2020, 1, 31))\n&gt;&gt;&gt; dr2 = Interval(start=datetime.date(2020, 1, 1), end=datetime.date(2020, 1, 31))\n&gt;&gt;&gt; dr1 == dr2\nTrue"
  },
  {
    "objectID": "07_packaging_slides.html#types-abstraction-and-refactoring",
    "href": "07_packaging_slides.html#types-abstraction-and-refactoring",
    "title": "Distributing your Python package",
    "section": "Types, abstraction, and refactoring",
    "text": "Types, abstraction, and refactoring"
  },
  {
    "objectID": "07_packaging_slides.html#pythonic",
    "href": "07_packaging_slides.html#pythonic",
    "title": "Distributing your Python package",
    "section": "Pythonic",
    "text": "Pythonic\nIf you want your code to be Pythonic, you have to be familiar with these types and their methods.\nDundermethods:\n\n__getitem__\n__setitem__\n__len__\n__contains__\n‚Ä¶"
  },
  {
    "objectID": "07_packaging_slides.html#duck-typing",
    "href": "07_packaging_slides.html#duck-typing",
    "title": "Distributing your Python package",
    "section": "Duck typing",
    "text": "Duck typing\n\n‚ÄúIf it walks like a duck and quacks like a duck, it‚Äôs a duck‚Äù\nFrom the perspective of the caller, it doesn‚Äôt matter if it is a rubber duck or a real duck.\nThe type of the object is not important, as long as it has the right methods."
  },
  {
    "objectID": "07_packaging_slides.html#testing-and-auto-formatting",
    "href": "07_packaging_slides.html#testing-and-auto-formatting",
    "title": "Distributing your Python package",
    "section": "Testing and auto-formatting",
    "text": "Testing and auto-formatting"
  },
  {
    "objectID": "07_packaging_slides.html#unit-testing",
    "href": "07_packaging_slides.html#unit-testing",
    "title": "Distributing your Python package",
    "section": "Unit testing",
    "text": "Unit testing\n\n\n\n\n\n\nDefinition ‚ÄúUnit‚Äù\n\n\n\nA small, fundamental piece of code.\nExecuted in isolation with appropriate inputs.\n\n\n\n\n\nA function is typically considered a ‚Äúunit‚Äù\nLines of code within functions are smaller (can‚Äôt be isolated)\nClasses are considered bigger (but can be treated as units)"
  },
  {
    "objectID": "07_packaging_slides.html#a-good-unit-test",
    "href": "07_packaging_slides.html#a-good-unit-test",
    "title": "Distributing your Python package",
    "section": "A good unit test",
    "text": "A good unit test\n\nFully automated\nHas full control over all the pieces running (‚Äúfake‚Äù external dependencies)\nCan be run in any order\nRuns in memory (no DB or file access, for example)\nConsistently returns the same result (no random numbers)\nRuns fast\nTests a single logical concept in the system\nReadable\nMaintainable\nTrustworthy"
  },
  {
    "objectID": "07_packaging_slides.html#thank-you",
    "href": "07_packaging_slides.html#thank-you",
    "title": "Distributing your Python package",
    "section": "Thank you!",
    "text": "Thank you!"
  },
  {
    "objectID": "projects/data_cleaning/02_Project_module.html",
    "href": "projects/data_cleaning/02_Project_module.html",
    "title": "Module 2: Modules and classes",
    "section": "",
    "text": "After last module, your script now uses functions clean_spikes, clean_outofrange, clean_flat, plot_timeseries and has a nice home on GitHub. In this module, you will improve the functions, move them to separate modules and then refactor your code to use classes. Finally, you will check that it all works by running a notebook.\n\nCreate new branch ‚Äúmodules-classes‚Äù (Make sure changes from last module have been merged, and that you start from the main branch)\n2.1 Function arguments\n\nAdd default arguments to the functions. Commit.\nMake sure that you only use positional arguments where there is only one argument. Use keyword arguments everywhere else. Commit.\nConsider modifying the cleaning functions if they modify the input (remember that inputs are passed as reference, not a copy), e.g.¬†\n\ndata_cleaned = data.copy()\n...\nreturn data_cleaned\n2.2 Modules\n\nMove cleaner functions into a separate module cleaning.py. Commit.\nMove the plotting function into a separate module plotting.py. Commit.\nRename clean_project_data_v4_final2.py to main.py and execute the cleaning and plotting.\n\nfrom cleaning import ...\nfrom plotting import ...\n\nCheck that it runs! Commit.\n\n2.3 Classes\n\nOrganize the cleaning functions into classes that all have the same structure (an init method and a clean method)\n\ne.g.¬†for SpikeCleaner\n\ncreate and init method: def __init__(self, max_jump):\nand a clean method: def clean(self, data):\n\nmodify main.py and check that it runs\n\ncleaners = [\n  SpikeCleaner(max_jump=10),\n  OutOfRangeCleaner(min_val=0, max_val=50),\n  FlatPeriodCleaner(flat_period=5),\n]\nfor cleaner in cleaners:\n  data = cleaner.clean(data)\n\ncommit\n\nDownload notebook_A.ipynb and csv file example_data1.csv and make sure it runs. (remove any remaining print statements)\n\nCreate pull request in GitHub and ‚Äúrequest review‚Äù from your reviewers\nGet feedback, Adjust code until approval, then merge (and delete branch)\n\nBack to course project overview"
  },
  {
    "objectID": "projects/data_cleaning/05_Project_module.html",
    "href": "projects/data_cleaning/05_Project_module.html",
    "title": "Module 5: Object-oriented design",
    "section": "",
    "text": "In this module you will benefit from the automatic testing that you have added in the last module. Let‚Äôs explore some other object-oriented designs for our code base‚Ä¶\n\nCreate new branch ‚Äúoop-dataclasses‚Äù (Make sure changes from last module have been merged, and that you start from the main branch)\n5.1 Type Hints\n\nAdd type hints to all functions and methods. Commit\n\n5.2 Data class\n\nMake all the cleaner classes dataclasses.\n\nfrom dataclasses import dataclass\n\n@dataclass\nclass SpikeCleaner:\n    ...\n\nremove the __init__ method (not needed anymore)\nCheck that the notebook still runs and that the classes indeed work as data classes (e.g.¬†have a string representation and support equality testing etc)\nCommit\n\n5.3 Module level function\n\nMake a private module function _print_stats() that prints the number of cleaned values\ncall the function from each of the clean methods (note: inheritance is not required to obtain common functionality)\n\n5.4 Composition or inheritance\n\nCreate a new cleaner class called CleanerWorkflow that takes a list of cleaners when constructed and has a clean method that run all the cleaners‚Äô clean methods.\n\nclass CleanerWorkflow:\n    def __init__(self, cleaners) -&gt; None:\n        self.cleaners = cleaners\n\n    def clean(self, data: pd.Series) -&gt; pd.Series:\n        data_cleaned = data.copy()\n        for cleaner in self.cleaners:\n        ...\n\nModify the notebook to use the CleanerWorkflow instead of looping over the cleaners\nConsider what type of validation you would want CleanerWorkflow to have? Is it better check validity up front or to just go ahead and handle problems afterwards?\nConsider whether it would be better to create a base class BaseCleaner - write down your considerations as a comment in the pull request, refer to specific lines of code\ne.g.¬†how would you handle e.g.¬†common plotting functionality in the cleaner classes?\nCreate pull request in GitHub and ‚Äúrequest review‚Äù from your reviewers\nGet feedback, Adjust code until approval, then merge (and delete branch)\n\n\nBack to course project overview"
  },
  {
    "objectID": "projects/data_cleaning/03_Project_module.html",
    "href": "projects/data_cleaning/03_Project_module.html",
    "title": "Module 3: Installable package and pytest",
    "section": "",
    "text": "In the last module, you introduced modules, classes and a new notebook in you repo. In this module, you will add tests to your code base. But first, you will make your package installable.\n\nCreate new branch ‚Äúpackage-test‚Äù (Make sure changes from last module have been merged, and that you start from the main branch)\n3.1 Installable package\n\nOrganize the files into folders and add an empty pyproject.toml. Call your package tscleaner.\n\nsubfolders: src/tscleaner, scripts, notebooks, tests\nmake an init-file __init__.py in the src/tscleaner folder with the following content:\n\n\nfrom .cleaning import SpikeCleaner, FlatPeriodCleaner, OutOfRangeCleaner\nfrom .plotting import plot_timeseries\nProject structure:\n‚îú‚îÄ‚îÄ notebooks/\n‚îú‚îÄ‚îÄ scripts/\n‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îî‚îÄ‚îÄ tscleaner/\n‚îÇ       ‚îî‚îÄ‚îÄ __init__.py\n‚îú‚îÄ‚îÄ tests/\n‚îî‚îÄ‚îÄ pyproject.toml\n\nedit the pyproject.toml in the root with the following content (change with your data):\n\n[project]\nname = \"tscleaner\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nauthors = [\n    { name = \"Mike Water\", email = \"xyz@dhigroup.com\" }\n]\nrequires-python = \"&gt;=3.13\"\ndependencies = [\n    \"matplotlib\",\n    \"numpy\",\n]\n\n[dependency-groups]\ndev = [\"pytest\", \"pytest-cov\"]\n\n[tool.pytest.ini_options]\npythonpath = [\"src\"]\n\nModify import statements in notebook_A and script main.py and make sure they run.\nModify the cleaner tools by raising exceptions for invalid inputs.\nMove the csv file to /tests/testdata and update notebook with relative path to the file\n\n3.2 Pytest\n\nWrite unit tests with pytest in the /tests folder. Create an empty __init__.py file in the folder. Create a file test_cleaning.py and create at least three tests that verify that the cleaning tools work as intended\nIf all your tests are failing, consider if you have given the right requirements in the pyproject.toml‚Ä¶\n[Optional] Consider to make a fixture that reads the csv file and you can read in all tests\nRun the tests from the commandline by writting &gt; uv run pytest in the project root (can you also run the tests from VSCode?)\nAssess the test coverage with &gt; uv run pytest --cov=tscleaner tests\n[Optional] Get coverage as html with &gt; uv run pytest --cov=tscleaner --cov-report html (check the index.html in the htmlcov subfolder afterwards)\n\nCreate pull request in GitHub and ‚Äúrequest review‚Äù from your reviewers\nGet feedback, Adjust code until approval, then merge (and delete branch)\n\nBack to course project overview"
  },
  {
    "objectID": "projects/data_cleaning/07_Project_module.html",
    "href": "projects/data_cleaning/07_Project_module.html",
    "title": "Module 7: Publishing",
    "section": "",
    "text": "Add license to the root folder (see https://choosealicense.com/)\nChange version number to 0.1.0\nMake a release in GitHub - click ‚ÄúDraft a new release‚Äù and add a tag (v0.1.0) and a release title (v0.1.0)\nUpdate version number to dev version 0.2.0dev0\nOptional: Build the package with ‚Äú&gt;python -m build‚Äù from the project root (install build first)\nOptional: Publish the package to the PyPI Test Server (requires setting up a PyPI account and two-factor authentication!)\n\nBack to course project overview"
  },
  {
    "objectID": "projects/data_cleaning/clean_project_data_v4_final2.html",
    "href": "projects/data_cleaning/clean_project_data_v4_final2.html",
    "title": "Python package development",
    "section": "",
    "text": "clean_project_data_v4_final2.py\n\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime, timedelta\nimport matplotlib.pyplot as plt\n\n# Create date range\ndate_rng = pd.date_range(start=\"1/1/2020\", end=\"1/31/2020\", freq=\"D\")\n\n# Sample time series data with DateTimeIndex\ndata1 = pd.Series([1, 2, -1, 4, 5, 20, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, \n                   21, 22, 24, 24, 24, 24, 24, 24, 29, 30, 31], index=date_rng)\ndata2 = pd.Series([5, 6, 200, 8, 9, 10, 11, 12, 300, 14, 15, 16, 17, 18, 19, 20, 21, 22, \n                   23, 24, 25, 26, 27, 27, 27, 30, 31, 32, 33, 34, 35], index=date_rng)\ndata3 = pd.Series([15, 16, 11, 18, 400, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, \n                   32, 33, 34, 35, 36, 37, 38, 39, 45, 45, 45, 45, 45, 45], index=date_rng)\n\n\n# Cleaning data1\nprint(\"\\nCleaning data1\")\ndata1_original = data1.copy()\n\n# Checking for jumps \nprint(\"Checking for jumps in data1\")\nmax_jump=10\nprev_value = data1.iloc[0]\nfor t, value in data1.items():\n    if abs(value - prev_value) &lt;= max_jump:\n        # \"Value ok\"\n        data1[t] = value\n        prev_value = value\n    else:\n        data1[t] = np.nan\n        print(\"Jump detected and value removed on\", t, \":\", value)\nprint(f\"Data removed: {data1_original[~data1_original.isin(data1)]}\")\n# print(\"Data1 after jump check:\", data1)\n\n# Checking for values in range \nmin_val = 0\nmax_val = 50\nfor t, value in data1.items():\n    # print(\"Checking value on\", t, \":\", value)\n    if min_val &lt;= value &lt;= max_val:\n        pass\n        # print(\"Value ok:\", value)\n    else:\n        data1[t] = np.nan\n        print(\"Value removed:\", value)\nprint(f\"Data removed: {data1_original[~data1_original.isin(data1)]}\")\n# print(\"Data1 after range check:\", data1)\n\n\n# Checking for flat periods \nprint(\"Checking for flat periods in data1\")\nflat_period = 5\ni = 0\nwhile i &lt; len(data1) - flat_period:\n    if len(set(data1[i: i + flat_period + 1])) == 1: \n        print(\"Removing flat period starting at index:\", i)\n        data1[i: i + flat_period + 1] = np.nan\n        i += flat_period\n    else:\n        i += 1\nprint(f\"Data removed: {data1_original[~data1_original.isin(data1)]}\")\n# print(\"Data1 after flat period check:\", data1)\n\n\n# Cleaning data2\nprint(\"\\nCleaning data2\")\ndata2_original = data2.copy()\n\n# Checking for jumps \nprint(\"Checking for jumps in data2\")\nmax_jump=10\nprev_value = data2.iloc[0]\nfor t, value in data2.items():\n    if abs(value - prev_value) &lt;= max_jump:\n        # \"Value ok\"\n        data2[t] = value\n        prev_value = value\n    else:\n        data2[t] = np.nan\n        print(\"Jump detected and value removed on\", t, \":\", value)\nprint(f\"Data removed: {data2_original[~data2_original.isin(data2)]}\")\n# print(\"data2 after jump check:\", data2)\n\n# Checking for values in range \nmin_val = 0\nmax_val = 50\nfor t, value in data2.items():\n    # print(\"Checking value on\", t, \":\", value)\n    if min_val &lt;= value &lt;= max_val:\n        pass\n        # print(\"Value ok:\", value)\n    else:\n        data2[t] = np.nan\n        print(\"Value removed:\", value)\nprint(f\"Data removed: {data2_original[~data2_original.isin(data2)]}\")\n# print(\"data2 after range check:\", data2)\n\n\n# Checking for flat periods \nprint(\"Checking for flat periods in data2\")\nflat_period = 5\ni = 0\nwhile i &lt; len(data2) - flat_period:\n    if len(set(data2[i: i + flat_period + 1])) == 1: \n        print(\"Removing flat period starting at index:\", i)\n        data2[i: i + flat_period + 1] = np.nan\n        i += flat_period\n    else:\n        i += 1\nprint(f\"Data removed: {data2_original[~data2_original.isin(data2)]}\")\n# print(\"data2 after flat period check:\", data2)\n\n# print(\"Final cleaned data2:\", data2)\n\n# Cleaning data3\nprint(\"\\nCleaning data3\")\ndata3_original = data3.copy()\n\n# Checking for jumps \nprint(\"Checking for jumps in data3\")\nmax_jump=10\nprev_value = data3.iloc[0]\nfor t, value in data3.items():\n    if abs(value - prev_value) &lt;= max_jump:\n        # \"Value ok\"\n        data3[t] = value\n        prev_value = value\n    else:\n        data3[t] = np.nan\n        print(\"Jump detected and value removed on\", t, \":\", value)\nprint(f\"Data removed: {data3_original[~data3_original.isin(data3)]}\")\n# print(\"data3 after jump check:\", data3)\n\n# Checking for values in range \nmin_val = 0\nmax_val = 50\nfor t, value in data3.items():\n    # print(\"Checking value on\", t, \":\", value)\n    if min_val &lt;= value &lt;= max_val:\n        pass\n        # print(\"Value ok:\", value)\n    else:\n        data3[t] = np.nan\n        print(\"Value removed:\", value)\nprint(f\"Data removed: {data3_original[~data3_original.isin(data3)]}\")\n# print(\"data3 after range check:\", data3)\n\n\n# Checking for flat periods \nprint(\"Checking for flat periods in data3\")\nflat_period = 5\ni = 0\nwhile i &lt; len(data3) - flat_period:\n    if len(set(data3[i: i + flat_period + 1])) == 1: \n        print(\"Removing flat period starting at index:\", i)\n        data3[i: i + flat_period + 1] = np.nan\n        i += flat_period\n    else:\n        i += 1\nprint(f\"Data removed: {data3_original[~data3_original.isin(data3)]}\")\n# print(\"data3 after flat period check:\", data3)\n\n# print(\"Final cleaned data3:\", data3)\n\n## plot data showing outliers as red dots\nplt.figure(figsize=(10, 5))\nplt.plot(data1_original, '.', color=\"red\")\nplt.plot(data1, '.', color=\"green\")\nplt.title(\"Data1\")\nplt.show()\n\nplt.figure(figsize=(10, 5))\nplt.plot(data2_original, '.', color=\"red\")\nplt.plot(data2, '.', color=\"green\")\nplt.title(\"Data2\")\nplt.show()\n\nplt.figure(figsize=(10, 5))\nplt.plot(data3_original, '.', color=\"red\")\nplt.plot(data3, '.', color=\"green\")\nplt.title(\"Data3\")\nplt.show()"
  },
  {
    "objectID": "02_function_classes_slides.html#functions-as-black-boxes",
    "href": "02_function_classes_slides.html#functions-as-black-boxes",
    "title": "Functions, classes and modules",
    "section": "Functions as black boxes",
    "text": "Functions as black boxes\n\n\n\n\n\nflowchart LR\n    A(Input A) --&gt; F[\"Black box\"]\n    B(Input B) --&gt;  F\n    F --&gt; O(Output)\n\n    style F fill:#000,color:#fff,stroke:#333,stroke-width:4px\n\n\n\n\n\n\n\nA function is a black box that takes some input and produces some output.\nThe input and output can be anything, including other functions.\nAs long as the input and output are the same, the function body can be modified."
  },
  {
    "objectID": "02_function_classes_slides.html#pure-functions",
    "href": "02_function_classes_slides.html#pure-functions",
    "title": "Functions, classes and modules",
    "section": "Pure functions",
    "text": "Pure functions\nA pure function returns the same output for the same input.\n\ndef f(x):\n    return x**2\n\n\n\nf(2)\n\n4\n\n\n\n\n\nf(2)\n\n4"
  },
  {
    "objectID": "02_function_classes_slides.html#side-effects",
    "href": "02_function_classes_slides.html#side-effects",
    "title": "Functions, classes and modules",
    "section": "Side effects",
    "text": "Side effects\nA function can have side effects (besides returning a value)\ndef f_with_side_effect(x):\n    with open(\"output.txt\", \"a\") as f:\n        f.write(str(x))\n    return x**2\n\nThe function has x as input, returns the square of x, but also appends x to a file. If you run the function a second time, the file will contain two lines."
  },
  {
    "objectID": "02_function_classes_slides.html#side-effects-1",
    "href": "02_function_classes_slides.html#side-effects-1",
    "title": "Functions, classes and modules",
    "section": "Side effects",
    "text": "Side effects\nPure functions without side effects are easier to reason about.\nBut sometimes side effects are necessary.\n\nWriting to a file\nWriting to a database\nPrinting to the screen\nCreating a plot"
  },
  {
    "objectID": "02_function_classes_slides.html#modifying-input-arguments",
    "href": "02_function_classes_slides.html#modifying-input-arguments",
    "title": "Functions, classes and modules",
    "section": "Modifying input arguments",
    "text": "Modifying input arguments\n\ndef difficult_function(values):\n    for i in range(len(values)):\n        values[i] = min(0, values[i]) # üòü\n    return values\n\n\n\nx = [1,2,-1]\ndifficult_function(x)\n\n[0, 0, -1]\n\n\n\n\n\nx\n\n[0, 0, -1]\n\n\n\nThis function modifies the input array, which might come as a surprise. The array is passed by reference, so the function can modify it."
  },
  {
    "objectID": "02_function_classes_slides.html#positional-arguments",
    "href": "02_function_classes_slides.html#positional-arguments",
    "title": "Functions, classes and modules",
    "section": "Positional arguments",
    "text": "Positional arguments\n\ndef f(x, y):\n    return x + y\n\nf(1, 2)\n\n3"
  },
  {
    "objectID": "02_function_classes_slides.html#keyword-arguments",
    "href": "02_function_classes_slides.html#keyword-arguments",
    "title": "Functions, classes and modules",
    "section": "Keyword arguments",
    "text": "Keyword arguments\n\ndef f(x, y):\n    return x + y\n\nf(x=1, y=2)\n\n3"
  },
  {
    "objectID": "02_function_classes_slides.html#positional-arguments-1",
    "href": "02_function_classes_slides.html#positional-arguments-1",
    "title": "Functions, classes and modules",
    "section": "Positional arguments",
    "text": "Positional arguments\n\n\nVersion 1\n\ndef is_operable(height, period):\n\n    return height &lt; 2.0 and period &lt; 6.0\n\nis_operable(1.0, 3.0)\n\nTrue\n\n\n\nVersion 2\n\ndef is_operable(period, height=0.0):\n    # dont forget, that arguments are swapped üëç\n    return height &lt; 2.0 and period &lt; 6.0\n\nis_operable(1.0, 3.0)\n\nFalse\n\n\nüòü\n\n\nThe order of the arguments is swapped, since we want to make height an optional argument (more on that later). This breaks existing code, since the order of the arguments is changed."
  },
  {
    "objectID": "02_function_classes_slides.html#keyword-only-arguments",
    "href": "02_function_classes_slides.html#keyword-only-arguments",
    "title": "Functions, classes and modules",
    "section": "Keyword-only arguments",
    "text": "Keyword-only arguments\n\ndef f(*, x, y):\n    return x + y\n\nf(1,2)\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[20], line 4\n      1 def f(*, x, y):\n      2     return x + y\n----&gt; 4 f(1,2)\n\nTypeError: f() takes 0 positional arguments but 2 were given"
  },
  {
    "objectID": "02_function_classes_slides.html#optionaldefault-arguments",
    "href": "02_function_classes_slides.html#optionaldefault-arguments",
    "title": "Functions, classes and modules",
    "section": "Optional(=default) arguments",
    "text": "Optional(=default) arguments\ndef f(x, n=2):\n    return x**n\n\nf(2)\nf(2, n=3)\n\nMakes it easy to use a function with many arguments."
  },
  {
    "objectID": "02_function_classes_slides.html#mutable-default-arguments",
    "href": "02_function_classes_slides.html#mutable-default-arguments",
    "title": "Functions, classes and modules",
    "section": "Mutable default arguments",
    "text": "Mutable default arguments\nPython‚Äôs default arguments are evaluated once when the function is defined, not each time the function is called.\n\ndef add_to_cart(x, cart=[]): # this line is evaluated only once üòÆ\n    cart.append(x)\n    return cart\n\n\n\nmy_cart = [2]\nadd_to_cart(1, cart=my_cart)\n\n[2, 1]\n\n\n\n\n\nadd_to_cart(1)\n\n[1]\n\n\n\n\n\nadd_to_cart(2)\n\n[1, 2]\n\n\n\nPython‚Äôs default arguments are evaluated once when the function is defined, not each time the function is called (unlike Ruby). This means that if you use a mutable default argument and mutate it, you will and have mutated that object for all future calls to the function as well."
  },
  {
    "objectID": "02_function_classes_slides.html#how-to-use-default-mutable-arguments",
    "href": "02_function_classes_slides.html#how-to-use-default-mutable-arguments",
    "title": "Functions, classes and modules",
    "section": "How to use default (mutable) arguments",
    "text": "How to use default (mutable) arguments\n\ndef add_to_cart_sane(x, cart=None):\n    if cart is None:\n        cart = [] # this line is evaluated each time the function is called\n    cart.append(x)\n    return cart\n\n\nadd_to_cart_sane(1)\n\n[1]\n\n\n\nadd_to_cart_sane(2)\n\n[2]"
  },
  {
    "objectID": "02_function_classes_slides.html#changing-return-types",
    "href": "02_function_classes_slides.html#changing-return-types",
    "title": "Functions, classes and modules",
    "section": "Changing return types",
    "text": "Changing return types\nSince Python is a dynamic language, the type of the returned variable is allowed to vary.\ndef foo(x):\n    if x &gt;=0:\n        return x\n    else:\n        return \"x is negative\"\n\nGeneral advice: Avoid multiple return types!"
  },
  {
    "objectID": "02_function_classes_slides.html#changing-return-types---truthy",
    "href": "02_function_classes_slides.html#changing-return-types---truthy",
    "title": "Functions, classes and modules",
    "section": "Changing return types - truthy",
    "text": "Changing return types - truthy\n\ndef is_operable(height, period):\n    if height &lt; 10:\n        return height &lt; 5.0 and period &gt; 4.0\n    else:\n        return \"No way!\"\n\n\n\nif is_operable(height=12.0, period=5.0):\n    print(\"Go ahead!\")\n\nGo ahead!\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\nIs this the result you expected?\n\n\n\n\n\nA non-empty string or a non-zero value is considered ‚Äútruthy‚Äù in Python!"
  },
  {
    "objectID": "02_function_classes_slides.html#type-hints",
    "href": "02_function_classes_slides.html#type-hints",
    "title": "Functions, classes and modules",
    "section": "Type hints",
    "text": "Type hints\nPython is a dynamically typed language, the type of a variable is determined at runtime.\n\nBut we can add type hints to help the reader (and the code editor).\ndef is_operable(height: float, period: float) -&gt; bool:\n    ..."
  },
  {
    "objectID": "02_function_classes_slides.html#classes",
    "href": "02_function_classes_slides.html#classes",
    "title": "Functions, classes and modules",
    "section": "Classes",
    "text": "Classes\n\nclass WeirdToolbox:\n    tools = [] # class variable ‚òπÔ∏è\n\nt1 = WeirdToolbox()\nt1.tools.append(\"hammer\")\nt1.tools\n\n['hammer']\n\n\n\n\nt2 = WeirdToolbox()\nt2.tools.append(\"screwdriver\")\nt2.tools\n\n['hammer', 'screwdriver']\n\n\n\nClass variables are rarely what you want, since they are shared between all instances of the class."
  },
  {
    "objectID": "02_function_classes_slides.html#classes-1",
    "href": "02_function_classes_slides.html#classes-1",
    "title": "Functions, classes and modules",
    "section": "Classes",
    "text": "Classes\n\nclass Toolbox:\n    def __init__(self):\n        self.tools = [] # instance variable üòÉ\n\nt1 = Toolbox()\nt1.tools.append(\"hammer\")\nt1.tools\n\n['hammer']\n\n\n\n\nt2 = Toolbox()\nt2.tools.append(\"screwdriver\")\nt2.tools\n\n['screwdriver']\n\n\n\nInstance variables are created when the instance is created, and are unique to each instance."
  },
  {
    "objectID": "02_function_classes_slides.html#static-methods",
    "href": "02_function_classes_slides.html#static-methods",
    "title": "Functions, classes and modules",
    "section": "Static methods",
    "text": "Static methods\n\nfrom datetime import date\n\nclass Interval:\n    def __init__(self, start:date, end:date):\n        self.start = start\n        self.end = end\n\ndr = Interval(date(2020, 1, 1), date(2020, 1, 31))\ndr.start\n\ndatetime.date(2020, 1, 1)\n\n\n\nHere is an example of useful class, but it is a bit cumbersome to create an instance."
  },
  {
    "objectID": "02_function_classes_slides.html#static-methods-1",
    "href": "02_function_classes_slides.html#static-methods-1",
    "title": "Functions, classes and modules",
    "section": "Static methods",
    "text": "Static methods\n\nfrom datetime import date\n\nclass Interval:\n    def __init__(self, start:date, end:date) -&gt; None:\n        self.start = start\n        self.end = end\n\n    @staticmethod\n    def from_string(date_string: str) -&gt; Interval:\n        start_str, end_str = date_string.split(\"|\")\n        start = date.fromisoformat(start_str)\n        end = date.fromisoformat(end_str)\n        return Interval(start, end)\n\ndr = Interval.from_string(\"2020-01-01|2020-01-31\")\ndr\n\n&lt;__main__.Interval at 0x7f50d82a38c0&gt;\n\n\n\nSince we commonly use ISO formatted dates separated by a pipe, we can add a static method to create an instance from a string. This makes it easier to create an instance."
  },
  {
    "objectID": "02_function_classes_slides.html#dataclasses",
    "href": "02_function_classes_slides.html#dataclasses",
    "title": "Functions, classes and modules",
    "section": "Dataclasses",
    "text": "Dataclasses\n\nfrom dataclasses import dataclass\n\n@dataclass\nclass Interval:\n    start: date\n    end: date\n\n    @staticmethod\n    def from_string(date_string):\n        start_str, end_str = date_string.split(\"|\")\n        start = date.fromisoformat(start_str)\n        end = date.fromisoformat(end_str)\n        return Interval(start, end)\n\ndr = Interval.from_string(\"2020-01-01|2020-01-31\")\ndr\n\nInterval(start=datetime.date(2020, 1, 1), end=datetime.date(2020, 1, 31))\n\n\n\nDataclasses were introduced in Python 3.7, they are a convenient way to create classes with a few attributes. The variables are instance variables, and the class has a constructor that takes the same arguments as the variables."
  },
  {
    "objectID": "02_function_classes_slides.html#equality",
    "href": "02_function_classes_slides.html#equality",
    "title": "Functions, classes and modules",
    "section": "Equality",
    "text": "Equality\nOn a regular class, equality is based on the memory address of the object.\n\nclass Interval:\n    def __init__(self, start:date, end:date) -&gt; None:\n        self.start = start\n        self.end = end\n\ndr1 = Interval(start=date(2020, 1, 1), end=date(2020, 1, 31))\ndr2 = Interval(start=date(2020, 1, 1), end=date(2020, 1, 31))\ndr1 == dr2\n\nFalse\n\n\n\nThis is not very useful, since we want to compare the values of the attributes."
  },
  {
    "objectID": "02_function_classes_slides.html#equality-1",
    "href": "02_function_classes_slides.html#equality-1",
    "title": "Functions, classes and modules",
    "section": "Equality",
    "text": "Equality\n\nclass Interval:\n    def __init__(self, start:date, end:date):\n        self.start = start\n        self.end = end\n\n    def __eq__(self, other):\n        return self.start == other.start and self.end == other.end\n\ndr1 = Interval(start=date(2020, 1, 1), end=date(2020, 1, 31))\ndr2 = Interval(start=date(2020, 1, 1), end=date(2020, 1, 31))\ndr1 == dr2\n\nTrue\n\n\n\nWe can override the __eq__ method to compare the values of the attributes."
  },
  {
    "objectID": "02_function_classes_slides.html#data-classes",
    "href": "02_function_classes_slides.html#data-classes",
    "title": "Functions, classes and modules",
    "section": "Data classes",
    "text": "Data classes\n\nfrom dataclasses import dataclass, field\n\n@dataclass\nclass Quantity:\n    unit: str = field(compare=True)\n    standard_name: str = field(compare=True)\n    name: str = field(compare=False, default=None)\n\n\nt1 = Quantity(name=\"temp\", unit=\"C\", standard_name=\"air_temperature\")\nt2 = Quantity(name=\"temperature\", unit=\"C\", standard_name=\"air_temperature\")\n\nt1 == t2\n\nTrue\n\n\n\nd1 = Quantity(unit=\"m\", standard_name=\"depth\")\nd1 == t2\n\nFalse"
  },
  {
    "objectID": "02_function_classes_slides.html#data-classes-1",
    "href": "02_function_classes_slides.html#data-classes-1",
    "title": "Functions, classes and modules",
    "section": "Data classes",
    "text": "Data classes\n\nCompact notation of fields with type hints\nEquality based on values of fields\nUseful string represenation by default\nIt is still a regular class"
  },
  {
    "objectID": "02_function_classes_slides.html#modules",
    "href": "02_function_classes_slides.html#modules",
    "title": "Functions, classes and modules",
    "section": "Modules",
    "text": "Modules\nModules are files containing Python code (functions, classes, constants) that belong together.\n$tree analytics/\nanalytics/\n‚îú‚îÄ‚îÄ __init__.py\n‚îú‚îÄ‚îÄ date.py\n‚îî‚îÄ‚îÄ tools.py\n\nThe analytics package contains two modules:\n\ntools module\ndate module"
  },
  {
    "objectID": "02_function_classes_slides.html#packages",
    "href": "02_function_classes_slides.html#packages",
    "title": "Functions, classes and modules",
    "section": "Packages",
    "text": "Packages\n\nA package is a directory containing modules\nEach package in Python is a directory which usually contains a special file called __init__.py\nThe __init__.py can be empty, and it indicates that the directory it contains is a Python package\n__init__.py can also execute initialization code"
  },
  {
    "objectID": "02_function_classes_slides.html#init__.py",
    "href": "02_function_classes_slides.html#init__.py",
    "title": "Functions, classes and modules",
    "section": "__init__.py",
    "text": "__init__.py\nExample: mikeio/pfs/__init__.py:\nfrom ._pfsdocument import PfsDocument\nfrom ._pfssection import PfsNonUniqueList, PfsSection\n\ndef read_pfs(filename:str, encoding:str=\"cp1252\", unique_keywords:bool=False) -&gt; PfsDocument:\n     \"\"\"Read a pfs file for further analysis/manipulation\"\"\"\n    \n    return PfsDocument(filename, encoding=encoding, unique_keywords=unique_keywords)\n\nThe imports in __init__.py let‚Äôs you create aliases.\n&gt;&gt;&gt; mikeio.pfs._pfssection.PfsSection\n&lt;class 'mikeio.pfs._pfssection.PfsSection'&gt;\n&gt;&gt;&gt; mikeio.pfs.PfsSection\n&lt;class 'mikeio.pfs._pfssection.PfsSection'&gt;\n&gt;&gt;&gt; mikeio.PfsSection\n&lt;class 'mikeio.pfs._pfssection.PfsSection'&gt;\n\nThe PfsSection and PfsDocument are imported from the _pfssection and _pfsdocument modules. to the mikeio namespace."
  },
  {
    "objectID": "02_function_classes_slides.html#python-naming-conventions",
    "href": "02_function_classes_slides.html#python-naming-conventions",
    "title": "Functions, classes and modules",
    "section": "Python naming conventions",
    "text": "Python naming conventions\nBy adhering to the naming conventions, your code will be easier to read for other Python developers.\n\nvariables, functions and methods: lowercase_with_underscores\nclasses: CamelCase\nconstants: UPPERCASE_WITH_UNDERSCORES"
  },
  {
    "objectID": "02_function_classes_slides.html#variables-function-and-method-names",
    "href": "02_function_classes_slides.html#variables-function-and-method-names",
    "title": "Functions, classes and modules",
    "section": "Variables, function and method names",
    "text": "Variables, function and method names\n\nUse lowercase characters\nSeparate words with underscores\n\n\nmodel_name = \"NorthSeaModel\"\nn_epochs = 100\n\ndef my_function():\n    pass"
  },
  {
    "objectID": "02_function_classes_slides.html#constants",
    "href": "02_function_classes_slides.html#constants",
    "title": "Functions, classes and modules",
    "section": "Constants",
    "text": "Constants\n\nUse all uppercase characters\n\nGRAVITY = 9.81\n\nAVOGADRO_CONSTANT = 6.02214076e23\n\nSECONDS_IN_A_DAY = 86400\n\nN_LEGS_PER_ANIMAL = {\n    \"human\": 2,\n    \"dog\": 4,\n    \"spider\": 8,\n}\n\nPython will not prevent you from changing the value of a constant, but it is a convention to use all uppercase characters for constants."
  },
  {
    "objectID": "02_function_classes_slides.html#classes-2",
    "href": "02_function_classes_slides.html#classes-2",
    "title": "Functions, classes and modules",
    "section": "Classes",
    "text": "Classes\n\nUse CamelCase for the name of the class\nUse lowercase characters for the name of the methods\nSeparate words with underscores\n\n\nclass RandomClassifier: # CamelCase ‚úÖ\n\n    def fit(self, X, y):\n        self.classes_ = np.unique(y)\n\n    def predict(self, X):\n        return np.random.choice(self.classes_, size=len(X))\n\n    def fit_predict(self, X, y): # lowercase ‚úÖ\n        self.fit(X, y)\n        return self.predict(X)"
  },
  {
    "objectID": "02_function_classes_slides.html#summary",
    "href": "02_function_classes_slides.html#summary",
    "title": "Functions, classes and modules",
    "section": "Summary",
    "text": "Summary\n\nFunctions as black boxes that take input and produces output.\nPositional vs keyword arguments arguments.\nPure functions are easier to reason about.\nAvoid mutable default arguments and modifying input.\nClasses are useful for grouping related functions and data.\nDataclasses can be very convenient.\nModule single Python file\nPackage collection of modules"
  },
  {
    "objectID": "02_function_classes.html",
    "href": "02_function_classes.html",
    "title": "Functions, classes and modules",
    "section": "",
    "text": "flowchart LR\n    A(Input A) --&gt; F[\"Black box\"]\n    B(Input B) --&gt;  F\n    F --&gt; O(Output)\n\n    style F fill:#000,color:#fff,stroke:#333,stroke-width:4px\n\n\n\n\n\n\n\n\nA function is a black box that takes some input and produces some output.\nThe input and output can be anything, including other functions.\nAs long as the input and output are the same, the function body can be modified.\n\n\n\n\n\n\n\n\nflowchart LR\n    A(height: 1.0) --&gt; F[is_operable]\n    B(period: 3.0) --&gt;  F\n    F --&gt; O(True)\n\n\n\n\n\n\n. . .\ndef is_operable(height, period):\n    return height &lt; 2.0 and period &lt; 6.0\n. . .\nThese two function behaves the same, but the implementation is different.\ndef is_operable(height, period):\n    model = load_fancy_ml_model()\n    return model.predict(height, period)"
  },
  {
    "objectID": "02_function_classes.html#functions-as-black-boxes",
    "href": "02_function_classes.html#functions-as-black-boxes",
    "title": "Functions, classes and modules",
    "section": "",
    "text": "flowchart LR\n    A(Input A) --&gt; F[\"Black box\"]\n    B(Input B) --&gt;  F\n    F --&gt; O(Output)\n\n    style F fill:#000,color:#fff,stroke:#333,stroke-width:4px\n\n\n\n\n\n\n\n\nA function is a black box that takes some input and produces some output.\nThe input and output can be anything, including other functions.\nAs long as the input and output are the same, the function body can be modified.\n\n\n\n\n\n\n\n\nflowchart LR\n    A(height: 1.0) --&gt; F[is_operable]\n    B(period: 3.0) --&gt;  F\n    F --&gt; O(True)\n\n\n\n\n\n\n. . .\ndef is_operable(height, period):\n    return height &lt; 2.0 and period &lt; 6.0\n. . .\nThese two function behaves the same, but the implementation is different.\ndef is_operable(height, period):\n    model = load_fancy_ml_model()\n    return model.predict(height, period)"
  },
  {
    "objectID": "02_function_classes.html#pure-functions",
    "href": "02_function_classes.html#pure-functions",
    "title": "Functions, classes and modules",
    "section": "Pure functions",
    "text": "Pure functions\nA pure function returns the same output for the same input.\n\ndef f(x):\n    return x**2\n\n. . .\n\nf(2)\n\n4\n\n\n. . .\n\nf(2)\n\n4\n\n\n\nA non-pure function can return different outputs for the same input.\n\nn = 0\n\ndef non_pure_function(x):\n    global n\n    n = n + 1\n    return x + n\n\n. . .\n\nnon_pure_function(2)\n\n3\n\n\n. . .\n\nnon_pure_function(2)\n\n4"
  },
  {
    "objectID": "02_function_classes.html#side-effects",
    "href": "02_function_classes.html#side-effects",
    "title": "Functions, classes and modules",
    "section": "Side effects",
    "text": "Side effects\nA function can have side effects (besides returning a value)\ndef f_with_side_effect(x):\n    with open(\"output.txt\", \"a\") as f:\n        f.write(str(x))\n    return x**2\n\nThe function has x as input, returns the square of x, but also appends x to a file. If you run the function a second time, the file will contain two lines."
  },
  {
    "objectID": "02_function_classes.html#side-effects-1",
    "href": "02_function_classes.html#side-effects-1",
    "title": "Functions, classes and modules",
    "section": "Side effects",
    "text": "Side effects\nPure functions without side effects are easier to reason about.\nBut sometimes side effects are necessary.\n\nWriting to a file\nWriting to a database\nPrinting to the screen\nCreating a plot"
  },
  {
    "objectID": "02_function_classes.html#modifying-input-arguments",
    "href": "02_function_classes.html#modifying-input-arguments",
    "title": "Functions, classes and modules",
    "section": "Modifying input arguments",
    "text": "Modifying input arguments\n\ndef difficult_function(values):\n    for i in range(len(values)):\n        values[i] = min(0, values[i]) # üòü\n    return values\n\n. . .\n\nx = [1,2,-1]\ndifficult_function(x)\n\n[0, 0, -1]\n\n\n. . .\n\nx\n\n[0, 0, -1]\n\n\n\nThis function modifies the input array, which might come as a surprise. The array is passed by reference, so the function can modify it.\n\n\nFunctions that doesn‚Äôt modify the input arguments are easier to use.\n\ndef easier_function(values):\n    l2 = list(values) # copyü§î\n    for i in range(len(l2)):\n        l2[i] = min(0, l2[i])\n    return l2\n\n. . .\n\nx = [1, 2, -1]\neasier_function(x)\n\n[0, 0, -1]\n\n\n. . .\n\nx\n\n[1, 2, -1]\n\n\n. . .\nJust be aware that copying large datasets can be slow.\n\nSwapping out the internals of the black box‚Ä¶\n\ndef easier_function(values):\n    return [min(0, v) for v in values]\n\n. . .\n\nx = [1, 2, -1]\neasier_function(x)\n\n[0, 0, -1]\n\n\n\nx\n\n[1, 2, -1]"
  },
  {
    "objectID": "02_function_classes.html#positional-arguments",
    "href": "02_function_classes.html#positional-arguments",
    "title": "Functions, classes and modules",
    "section": "Positional arguments",
    "text": "Positional arguments\n\ndef f(x, y):\n    return x + y\n\nf(1, 2)\n\n3"
  },
  {
    "objectID": "02_function_classes.html#keyword-arguments",
    "href": "02_function_classes.html#keyword-arguments",
    "title": "Functions, classes and modules",
    "section": "Keyword arguments",
    "text": "Keyword arguments\n\ndef f(x, y):\n    return x + y\n\nf(x=1, y=2)\n\n3"
  },
  {
    "objectID": "02_function_classes.html#positional-arguments-1",
    "href": "02_function_classes.html#positional-arguments-1",
    "title": "Functions, classes and modules",
    "section": "Positional arguments",
    "text": "Positional arguments\n\n\nVersion 1\n\ndef is_operable(height, period):\n\n    return height &lt; 2.0 and period &lt; 6.0\n\nis_operable(1.0, 3.0)\n\nTrue\n\n\n\nVersion 2\n\ndef is_operable(period, height=0.0):\n    # dont forget, that arguments are swapped üëç\n    return height &lt; 2.0 and period &lt; 6.0\n\nis_operable(1.0, 3.0)\n\nFalse\n\n\nüòü\n\n\n\nThe order of the arguments is swapped, since we want to make height an optional argument (more on that later). This breaks existing code, since the order of the arguments is changed."
  },
  {
    "objectID": "02_function_classes.html#keyword-only-arguments",
    "href": "02_function_classes.html#keyword-only-arguments",
    "title": "Functions, classes and modules",
    "section": "Keyword-only arguments",
    "text": "Keyword-only arguments\n\ndef f(*, x, y):\n    return x + y\n\nf(1,2)\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[20], line 4\n      1 def f(*, x, y):\n      2     return x + y\n----&gt; 4 f(1,2)\n\nTypeError: f() takes 0 positional arguments but 2 were given"
  },
  {
    "objectID": "02_function_classes.html#optionaldefault-arguments",
    "href": "02_function_classes.html#optionaldefault-arguments",
    "title": "Functions, classes and modules",
    "section": "Optional(=default) arguments",
    "text": "Optional(=default) arguments\ndef f(x, n=2):\n    return x**n\n\nf(2)\nf(2, n=3)\n. . .\nMakes it easy to use a function with many arguments."
  },
  {
    "objectID": "02_function_classes.html#mutable-default-arguments",
    "href": "02_function_classes.html#mutable-default-arguments",
    "title": "Functions, classes and modules",
    "section": "Mutable default arguments",
    "text": "Mutable default arguments\nPython‚Äôs default arguments are evaluated once when the function is defined, not each time the function is called.\n\ndef add_to_cart(x, cart=[]): # this line is evaluated only once üòÆ\n    cart.append(x)\n    return cart\n\n. . .\n\nmy_cart = [2]\nadd_to_cart(1, cart=my_cart)\n\n[2, 1]\n\n\n. . .\n\nadd_to_cart(1)\n\n[1]\n\n\n. . .\n\nadd_to_cart(2)\n\n[1, 2]\n\n\n\nPython‚Äôs default arguments are evaluated once when the function is defined, not each time the function is called (unlike Ruby). This means that if you use a mutable default argument and mutate it, you will and have mutated that object for all future calls to the function as well."
  },
  {
    "objectID": "02_function_classes.html#how-to-use-default-mutable-arguments",
    "href": "02_function_classes.html#how-to-use-default-mutable-arguments",
    "title": "Functions, classes and modules",
    "section": "How to use default (mutable) arguments",
    "text": "How to use default (mutable) arguments\n\ndef add_to_cart_sane(x, cart=None):\n    if cart is None:\n        cart = [] # this line is evaluated each time the function is called\n    cart.append(x)\n    return cart\n\n\nadd_to_cart_sane(1)\n\n[1]\n\n\n\nadd_to_cart_sane(2)\n\n[2]"
  },
  {
    "objectID": "02_function_classes.html#changing-return-types",
    "href": "02_function_classes.html#changing-return-types",
    "title": "Functions, classes and modules",
    "section": "Changing return types",
    "text": "Changing return types\nSince Python is a dynamic language, the type of the returned variable is allowed to vary.\ndef foo(x):\n    if x &gt;=0:\n        return x\n    else:\n        return \"x is negative\"\n. . .\nGeneral advice: Avoid multiple return types!"
  },
  {
    "objectID": "02_function_classes.html#changing-return-types---truthy",
    "href": "02_function_classes.html#changing-return-types---truthy",
    "title": "Functions, classes and modules",
    "section": "Changing return types - truthy",
    "text": "Changing return types - truthy\n\ndef is_operable(height, period):\n    if height &lt; 10:\n        return height &lt; 5.0 and period &gt; 4.0\n    else:\n        return \"No way!\"\n\n. . .\n\nif is_operable(height=12.0, period=5.0):\n    print(\"Go ahead!\")\n\nGo ahead!\n\n\n. . .\n\n\n\n\n\n\nImportant\n\n\n\nIs this the result you expected?\n\n\n. . .\nA non-empty string or a non-zero value is considered ‚Äútruthy‚Äù in Python!"
  },
  {
    "objectID": "02_function_classes.html#type-hints",
    "href": "02_function_classes.html#type-hints",
    "title": "Functions, classes and modules",
    "section": "Type hints",
    "text": "Type hints\nPython is a dynamically typed language, the type of a variable is determined at runtime.\n. . .\nBut we can add type hints to help the reader (and the code editor).\ndef is_operable(height: float, period: float) -&gt; bool:\n    ...\n\ndef clip(values:list[int], *, threshold:int = 0) -&gt; list[int]:\n    return [min(threshold, v) for v in values]\n. . .\n&gt;&gt;&gt; x= [-1, 0, 2]\n&gt;&gt;&gt; clip(x)\n[-1, 0, 0]\n&gt;&gt;&gt; x\n[-1, 0, 2]\n&gt;&gt;&gt; clip(x, threshold=1)\n[-1, 0, 1]\n\nType hints are just hints, it will make it easier for you to read the code, and use it in your IDE, but it will not enforce the type."
  },
  {
    "objectID": "02_function_classes.html#classes",
    "href": "02_function_classes.html#classes",
    "title": "Functions, classes and modules",
    "section": "Classes",
    "text": "Classes\n\nclass WeirdToolbox:\n    tools = [] # class variable ‚òπÔ∏è\n\nt1 = WeirdToolbox()\nt1.tools.append(\"hammer\")\nt1.tools\n\n['hammer']\n\n\n. . .\n\nt2 = WeirdToolbox()\nt2.tools.append(\"screwdriver\")\nt2.tools\n\n['hammer', 'screwdriver']\n\n\n\nClass variables are rarely what you want, since they are shared between all instances of the class."
  },
  {
    "objectID": "02_function_classes.html#classes-1",
    "href": "02_function_classes.html#classes-1",
    "title": "Functions, classes and modules",
    "section": "Classes",
    "text": "Classes\n\nclass Toolbox:\n    def __init__(self):\n        self.tools = [] # instance variable üòÉ\n\nt1 = Toolbox()\nt1.tools.append(\"hammer\")\nt1.tools\n\n['hammer']\n\n\n. . .\n\nt2 = Toolbox()\nt2.tools.append(\"screwdriver\")\nt2.tools\n\n['screwdriver']\n\n\n\nInstance variables are created when the instance is created, and are unique to each instance."
  },
  {
    "objectID": "02_function_classes.html#static-methods",
    "href": "02_function_classes.html#static-methods",
    "title": "Functions, classes and modules",
    "section": "Static methods",
    "text": "Static methods\n\nfrom datetime import date\n\nclass Interval:\n    def __init__(self, start:date, end:date):\n        self.start = start\n        self.end = end\n\ndr = Interval(date(2020, 1, 1), date(2020, 1, 31))\ndr.start\n\ndatetime.date(2020, 1, 1)\n\n\n\nHere is an example of useful class, but it is a bit cumbersome to create an instance."
  },
  {
    "objectID": "02_function_classes.html#static-methods-1",
    "href": "02_function_classes.html#static-methods-1",
    "title": "Functions, classes and modules",
    "section": "Static methods",
    "text": "Static methods\n\nfrom datetime import date\n\nclass Interval:\n    def __init__(self, start:date, end:date) -&gt; None:\n        self.start = start\n        self.end = end\n\n    @staticmethod\n    def from_string(date_string: str) -&gt; Interval:\n        start_str, end_str = date_string.split(\"|\")\n        start = date.fromisoformat(start_str)\n        end = date.fromisoformat(end_str)\n        return Interval(start, end)\n\ndr = Interval.from_string(\"2020-01-01|2020-01-31\")\ndr\n\n&lt;__main__.Interval at 0x7f9e54777b60&gt;\n\n\n\nSince we commonly use ISO formatted dates separated by a pipe, we can add a static method to create an instance from a string. This makes it easier to create an instance."
  },
  {
    "objectID": "02_function_classes.html#dataclasses",
    "href": "02_function_classes.html#dataclasses",
    "title": "Functions, classes and modules",
    "section": "Dataclasses",
    "text": "Dataclasses\n\nfrom dataclasses import dataclass\n\n@dataclass\nclass Interval:\n    start: date\n    end: date\n\n    @staticmethod\n    def from_string(date_string):\n        start_str, end_str = date_string.split(\"|\")\n        start = date.fromisoformat(start_str)\n        end = date.fromisoformat(end_str)\n        return Interval(start, end)\n\ndr = Interval.from_string(\"2020-01-01|2020-01-31\")\ndr\n\nInterval(start=datetime.date(2020, 1, 1), end=datetime.date(2020, 1, 31))\n\n\n\nDataclasses were introduced in Python 3.7, they are a convenient way to create classes with a few attributes. The variables are instance variables, and the class has a constructor that takes the same arguments as the variables.\n\n\n\n@dataclass\nclass Interval:\n    start: date\n    end: date\n\n    def __str__(self) -&gt; str:\n        return f\"{self.start} | {self.end}\"\n\ndr = Interval(start=date(2020, 1, 1), end=date(2020, 1, 31))\ndr # uses __repr__\n\nInterval(start=datetime.date(2020, 1, 1), end=datetime.date(2020, 1, 31))\n\n\n. . .\n\nprint(dr) # uses __str__\n\n2020-01-01 | 2020-01-31\n\n\n\nTo override the default string representation, we can add a __str__ method."
  },
  {
    "objectID": "02_function_classes.html#equality",
    "href": "02_function_classes.html#equality",
    "title": "Functions, classes and modules",
    "section": "Equality",
    "text": "Equality\nOn a regular class, equality is based on the memory address of the object.\n\nclass Interval:\n    def __init__(self, start:date, end:date) -&gt; None:\n        self.start = start\n        self.end = end\n\ndr1 = Interval(start=date(2020, 1, 1), end=date(2020, 1, 31))\ndr2 = Interval(start=date(2020, 1, 1), end=date(2020, 1, 31))\ndr1 == dr2\n\nFalse\n\n\n\nThis is not very useful, since we want to compare the values of the attributes."
  },
  {
    "objectID": "02_function_classes.html#equality-1",
    "href": "02_function_classes.html#equality-1",
    "title": "Functions, classes and modules",
    "section": "Equality",
    "text": "Equality\n\nclass Interval:\n    def __init__(self, start:date, end:date):\n        self.start = start\n        self.end = end\n\n    def __eq__(self, other):\n        return self.start == other.start and self.end == other.end\n\ndr1 = Interval(start=date(2020, 1, 1), end=date(2020, 1, 31))\ndr2 = Interval(start=date(2020, 1, 1), end=date(2020, 1, 31))\ndr1 == dr2\n\nTrue\n\n\n\nWe can override the __eq__ method to compare the values of the attributes.\n\n\nFor a dataclass, equality is based on the values of the fields.\n\nfrom dataclasses import dataclass\n\n@dataclass\nclass Interval:\n    start: date\n    end: date\n\ndr1 = Interval(start=date(2020, 1, 1), end=date(2020, 1, 31))\ndr2 = Interval(start=date(2020, 1, 1), end=date(2020, 1, 31))\ndr1 == dr2\n\nTrue\n\n\n\nThis is the default behavior for dataclasses."
  },
  {
    "objectID": "02_function_classes.html#data-classes",
    "href": "02_function_classes.html#data-classes",
    "title": "Functions, classes and modules",
    "section": "Data classes",
    "text": "Data classes\n\nfrom dataclasses import dataclass, field\n\n@dataclass\nclass Quantity:\n    unit: str = field(compare=True)\n    standard_name: str = field(compare=True)\n    name: str = field(compare=False, default=None)\n\n\nt1 = Quantity(name=\"temp\", unit=\"C\", standard_name=\"air_temperature\")\nt2 = Quantity(name=\"temperature\", unit=\"C\", standard_name=\"air_temperature\")\n\nt1 == t2\n\nTrue\n\n\n\nd1 = Quantity(unit=\"m\", standard_name=\"depth\")\nd1 == t2\n\nFalse"
  },
  {
    "objectID": "02_function_classes.html#data-classes-1",
    "href": "02_function_classes.html#data-classes-1",
    "title": "Functions, classes and modules",
    "section": "Data classes",
    "text": "Data classes\n\n\nCompact notation of fields with type hints\nEquality based on values of fields\nUseful string represenation by default\nIt is still a regular class"
  },
  {
    "objectID": "02_function_classes.html#modules",
    "href": "02_function_classes.html#modules",
    "title": "Functions, classes and modules",
    "section": "Modules",
    "text": "Modules\nModules are files containing Python code (functions, classes, constants) that belong together.\n$tree analytics/\nanalytics/\n‚îú‚îÄ‚îÄ __init__.py\n‚îú‚îÄ‚îÄ date.py\n‚îî‚îÄ‚îÄ tools.py\n. . .\nThe analytics package contains two modules:\n\ntools module\ndate module\n\n\nfrom analytics.tools import is_operable\nfrom analytics.tools import Toolbox, Tool\nfrom analytics.date import Interval\n\ntool = Tool(name=\"hammer\")\ndr = Interval(start=date(2020, 1, 1), end=date(2020, 1, 31))\nis_operable(height=1.8, period=1.0)"
  },
  {
    "objectID": "02_function_classes.html#packages",
    "href": "02_function_classes.html#packages",
    "title": "Functions, classes and modules",
    "section": "Packages",
    "text": "Packages\n\n\nA package is a directory containing modules\nEach package in Python is a directory which usually contains a special file called __init__.py\nThe __init__.py can be empty, and it indicates that the directory it contains is a Python package\n__init__.py can also execute initialization code"
  },
  {
    "objectID": "02_function_classes.html#init__.py",
    "href": "02_function_classes.html#init__.py",
    "title": "Functions, classes and modules",
    "section": "__init__.py",
    "text": "__init__.py\nExample: mikeio/pfs/__init__.py:\nfrom ._pfsdocument import PfsDocument\nfrom ._pfssection import PfsNonUniqueList, PfsSection\n\ndef read_pfs(filename:str, encoding:str=\"cp1252\", unique_keywords:bool=False) -&gt; PfsDocument:\n     \"\"\"Read a pfs file for further analysis/manipulation\"\"\"\n    \n    return PfsDocument(filename, encoding=encoding, unique_keywords=unique_keywords)\n. . .\nThe imports in __init__.py let‚Äôs you create aliases.\n&gt;&gt;&gt; mikeio.pfs._pfssection.PfsSection\n&lt;class 'mikeio.pfs._pfssection.PfsSection'&gt;\n&gt;&gt;&gt; mikeio.pfs.PfsSection\n&lt;class 'mikeio.pfs._pfssection.PfsSection'&gt;\n&gt;&gt;&gt; mikeio.PfsSection\n&lt;class 'mikeio.pfs._pfssection.PfsSection'&gt;\n\nThe PfsSection and PfsDocument are imported from the _pfssection and _pfsdocument modules. to the mikeio namespace."
  },
  {
    "objectID": "02_function_classes.html#python-naming-conventions",
    "href": "02_function_classes.html#python-naming-conventions",
    "title": "Functions, classes and modules",
    "section": "Python naming conventions",
    "text": "Python naming conventions\nBy adhering to the naming conventions, your code will be easier to read for other Python developers.\n\nvariables, functions and methods: lowercase_with_underscores\nclasses: CamelCase\nconstants: UPPERCASE_WITH_UNDERSCORES"
  },
  {
    "objectID": "02_function_classes.html#variables-function-and-method-names",
    "href": "02_function_classes.html#variables-function-and-method-names",
    "title": "Functions, classes and modules",
    "section": "Variables, function and method names",
    "text": "Variables, function and method names\n\nUse lowercase characters\nSeparate words with underscores\n\n. . .\nmodel_name = \"NorthSeaModel\"\nn_epochs = 100\n\ndef my_function():\n    pass"
  },
  {
    "objectID": "02_function_classes.html#constants",
    "href": "02_function_classes.html#constants",
    "title": "Functions, classes and modules",
    "section": "Constants",
    "text": "Constants\n\nUse all uppercase characters\n\nGRAVITY = 9.81\n\nAVOGADRO_CONSTANT = 6.02214076e23\n\nSECONDS_IN_A_DAY = 86400\n\nN_LEGS_PER_ANIMAL = {\n    \"human\": 2,\n    \"dog\": 4,\n    \"spider\": 8,\n}\n. . .\nPython will not prevent you from changing the value of a constant, but it is a convention to use all uppercase characters for constants."
  },
  {
    "objectID": "02_function_classes.html#classes-2",
    "href": "02_function_classes.html#classes-2",
    "title": "Functions, classes and modules",
    "section": "Classes",
    "text": "Classes\n\nUse CamelCase for the name of the class\nUse lowercase characters for the name of the methods\nSeparate words with underscores\n\n. . .\nclass RandomClassifier: # CamelCase ‚úÖ\n\n    def fit(self, X, y):\n        self.classes_ = np.unique(y)\n\n    def predict(self, X):\n        return np.random.choice(self.classes_, size=len(X))\n\n    def fit_predict(self, X, y): # lowercase ‚úÖ\n        self.fit(X, y)\n        return self.predict(X)"
  },
  {
    "objectID": "02_function_classes.html#summary",
    "href": "02_function_classes.html#summary",
    "title": "Functions, classes and modules",
    "section": "Summary",
    "text": "Summary\n\n\nFunctions as black boxes that take input and produces output.\nPositional vs keyword arguments arguments.\nPure functions are easier to reason about.\nAvoid mutable default arguments and modifying input.\nClasses are useful for grouping related functions and data.\nDataclasses can be very convenient.\nModule single Python file\nPackage collection of modules"
  },
  {
    "objectID": "projects/data_cleaning/04_Project_module.html",
    "href": "projects/data_cleaning/04_Project_module.html",
    "title": "Module 4: GitHub actions and auto-formatting",
    "section": "",
    "text": "Your package is now installable and testable. In this module, you will make the tests automatic in GitHub and make sure that your code style adhere to the standards in PEP-8.\nIn this module, we will use some files from the python library template. When you, after this course, need to create a new package, you can simply start from this template when creating the repo.\n\nCreate new branch ‚Äúaction-formatting‚Äù (Make sure changes from last module have been merged, and that you start from the main branch)\n4.1 Github Action\n\nCopy the GitHub action file full_test.yml (in the .github/workflows folder) from the python template https://github.com/DHI/template-python-library to your own library (make sure it sits in the same folder).\nChange all occurrences of ‚Äúmy_library‚Äù in the yml file to your package name ‚Äútscleaner‚Äù\nComment out the line with ‚Äúruff-action‚Äù with ‚Äú#‚Äù\nCommit, push and create a pull request; the tests should now run, verify that they all run before you move on\n\n4.2 Linting with ruff\n\nEnable the ‚Äúruff-action‚Äù be removing the ‚Äú#‚Äù you added above\nCommit and push; your actions will probably fail now - inspect the problems by clicking the red cross (did you also get an email?)\nInstall ‚Äúruff‚Äù on your local machine with mamba/conda/pip\nNavigate to your project root folder and run ruff with ‚Äúruff check‚Äù\nAdd the following line to your __init__.py file __all__ = [\"SpikeCleaner\", \"FlatPeriodCleaner\", \"OutOfRangeCleaner\", \"plot_timeseries\"]\nfix remaining issues until ruff passes\nCommit, push and verify that you action now succeeds\n\n4.3 Formatting with ruff\n\nRun ‚Äúruff format‚Äù from your project root folder; inspect the differences; commit\n\n4.4 pyproject.toml\n\nCopy the pyproject.toml from the python template https://github.com/DHI/template-python-library (this file should replace your setup.py)\nModify the file contentes to fit your package\nRemove the setup.py file\nCommit, push and verify that the GitHub action runs\nIf it fails, you probably forgot some dependencies - go back and fix\n[Optional] You should also re-install your local package with &gt;pip install --upgrade -e .\n\n4.5 [Optional] Enable ruff extensions in VSCode; set ruff format to run on save\nCreate pull request in GitHub and ‚Äúrequest review‚Äù from your reviewers\nGet feedback, Adjust code until approval, then merge (and delete branch)\n\nBack to course project overview"
  },
  {
    "objectID": "projects/data_cleaning/index.html",
    "href": "projects/data_cleaning/index.html",
    "title": "Course project: Time Series Data Cleaning",
    "section": "",
    "text": "Imagine this: you‚Äôre given a script by a colleague and your task is to make usable for others in your organization; to make a proper package with a good structure, tests and documentation. And with a design that will make it easy to extend and maintain in the future.\nIn this project, the script removes bad data from three different time series using three different algorithms: out-of-range, spikes, and flat-periods. Your colleague is not the best Python coder, so you will start by cleaning up the code, using functions and gradually from there improve the quality.\n\n\n\n1.1 GitHub repo\n1.2 Functions\n\n\n\n\n\n2.1 Function arguments\n2.2 Modules\n2.3 Classes\n\n\n\n\n\n3.1 Installable package\n3.2 pytest\n\n\n\n\n\n4.1 GitHub Action\n4.2 Linting with ruff\n4.3 Formatting with ruff\n4.4 pyproject.toml\n\n\n\n\n\n5.1 Type Hints\n5.2 Data class\n5.3 Module level function\n5.4 Composition or inheritance\n\n\n\n\n\n6.1 README\n6.2 Docstrings\n6.3 Documentation site\n\n\n\n\n\n7.1 License\n7.2 Publishing"
  },
  {
    "objectID": "projects/data_cleaning/index.html#module-1-github-and-basic-functions",
    "href": "projects/data_cleaning/index.html#module-1-github-and-basic-functions",
    "title": "Course project: Time Series Data Cleaning",
    "section": "",
    "text": "1.1 GitHub repo\n1.2 Functions"
  },
  {
    "objectID": "projects/data_cleaning/index.html#module-2-modules-and-classes",
    "href": "projects/data_cleaning/index.html#module-2-modules-and-classes",
    "title": "Course project: Time Series Data Cleaning",
    "section": "",
    "text": "2.1 Function arguments\n2.2 Modules\n2.3 Classes"
  },
  {
    "objectID": "projects/data_cleaning/index.html#module-3-installable-package-and-pytest",
    "href": "projects/data_cleaning/index.html#module-3-installable-package-and-pytest",
    "title": "Course project: Time Series Data Cleaning",
    "section": "",
    "text": "3.1 Installable package\n3.2 pytest"
  },
  {
    "objectID": "projects/data_cleaning/index.html#module-4-github-actions-and-auto-formatting",
    "href": "projects/data_cleaning/index.html#module-4-github-actions-and-auto-formatting",
    "title": "Course project: Time Series Data Cleaning",
    "section": "",
    "text": "4.1 GitHub Action\n4.2 Linting with ruff\n4.3 Formatting with ruff\n4.4 pyproject.toml"
  },
  {
    "objectID": "projects/data_cleaning/index.html#module-5-object-oriented-design",
    "href": "projects/data_cleaning/index.html#module-5-object-oriented-design",
    "title": "Course project: Time Series Data Cleaning",
    "section": "",
    "text": "5.1 Type Hints\n5.2 Data class\n5.3 Module level function\n5.4 Composition or inheritance"
  },
  {
    "objectID": "projects/data_cleaning/index.html#module-6-documentation",
    "href": "projects/data_cleaning/index.html#module-6-documentation",
    "title": "Course project: Time Series Data Cleaning",
    "section": "",
    "text": "6.1 README\n6.2 Docstrings\n6.3 Documentation site"
  },
  {
    "objectID": "projects/data_cleaning/index.html#module-7-publishing",
    "href": "projects/data_cleaning/index.html#module-7-publishing",
    "title": "Course project: Time Series Data Cleaning",
    "section": "",
    "text": "7.1 License\n7.2 Publishing"
  },
  {
    "objectID": "projects/data_cleaning/01_Project_module.html",
    "href": "projects/data_cleaning/01_Project_module.html",
    "title": "Module 1: GitHub and basic functions",
    "section": "",
    "text": "Let‚Äôs get started on the project! You have received the script clean_project_data_v4_final2.py from a colleague and in this module you will create a GitHub repository, add the script and improve the script by using functions.\n\n1.1 GitHub repo\n\nCreate a new GitHub repository ‚Äútimeseriescleaner‚Äù on your own GitHub profile (not on your organization‚Äôs GitHub)\n\nMake it private, no template, add readme, gitignore python, no license\n\nGo to repo settings/Collaborators add your instructors and your ‚Äúbuddy‚Äù\nClone repo to local machine\nCreate a virtual environment for this course project (use uv venv)\nDownload the provided Python script and add it to the repo\nCommit the file and push the changes (Check that the file can be found on GitHub)\nOpen the project in vscode and make a single character change to the file (add a comment)\nCommit and push the changes (Check that you can find it on GitHub)\n\n1.2 Functions\n\nCreate a local branch ‚Äúrefactor-functions‚Äù\nRefactor the code to use functions (clean_spikes, clean_outofrange, clean_flat, plot_timeseries)\nYou should be able to run the cleaning using this loop:\n\n\nfor data in [data1, data2, data3]:\n  data_original = data.copy()\n  data = clean_spikes(data, max_jump=10)\n  data = clean_outofrange(data, min_val=0, max_val=50)\n  data = clean_flat(data, flat_period=5)\n  plot_timeseries(data_original, data)\n\nCheck that your code runs and produce the same results as before (you should not change the functionality when refactoring!)\nCommit your code in one or more commits (in the end, your code should be approximately 75 lines long)\n\nCreate a pull request in GitHub and ‚Äúrequest review‚Äù from your reviewers\nWait for feedback, Adjust code until approval, then merge (and delete branch)\n\nBack to course project overview"
  },
  {
    "objectID": "projects/data_cleaning/notebook_A.html",
    "href": "projects/data_cleaning/notebook_A.html",
    "title": "Clean data from a file",
    "section": "",
    "text": "# useful if your change your modules after starting the kernel\n%load_ext autoreload\n%autoreload 2\nimport pandas as pd\nfrom cleaning import SpikeCleaner, OutOfRangeCleaner, FlatPeriodCleaner\nfrom plotting import plot_timeseries\nfn = \"./example_data1.csv\"\ndf = pd.read_csv(fn, index_col=0, parse_dates=True, dtype=float)\ndf.head(10)\n\n\n\n\n\n\n\n\nseries1\n\n\n\n\n2020-01-01\n1.0\n\n\n2020-01-02\n2.0\n\n\n2020-01-03\n-1.0\n\n\n2020-01-04\n4.0\n\n\n2020-01-05\n5.0\n\n\n2020-01-06\n20.0\n\n\n2020-01-07\n7.0\n\n\n2020-01-08\n8.0\n\n\n2020-01-09\n9.0\n\n\n2020-01-10\n10.0"
  },
  {
    "objectID": "projects/data_cleaning/notebook_A.html#try-out-one-cleaner-first",
    "href": "projects/data_cleaning/notebook_A.html#try-out-one-cleaner-first",
    "title": "Clean data from a file",
    "section": "Try out one cleaner first",
    "text": "Try out one cleaner first\n\ncleaner = SpikeCleaner(max_jump=10)\n\n\ndf[\"clean1\"] = cleaner.clean(df.series1)\n\n\ndf.head(10)\n\n\n\n\n\n\n\n\nseries1\nclean1\n\n\n\n\n2020-01-01\n1.0\n1.0\n\n\n2020-01-02\n2.0\n2.0\n\n\n2020-01-03\n-1.0\n-1.0\n\n\n2020-01-04\n4.0\n4.0\n\n\n2020-01-05\n5.0\n5.0\n\n\n2020-01-06\n20.0\nNaN\n\n\n2020-01-07\n7.0\n7.0\n\n\n2020-01-08\n8.0\n8.0\n\n\n2020-01-09\n9.0\n9.0\n\n\n2020-01-10\n10.0\n10.0\n\n\n\n\n\n\n\n\nplot_timeseries(df.series1, df.clean1)"
  },
  {
    "objectID": "projects/data_cleaning/notebook_A.html#apply-all-cleaners",
    "href": "projects/data_cleaning/notebook_A.html#apply-all-cleaners",
    "title": "Clean data from a file",
    "section": "Apply all cleaners",
    "text": "Apply all cleaners\n\ncleaners = [\n    SpikeCleaner(max_jump=10),\n    OutOfRangeCleaner(min_val=0, max_val=50),\n    FlatPeriodCleaner(flat_period=5),\n]\n\n\ncleaned_data = df.series1.copy()\nfor cleaner in cleaners:\n     cleaned_data = cleaner.clean(cleaned_data)\n     # plot_timeseries(df.series1, cleaned_data) # check for each step if something is not working\nplot_timeseries(df.series1, cleaned_data)"
  },
  {
    "objectID": "projects/data_cleaning/06_Project_module.html",
    "href": "projects/data_cleaning/06_Project_module.html",
    "title": "Module 6: Documentation",
    "section": "",
    "text": "Before, we share our code with others we should document it. This can be done in many ways, with docstrings (visable from the IDE), README file, notebooks, tests and a proper documentation site.\n\nCreate new branch ‚Äúdocs‚Äù (Make sure changes from last module have been merged, and that you start from the main branch)\n6.1 README\n\nWrite a README file with basic information about the project.\n\n6.2 Docstrings\n\nWrite NumPy style docstrings for all functions and classes (google it!)\n[Optional] Install the autodocstrings extension in VSCode (set the style to NumPy), which helps you write docstrings fast by just writing three double quotes.\n\n6.3 mkdocs\n\nInstall mkdocs, mkdocstrings and material design mamba/pip install mkdocstrings-python mkdocs-material\nCreate a mkdocs.yml file in the project root (copy from https://github.com/DHI/template-python-library and adapt).\nCreate a docs folder and create a markdown file index.md inside.\nThe index file can contain text in the markdown format and auto-generated documentation using the syntax:\n\n::: tscleaner.SpikeCleaner\n\nCreate API documentation locally using the command &gt;mkdocs serve (which starts a local http server).\nCheck the generated HTML documentation.\nThe local documentation instance will ‚Äúlisten‚Äù to changes, try to modify the index.md file and watch.\n\nCreate pull request in GitHub and ‚Äúrequest review‚Äù from your reviewers\nGet feedback, Adjust code until approval, then merge (and delete branch)\n\nBack to course project overview"
  },
  {
    "objectID": "group_work/03_module.html",
    "href": "group_work/03_module.html",
    "title": "Python package development",
    "section": "",
    "text": "Q1: In your course project homework from last module, you implemented modules and classes, how did it go? Any reflections?\n\nQ2: What tests would you like to add to your project?\nQ3: What are the advantages / disadvantages of automated versus manual testing?\nQ4: Things can go wrong when executing your code, how should you handle that? Check inputs? try-except statements? What are pros and cons between different approaches?\n\nBack to overview"
  },
  {
    "objectID": "group_work/03_module.html#module-3",
    "href": "group_work/03_module.html#module-3",
    "title": "Python package development",
    "section": "",
    "text": "Q1: In your course project homework from last module, you implemented modules and classes, how did it go? Any reflections?\n\nQ2: What tests would you like to add to your project?\nQ3: What are the advantages / disadvantages of automated versus manual testing?\nQ4: Things can go wrong when executing your code, how should you handle that? Check inputs? try-except statements? What are pros and cons between different approaches?\n\nBack to overview"
  },
  {
    "objectID": "group_work/index.html",
    "href": "group_work/index.html",
    "title": "On-line Group Discussion",
    "section": "",
    "text": "On-line Group Discussion\nRelated to the time series cleaning project.\n\nModule 1\nModule 2\nModule 3\nModule 4\nModule 5\nModule 6\nModule 7"
  },
  {
    "objectID": "group_work/02_module.html",
    "href": "group_work/02_module.html",
    "title": "Python package development",
    "section": "",
    "text": "Q1: In your course project homework, you refactored the script to use functions. How did it go?\nQ2: Classes. If you should introduce classes to improve the code, which classes should it be and why?\nQ3: [Optional] What are some problems with poorly designed code (based on your own experience or from the book)?\n\nBack to overview"
  },
  {
    "objectID": "group_work/02_module.html#module-2",
    "href": "group_work/02_module.html#module-2",
    "title": "Python package development",
    "section": "",
    "text": "Q1: In your course project homework, you refactored the script to use functions. How did it go?\nQ2: Classes. If you should introduce classes to improve the code, which classes should it be and why?\nQ3: [Optional] What are some problems with poorly designed code (based on your own experience or from the book)?\n\nBack to overview"
  },
  {
    "objectID": "group_work/05_module.html",
    "href": "group_work/05_module.html",
    "title": "Python package development",
    "section": "",
    "text": "Q1: Explain in your own words: what is composition? and what is inheritance in software design?\nQ2: What are some pros and cons of composition and inheritance?\nQ3: How could you use composition and/or inheritance in your Cleaner classes?\n\nBack to overview"
  },
  {
    "objectID": "group_work/05_module.html#module-05",
    "href": "group_work/05_module.html#module-05",
    "title": "Python package development",
    "section": "",
    "text": "Q1: Explain in your own words: what is composition? and what is inheritance in software design?\nQ2: What are some pros and cons of composition and inheritance?\nQ3: How could you use composition and/or inheritance in your Cleaner classes?\n\nBack to overview"
  },
  {
    "objectID": "03_testing_slides.html#testing",
    "href": "03_testing_slides.html#testing",
    "title": "Testing, linting and formatting",
    "section": "Testing",
    "text": "Testing\nVerify code is working as expected.\nSimplest way to test is to run code and check output.\n\nAutomated testing checks output automatically.\nCode changes can break other parts of code.\nAutomatic testing verifies code is still working."
  },
  {
    "objectID": "03_testing_slides.html#testing-workflow",
    "href": "03_testing_slides.html#testing-workflow",
    "title": "Testing, linting and formatting",
    "section": "Testing workflow",
    "text": "Testing workflow\n\nPrepare inputs\nDescribe expected output\nObtain actual output\nCompare actual and expected output"
  },
  {
    "objectID": "03_testing_slides.html#unit-testing",
    "href": "03_testing_slides.html#unit-testing",
    "title": "Testing, linting and formatting",
    "section": "Unit testing",
    "text": "Unit testing\n\n\n\n\n\n\nDefinition ‚ÄúUnit‚Äù\n\n\n\nA small, fundamental piece of code.\nExecuted in isolation with appropriate inputs.\n\n\n\n\n\nA function is typically considered a ‚Äúunit‚Äù\nLines of code within functions are smaller (can‚Äôt be isolated)\nClasses are considered bigger (but can be treated as units)"
  },
  {
    "objectID": "03_testing_slides.html#a-good-unit-test",
    "href": "03_testing_slides.html#a-good-unit-test",
    "title": "Testing, linting and formatting",
    "section": "A good unit test",
    "text": "A good unit test\n\n\n\nFully automated\nHas full control over all the pieces running (‚Äúfake‚Äù external dependencies)\nCan be run in any order\nRuns in memory (no DB or file access, for example)\nConsistently returns the same result (no random numbers)\nRuns fast\nTests a single logical concept in the system\nReadable\nMaintainable\nTrustworthy"
  },
  {
    "objectID": "03_testing_slides.html#example",
    "href": "03_testing_slides.html#example",
    "title": "Testing, linting and formatting",
    "section": "Example",
    "text": "Example\n\nfind the maximum water level each year\ncreate a summary report for the subset of data"
  },
  {
    "objectID": "03_testing_slides.html#integration-testing",
    "href": "03_testing_slides.html#integration-testing",
    "title": "Testing, linting and formatting",
    "section": "Integration testing",
    "text": "Integration testing\ndef test_integration():\n    wl = get_water_level(time=\"2019-01-01\", location=\"Aarhus\")\n    max_wls = get_max_water_level(wl, freq=\"Y\")\n    report = summary_report(max_wls)\n\n    assert report.title == \"Summary report\"\n    assert report.text == \"The maximum water level in 2021 was 3.0 m\""
  },
  {
    "objectID": "03_testing_slides.html#testing-in-vs-code",
    "href": "03_testing_slides.html#testing-in-vs-code",
    "title": "Testing, linting and formatting",
    "section": "Testing in VS Code",
    "text": "Testing in VS Code"
  },
  {
    "objectID": "03_testing_slides.html#fixtures",
    "href": "03_testing_slides.html#fixtures",
    "title": "Testing, linting and formatting",
    "section": "Fixtures",
    "text": "Fixtures\n\nA piece of code that is used by multiple tests\nProvide data or services to tests\nDefined with @pytest.fixture\nSet up test environment\nPass fixtures as test arguments"
  },
  {
    "objectID": "03_testing_slides.html#fixture-example",
    "href": "03_testing_slides.html#fixture-example",
    "title": "Testing, linting and formatting",
    "section": "Fixture example",
    "text": "Fixture example\n@pytest.fixture\ndef water_level():\n    return TimeSeries([1.0, ..., 3.0], start = \"2019-01-01\")\n\ndef test_get_max_water_level(water_level):\n    max_wls = get_max_water_level(water_level, freq=\"Y\")\n    \n    assert len(max_wls) == 1\n    assert max_wls[0] == 3.0"
  },
  {
    "objectID": "03_testing_slides.html#test-coverage",
    "href": "03_testing_slides.html#test-coverage",
    "title": "Testing, linting and formatting",
    "section": "Test coverage",
    "text": "Test coverage\n\nA measure of how much of your code is tested\nAim for high coverage, but focus on meaningful tests\nInstall pytest-cov\nRun tests with coverage report\n\npytest --cov=myproj\n\nUse coverage report to identify untested code"
  },
  {
    "objectID": "03_testing_slides.html#test-coverage-report",
    "href": "03_testing_slides.html#test-coverage-report",
    "title": "Testing, linting and formatting",
    "section": "Test coverage report",
    "text": "Test coverage report\npytest --cov=myproj tests/\n-------------------- coverage: ... ---------------------\nName                 Stmts   Miss  Cover\n----------------------------------------\nmyproj/__init__          2      0   100%\nmyproj/myproj          257     13    94%\nmyproj/feature4286      94      7    92%\n----------------------------------------\nTOTAL                  353     20    94%"
  },
  {
    "objectID": "03_testing_slides.html#testing-advice",
    "href": "03_testing_slides.html#testing-advice",
    "title": "Testing, linting and formatting",
    "section": "Testing advice",
    "text": "Testing advice\n\n\n\n\n\n\nTest edge cases\n\n\n\nempty lists\nlists with a single element\nempty strings\nempty dictionaries\nNone\nnp.nan"
  },
  {
    "objectID": "03_testing_slides.html#tests-document-expected-behavior",
    "href": "03_testing_slides.html#tests-document-expected-behavior",
    "title": "Testing, linting and formatting",
    "section": "Tests document expected behavior",
    "text": "Tests document expected behavior\ndef test_operable_period_can_be_missing():\n\n    assert is_operable(height=1.0, period=None)\n    assert is_operable(height=1.0, period=np.nan)\n    assert is_operable(height=1.0)\n    assert not is_operable(height=11.0)\n\ndef test_height_can_not_be_missing():\n\n    with pytest.raises(ValueError) as excinfo:\n        is_operable(height=None)\n        is_operable(height=np.nan)\n        \n    assert \"height\" in str(excinfo.value)"
  },
  {
    "objectID": "03_testing_slides.html#test-driven-development",
    "href": "03_testing_slides.html#test-driven-development",
    "title": "Testing, linting and formatting",
    "section": "Test driven development",
    "text": "Test driven development\n\nWrite a test that fails ‚ùå\nWrite the code to make the test pass ‚úÖ\nRefactor the code ‚öíÔ∏è\n\n\nThe benefit of this approach is that you are forced to think about the expected behaviour of your code before you write it.\nIt is also too easy to write a test that passes without actually testing the code."
  },
  {
    "objectID": "03_testing_slides.html#section",
    "href": "03_testing_slides.html#section",
    "title": "Testing, linting and formatting",
    "section": "",
    "text": "and now for something completely different‚Ä¶"
  },
  {
    "objectID": "03_testing_slides.html#the-zen-of-python",
    "href": "03_testing_slides.html#the-zen-of-python",
    "title": "Testing, linting and formatting",
    "section": "The Zen of Python",
    "text": "The Zen of Python\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\n\n‚Ä¶\nErrors should never pass silently.\nUnless explicitly silenced.\n‚Ä¶"
  },
  {
    "objectID": "03_testing_slides.html#exceptions",
    "href": "03_testing_slides.html#exceptions",
    "title": "Testing, linting and formatting",
    "section": "Exceptions",
    "text": "Exceptions\n\nExceptions are a way to handle errors in your code.\nRaising an exception can prevent propagating bad values.\nExceptions are communication between the programmer and the user.\nThere are many built-in exceptions in Python\n\nIndexError\nKeyError\nValueError\nFileNotFoundError\n\nYou can also create your own custom exceptions, e.g.¬†ModelInitError, MissingLicenseError?"
  },
  {
    "objectID": "03_testing_slides.html#example-1",
    "href": "03_testing_slides.html#example-1",
    "title": "Testing, linting and formatting",
    "section": "Example",
    "text": "Example\n\n\nsrc/ops.py\n\ndef is_operable(height:float, period:float) -&gt; bool:\n    if height &lt; 0.0:\n        raise ValueError(f\"Supplied value of {height=} is unphysical.\")\n\n&gt;&gt;&gt; is_operable(height=-1.0, period=4.0)\n\nTraceback (most recent call last):\n  ...\nValueError: Supplied value of height=-1.0 is unphysical.\n\n\nIt is better to raise an exception (that can terminate the program), than to propagate a bad value."
  },
  {
    "objectID": "03_testing_slides.html#warnings",
    "href": "03_testing_slides.html#warnings",
    "title": "Testing, linting and formatting",
    "section": "Warnings",
    "text": "Warnings\nWarnings are a way to alert users of your code to potential issues or usage errors without actually halting the program‚Äôs execution.\n\n\nsrc/ops.py\n\nimport warnings\nwarnings.warn(\"This is a warning\")"
  },
  {
    "objectID": "03_testing_slides.html#how-to-test-exceptions",
    "href": "03_testing_slides.html#how-to-test-exceptions",
    "title": "Testing, linting and formatting",
    "section": "How to test exceptions",
    "text": "How to test exceptions\n\n\ntests/test_ops.py\n\nimport pytest\nfrom ops import is_operable\n\ndef test_negative_heights_are_not_valid():\n    with pytest.raises(ValueError):\n        is_operable(height=-1.0, period=4.0)\n\nThe same can be done with warnings."
  },
  {
    "objectID": "03_testing_slides.html#linting",
    "href": "03_testing_slides.html#linting",
    "title": "Testing, linting and formatting",
    "section": "Linting",
    "text": "Linting\nA quick way to check your code for common errors and style issues.\nruff is a recent tool for linting Python code.\n\nsyntax errors\nunused imports\nunused variables\nundefined names\ncode style (e.g.¬†line length, indentation, whitespace, etc.)"
  },
  {
    "objectID": "03_testing_slides.html#linting-with-ruff",
    "href": "03_testing_slides.html#linting-with-ruff",
    "title": "Testing, linting and formatting",
    "section": "Linting with ruff",
    "text": "Linting with ruff\n\n\nexamples/04_testing/process.py\n\nimport requests\nimport scipy\n\ndef preprocess(x, y, xout):\n\n    x = x[~np.isnan(x)] \n    method = \"cubic\"\n    # interpolate missing values with cubic spline\n    return scipy.interpolate.interp1d(x, y)(xout)\n\nRun ruff check:\n$ ruff check process.py\nprocess.py:1:8: F401 [*] `requests` imported but unused\nprocess.py:6:12: F821 Undefined name `np`\nprocess.py:7:5: F841 [*] Local variable `method` is assigned to but never used\nFound 3 errors.\n[*] 1 fixable with the `--fix` option (1 hidden fix can be enabled with the `--unsafe-fixes` option).\n\n\nLinting is a fast way to find common errors.\nUnused imports are confusing.\nUnused and undefined variables are usually a typo or a mistake. Fixing them can prevent bugs."
  },
  {
    "objectID": "03_testing_slides.html#formatting",
    "href": "03_testing_slides.html#formatting",
    "title": "Testing, linting and formatting",
    "section": "Formatting",
    "text": "Formatting\n\nFormatting code for readability and maintainability is essential.\nruff can be used for code formatting (in addition to linting).\nruff is a faster replacement of black, a previously commonly used code formatter.\nIt enforces its own rules for formatting, with limited configurability.\nHaving a unified style makes code changes easier to understand and collaborate on."
  },
  {
    "objectID": "03_testing_slides.html#running-ruff-format",
    "href": "03_testing_slides.html#running-ruff-format",
    "title": "Testing, linting and formatting",
    "section": "Running ruff format",
    "text": "Running ruff format\nCheck if files need formatting (optional):\n$ ruff format --check\nWould reformat: data_utils.py\nWould reformat: dfsu/__init__.py\nWould reformat: dataarray.py\nWould reformat: dataset.py\nWould reformat: spatial/geometry.py\nWould reformat: pfs/pfssection.py\n6 files would be reformatted\nFormat files:\n$ ruff format\n6 files reformatted"
  },
  {
    "objectID": "03_testing_slides.html#ruff-format-in-visual-studio-code",
    "href": "03_testing_slides.html#ruff-format-in-visual-studio-code",
    "title": "Testing, linting and formatting",
    "section": "Ruff format in Visual Studio Code",
    "text": "Ruff format in Visual Studio Code\nVisual Studio Code can be configured to run ruff format automatically when saving a file using the Ruff extension."
  },
  {
    "objectID": "03_testing_slides.html#profiling",
    "href": "03_testing_slides.html#profiling",
    "title": "Testing, linting and formatting",
    "section": "Profiling",
    "text": "Profiling\n\nProfiling is a way to measure the performance of your code.\nIt can help you identify bottlenecks in your code.\nYour intuition about what is slow is often wrong.\nThe line_profiler package reports the time spent on each line of code.\nIt can be run inside a notebook using the lprun magic command."
  },
  {
    "objectID": "03_testing_slides.html#profiling---example-code",
    "href": "03_testing_slides.html#profiling---example-code",
    "title": "Testing, linting and formatting",
    "section": "Profiling - example code",
    "text": "Profiling - example code\nimport numpy as np\n\ndef top_neighbors(points, radius=0.1):\n    \"\"\"Don't use this function, it's only purpose is to be profiled.\"\"\"\n    n = len(points)\n    idx = np.array([int(x) for x in str.split(\"0 \"* n)])\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                d = np.sqrt(np.sum((points[i] - points[j])**2))\n                if d &lt; float(radius): \n                    idx[i] += 1\n    for i in range(n):\n        for j in range(n - i - 1):\n            if idx[j] &lt; idx[j + 1]:\n                idx[j], idx[j + 1] = idx[j + 1], idx[j]\n                points[j], points[j + 1] = points[j + 1], points[j]\n    return points\n\ndef main():\n    points = np.random.rand(1000, 2)\n    top = top_neighbors(points)"
  },
  {
    "objectID": "03_testing_slides.html#profiling---output",
    "href": "03_testing_slides.html#profiling---output",
    "title": "Testing, linting and formatting",
    "section": "Profiling - output",
    "text": "Profiling - output\nInvoking the jupyter magic command lprun with:\n\nfunction to profile - top_neighbors\ncode to run - main()\n\n%lprun -f top_neighbors main()\n\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n     3                                           def top_neighbors(points, radius=\"0.1\"):\n     4                                               \"\"\"Don't use this function, it's only purpose is to be profiled.\"\"\"\n     5         1       2800.0   2800.0      0.0      n = len(points)\n     6         1     353300.0 353300.0      0.0      idx = np.array([int(x) for x in str.split(\"0 \"* n)])\n     7                                           \n     8      1001     345100.0    344.8      0.0      for i in range(n):\n     9   1001000  378191701.0    377.8      2.2          for j in range(n):\n    10   1000000  328387205.0    328.4      1.9              if i != j:\n    11    999000        1e+10  14473.0     83.8                  d = np.sqrt(np.sum((points[i] - points[j])**2))\n    12    999000  933778605.0    934.7      5.4                  if d &lt; float(radius): \n    13     28952   57010001.0   1969.1      0.3                      idx[i] += 1\n    14      1001     367100.0    366.7      0.0      for i in range(n):\n    15    500500  144295203.0    288.3      0.8          for j in range(n - i - 1):\n    16    499500  302166901.0    604.9      1.8              if idx[j] &lt; idx[j + 1]:\n    17    240227  212070500.0    882.8      1.2                  idx[j], idx[j + 1] = idx[j + 1], idx[j]\n    18    240227  437538803.0   1821.4      2.5                  points[j], points[j + 1] = points[j + 1], points[j]\n    19         1        500.0    500.0      0.0      return points"
  },
  {
    "objectID": "03_testing_slides.html#makefiles",
    "href": "03_testing_slides.html#makefiles",
    "title": "Testing, linting and formatting",
    "section": "Makefiles",
    "text": "Makefiles\n\nMakefiles simplify running complex commands.\nThey act as a single source of truth for how to run your tools.\nSelf documenting, making it easier to onboard new team members.\nRun ‚Äòmake &lt;command&gt;‚Äô to run a command from the Makefile.\nOn Linux by default, for Windows install with MSYS2 or Chocolatey (or use WSL).\n\n\nExample\n\n\nMakefile\n\nLIB = my_library\n\ncheck: lint typecheck test\n\nlint:\n    ruff check $(LIB)\n\nformat:\n    ruff format $(LIB)\n\ntest:\n    pytest --disable-warnings"
  },
  {
    "objectID": "03_testing_slides.html#summary",
    "href": "03_testing_slides.html#summary",
    "title": "Testing, linting and formatting",
    "section": "Summary",
    "text": "Summary\n\nTesting is a way to verify that your code is working as expected.\nUnit tests are small, isolated tests that verify a single logical concept in your code.\nIntegration tests are used to verify that your code works with other code.\nExceptions are a way to handle errors in your code.\nWarnings are a way to alert users of your code to potential issues or usage errors.\nLinting is a way to check your code for common errors and style issues.\nRuff is a fast linter that checks for common errors and style issues.\nRuff is also an automatic code formatter that enforces a consistent style.\nProfiling is a way to measure the performance of your code.\nMakefiles simplify project related commands for everyone."
  },
  {
    "objectID": "03_testing.html",
    "href": "03_testing.html",
    "title": "Testing, linting and formatting",
    "section": "",
    "text": "Verify code is working as expected.\nSimplest way to test is to run code and check output.\n. . .\nAutomated testing checks output automatically.\nCode changes can break other parts of code.\nAutomatic testing verifies code is still working."
  },
  {
    "objectID": "03_testing.html#testing",
    "href": "03_testing.html#testing",
    "title": "Testing, linting and formatting",
    "section": "",
    "text": "Verify code is working as expected.\nSimplest way to test is to run code and check output.\n. . .\nAutomated testing checks output automatically.\nCode changes can break other parts of code.\nAutomatic testing verifies code is still working."
  },
  {
    "objectID": "03_testing.html#testing-workflow",
    "href": "03_testing.html#testing-workflow",
    "title": "Testing, linting and formatting",
    "section": "Testing workflow",
    "text": "Testing workflow\n\nPrepare inputs\nDescribe expected output\nObtain actual output\nCompare actual and expected output"
  },
  {
    "objectID": "03_testing.html#unit-testing",
    "href": "03_testing.html#unit-testing",
    "title": "Testing, linting and formatting",
    "section": "Unit testing",
    "text": "Unit testing\n\n\n\n\n\n\nDefinition ‚ÄúUnit‚Äù\n\n\n\n\nA small, fundamental piece of code.\nExecuted in isolation with appropriate inputs.\n\n\n\n\n\nA function is typically considered a ‚Äúunit‚Äù\nLines of code within functions are smaller (can‚Äôt be isolated)\nClasses are considered bigger (but can be treated as units)"
  },
  {
    "objectID": "03_testing.html#a-good-unit-test",
    "href": "03_testing.html#a-good-unit-test",
    "title": "Testing, linting and formatting",
    "section": "A good unit test",
    "text": "A good unit test\n\n\n\n\nFully automated\nHas full control over all the pieces running (‚Äúfake‚Äù external dependencies)\nCan be run in any order\nRuns in memory (no DB or file access, for example)\nConsistently returns the same result (no random numbers)\nRuns fast\nTests a single logical concept in the system\nReadable\nMaintainable\nTrustworthy"
  },
  {
    "objectID": "03_testing.html#example",
    "href": "03_testing.html#example",
    "title": "Testing, linting and formatting",
    "section": "Example",
    "text": "Example\n\nfind the maximum water level each year\ncreate a summary report for the subset of data\n\n\n\nfind the maximum water level each year\n\ndef test_get_max_water_level():\n    ts = TimeSeries([1.0, 2.0, ..., 3.0], start = \"2019-01-01\")\n    max_wls = get_max_water_level(ts, freq=\"Y\")\n    \n    assert len(max_wls) == 1\n    assert max_wls[0] == 3.0\n\n\ncreate a summary report for the subset of data\n\ndef test_summary_report():\n    max_wls = [1.0, 2.0, 3.0]\n    report = summary_report(max_wls, station=\"Station A\")\n\n    assert report.title == \"Summary report - Station A\"\n    assert report.text == \"The maximum water level during the year was 3.0 m\""
  },
  {
    "objectID": "03_testing.html#integration-testing",
    "href": "03_testing.html#integration-testing",
    "title": "Testing, linting and formatting",
    "section": "Integration testing",
    "text": "Integration testing\ndef test_integration():\n    wl = get_water_level(time=\"2019-01-01\", location=\"Aarhus\")\n    max_wls = get_max_water_level(wl, freq=\"Y\")\n    report = summary_report(max_wls)\n\n    assert report.title == \"Summary report\"\n    assert report.text == \"The maximum water level in 2021 was 3.0 m\""
  },
  {
    "objectID": "03_testing.html#testing-in-vs-code",
    "href": "03_testing.html#testing-in-vs-code",
    "title": "Testing, linting and formatting",
    "section": "Testing in VS Code",
    "text": "Testing in VS Code"
  },
  {
    "objectID": "03_testing.html#fixtures",
    "href": "03_testing.html#fixtures",
    "title": "Testing, linting and formatting",
    "section": "Fixtures",
    "text": "Fixtures\n\n\nA piece of code that is used by multiple tests\nProvide data or services to tests\nDefined with @pytest.fixture\nSet up test environment\nPass fixtures as test arguments"
  },
  {
    "objectID": "03_testing.html#fixture-example",
    "href": "03_testing.html#fixture-example",
    "title": "Testing, linting and formatting",
    "section": "Fixture example",
    "text": "Fixture example\n@pytest.fixture\ndef water_level():\n    return TimeSeries([1.0, ..., 3.0], start = \"2019-01-01\")\n\ndef test_get_max_water_level(water_level):\n    max_wls = get_max_water_level(water_level, freq=\"Y\")\n    \n    assert len(max_wls) == 1\n    assert max_wls[0] == 3.0"
  },
  {
    "objectID": "03_testing.html#test-coverage",
    "href": "03_testing.html#test-coverage",
    "title": "Testing, linting and formatting",
    "section": "Test coverage",
    "text": "Test coverage\n\n\nA measure of how much of your code is tested\nAim for high coverage, but focus on meaningful tests\nInstall pytest-cov\nRun tests with coverage report\n\npytest --cov=myproj\n\nUse coverage report to identify untested code"
  },
  {
    "objectID": "03_testing.html#test-coverage-report",
    "href": "03_testing.html#test-coverage-report",
    "title": "Testing, linting and formatting",
    "section": "Test coverage report",
    "text": "Test coverage report\npytest --cov=myproj tests/\n-------------------- coverage: ... ---------------------\nName                 Stmts   Miss  Cover\n----------------------------------------\nmyproj/__init__          2      0   100%\nmyproj/myproj          257     13    94%\nmyproj/feature4286      94      7    92%\n----------------------------------------\nTOTAL                  353     20    94%"
  },
  {
    "objectID": "03_testing.html#testing-advice",
    "href": "03_testing.html#testing-advice",
    "title": "Testing, linting and formatting",
    "section": "Testing advice",
    "text": "Testing advice\n\n\n\n\n\n\nTest edge cases\n\n\n\n\nempty lists\nlists with a single element\nempty strings\nempty dictionaries\nNone\nnp.nan"
  },
  {
    "objectID": "03_testing.html#tests-document-expected-behavior",
    "href": "03_testing.html#tests-document-expected-behavior",
    "title": "Testing, linting and formatting",
    "section": "Tests document expected behavior",
    "text": "Tests document expected behavior\ndef test_operable_period_can_be_missing():\n\n    assert is_operable(height=1.0, period=None)\n    assert is_operable(height=1.0, period=np.nan)\n    assert is_operable(height=1.0)\n    assert not is_operable(height=11.0)\n\ndef test_height_can_not_be_missing():\n\n    with pytest.raises(ValueError) as excinfo:\n        is_operable(height=None)\n        is_operable(height=np.nan)\n        \n    assert \"height\" in str(excinfo.value)"
  },
  {
    "objectID": "03_testing.html#test-driven-development",
    "href": "03_testing.html#test-driven-development",
    "title": "Testing, linting and formatting",
    "section": "Test driven development",
    "text": "Test driven development\n\n\nWrite a test that fails ‚ùå\nWrite the code to make the test pass ‚úÖ\nRefactor the code ‚öíÔ∏è\n\n\n. . .\nThe benefit of this approach is that you are forced to think about the expected behaviour of your code before you write it.\nIt is also too easy to write a test that passes without actually testing the code."
  },
  {
    "objectID": "03_testing.html#section",
    "href": "03_testing.html#section",
    "title": "Testing, linting and formatting",
    "section": "",
    "text": "and now for something completely different‚Ä¶"
  },
  {
    "objectID": "03_testing.html#the-zen-of-python",
    "href": "03_testing.html#the-zen-of-python",
    "title": "Testing, linting and formatting",
    "section": "The Zen of Python",
    "text": "The Zen of Python\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\n. . .\n‚Ä¶\nErrors should never pass silently.\nUnless explicitly silenced.\n‚Ä¶"
  },
  {
    "objectID": "03_testing.html#exceptions",
    "href": "03_testing.html#exceptions",
    "title": "Testing, linting and formatting",
    "section": "Exceptions",
    "text": "Exceptions\n\n\nExceptions are a way to handle errors in your code.\nRaising an exception can prevent propagating bad values.\nExceptions are communication between the programmer and the user.\nThere are many built-in exceptions in Python\n\nIndexError\nKeyError\nValueError\nFileNotFoundError\n\nYou can also create your own custom exceptions, e.g.¬†ModelInitError, MissingLicenseError?"
  },
  {
    "objectID": "03_testing.html#example-1",
    "href": "03_testing.html#example-1",
    "title": "Testing, linting and formatting",
    "section": "Example",
    "text": "Example\n\n\nsrc/ops.py\n\ndef is_operable(height:float, period:float) -&gt; bool:\n    if height &lt; 0.0:\n        raise ValueError(f\"Supplied value of {height=} is unphysical.\")\n\n&gt;&gt;&gt; is_operable(height=-1.0, period=4.0)\n\nTraceback (most recent call last):\n  ...\nValueError: Supplied value of height=-1.0 is unphysical.\n\n. . .\nIt is better to raise an exception (that can terminate the program), than to propagate a bad value."
  },
  {
    "objectID": "03_testing.html#warnings",
    "href": "03_testing.html#warnings",
    "title": "Testing, linting and formatting",
    "section": "Warnings",
    "text": "Warnings\nWarnings are a way to alert users of your code to potential issues or usage errors without actually halting the program‚Äôs execution.\n\n\nsrc/ops.py\n\nimport warnings\nwarnings.warn(\"This is a warning\")"
  },
  {
    "objectID": "03_testing.html#how-to-test-exceptions",
    "href": "03_testing.html#how-to-test-exceptions",
    "title": "Testing, linting and formatting",
    "section": "How to test exceptions",
    "text": "How to test exceptions\n\n\ntests/test_ops.py\n\nimport pytest\nfrom ops import is_operable\n\ndef test_negative_heights_are_not_valid():\n    with pytest.raises(ValueError):\n        is_operable(height=-1.0, period=4.0)\n\nThe same can be done with warnings."
  },
  {
    "objectID": "03_testing.html#linting",
    "href": "03_testing.html#linting",
    "title": "Testing, linting and formatting",
    "section": "Linting",
    "text": "Linting\nA quick way to check your code for common errors and style issues.\nruff is a recent tool for linting Python code.\n\nsyntax errors\nunused imports\nunused variables\nundefined names\ncode style (e.g.¬†line length, indentation, whitespace, etc.)"
  },
  {
    "objectID": "03_testing.html#linting-with-ruff",
    "href": "03_testing.html#linting-with-ruff",
    "title": "Testing, linting and formatting",
    "section": "Linting with ruff",
    "text": "Linting with ruff\n\n\nexamples/04_testing/process.py\n\nimport requests\nimport scipy\n\ndef preprocess(x, y, xout):\n\n    x = x[~np.isnan(x)] \n    method = \"cubic\"\n    # interpolate missing values with cubic spline\n    return scipy.interpolate.interp1d(x, y)(xout)\n\nRun ruff check:\n$ ruff check process.py\nprocess.py:1:8: F401 [*] `requests` imported but unused\nprocess.py:6:12: F821 Undefined name `np`\nprocess.py:7:5: F841 [*] Local variable `method` is assigned to but never used\nFound 3 errors.\n[*] 1 fixable with the `--fix` option (1 hidden fix can be enabled with the `--unsafe-fixes` option).\n\n\nLinting is a fast way to find common errors.\nUnused imports are confusing.\nUnused and undefined variables are usually a typo or a mistake. Fixing them can prevent bugs."
  },
  {
    "objectID": "03_testing.html#formatting",
    "href": "03_testing.html#formatting",
    "title": "Testing, linting and formatting",
    "section": "Formatting",
    "text": "Formatting\n\n\nFormatting code for readability and maintainability is essential.\nruff can be used for code formatting (in addition to linting).\nruff is a faster replacement of black, a previously commonly used code formatter.\nIt enforces its own rules for formatting, with limited configurability.\nHaving a unified style makes code changes easier to understand and collaborate on."
  },
  {
    "objectID": "03_testing.html#running-ruff-format",
    "href": "03_testing.html#running-ruff-format",
    "title": "Testing, linting and formatting",
    "section": "Running ruff format",
    "text": "Running ruff format\nCheck if files need formatting (optional):\n$ ruff format --check\nWould reformat: data_utils.py\nWould reformat: dfsu/__init__.py\nWould reformat: dataarray.py\nWould reformat: dataset.py\nWould reformat: spatial/geometry.py\nWould reformat: pfs/pfssection.py\n6 files would be reformatted\nFormat files:\n$ ruff format\n6 files reformatted"
  },
  {
    "objectID": "03_testing.html#ruff-format-in-visual-studio-code",
    "href": "03_testing.html#ruff-format-in-visual-studio-code",
    "title": "Testing, linting and formatting",
    "section": "Ruff format in Visual Studio Code",
    "text": "Ruff format in Visual Studio Code\nVisual Studio Code can be configured to run ruff format automatically when saving a file using the Ruff extension."
  },
  {
    "objectID": "03_testing.html#profiling",
    "href": "03_testing.html#profiling",
    "title": "Testing, linting and formatting",
    "section": "Profiling",
    "text": "Profiling\n\n\nProfiling is a way to measure the performance of your code.\nIt can help you identify bottlenecks in your code.\nYour intuition about what is slow is often wrong.\nThe line_profiler package reports the time spent on each line of code.\nIt can be run inside a notebook using the lprun magic command."
  },
  {
    "objectID": "03_testing.html#profiling---example-code",
    "href": "03_testing.html#profiling---example-code",
    "title": "Testing, linting and formatting",
    "section": "Profiling - example code",
    "text": "Profiling - example code\nimport numpy as np\n\ndef top_neighbors(points, radius=0.1):\n    \"\"\"Don't use this function, it's only purpose is to be profiled.\"\"\"\n    n = len(points)\n    idx = np.array([int(x) for x in str.split(\"0 \"* n)])\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                d = np.sqrt(np.sum((points[i] - points[j])**2))\n                if d &lt; float(radius): \n                    idx[i] += 1\n    for i in range(n):\n        for j in range(n - i - 1):\n            if idx[j] &lt; idx[j + 1]:\n                idx[j], idx[j + 1] = idx[j + 1], idx[j]\n                points[j], points[j + 1] = points[j + 1], points[j]\n    return points\n\ndef main():\n    points = np.random.rand(1000, 2)\n    top = top_neighbors(points)"
  },
  {
    "objectID": "03_testing.html#profiling---output",
    "href": "03_testing.html#profiling---output",
    "title": "Testing, linting and formatting",
    "section": "Profiling - output",
    "text": "Profiling - output\nInvoking the jupyter magic command lprun with:\n\nfunction to profile - top_neighbors\ncode to run - main()\n\n%lprun -f top_neighbors main()\n. . .\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n     3                                           def top_neighbors(points, radius=\"0.1\"):\n     4                                               \"\"\"Don't use this function, it's only purpose is to be profiled.\"\"\"\n     5         1       2800.0   2800.0      0.0      n = len(points)\n     6         1     353300.0 353300.0      0.0      idx = np.array([int(x) for x in str.split(\"0 \"* n)])\n     7                                           \n     8      1001     345100.0    344.8      0.0      for i in range(n):\n     9   1001000  378191701.0    377.8      2.2          for j in range(n):\n    10   1000000  328387205.0    328.4      1.9              if i != j:\n    11    999000        1e+10  14473.0     83.8                  d = np.sqrt(np.sum((points[i] - points[j])**2))\n    12    999000  933778605.0    934.7      5.4                  if d &lt; float(radius): \n    13     28952   57010001.0   1969.1      0.3                      idx[i] += 1\n    14      1001     367100.0    366.7      0.0      for i in range(n):\n    15    500500  144295203.0    288.3      0.8          for j in range(n - i - 1):\n    16    499500  302166901.0    604.9      1.8              if idx[j] &lt; idx[j + 1]:\n    17    240227  212070500.0    882.8      1.2                  idx[j], idx[j + 1] = idx[j + 1], idx[j]\n    18    240227  437538803.0   1821.4      2.5                  points[j], points[j + 1] = points[j + 1], points[j]\n    19         1        500.0    500.0      0.0      return points"
  },
  {
    "objectID": "03_testing.html#makefiles",
    "href": "03_testing.html#makefiles",
    "title": "Testing, linting and formatting",
    "section": "Makefiles",
    "text": "Makefiles\n\n\nMakefiles simplify running complex commands.\nThey act as a single source of truth for how to run your tools.\nSelf documenting, making it easier to onboard new team members.\nRun ‚Äòmake &lt;command&gt;‚Äô to run a command from the Makefile.\nOn Linux by default, for Windows install with MSYS2 or Chocolatey (or use WSL).\n\n\n. . .\nExample\n\n\nMakefile\n\nLIB = my_library\n\ncheck: lint typecheck test\n\nlint:\n    ruff check $(LIB)\n\nformat:\n    ruff format $(LIB)\n\ntest:\n    pytest --disable-warnings"
  },
  {
    "objectID": "03_testing.html#summary",
    "href": "03_testing.html#summary",
    "title": "Testing, linting and formatting",
    "section": "Summary",
    "text": "Summary\n\n\nTesting is a way to verify that your code is working as expected.\nUnit tests are small, isolated tests that verify a single logical concept in your code.\nIntegration tests are used to verify that your code works with other code.\nExceptions are a way to handle errors in your code.\nWarnings are a way to alert users of your code to potential issues or usage errors.\nLinting is a way to check your code for common errors and style issues.\nRuff is a fast linter that checks for common errors and style issues.\nRuff is also an automatic code formatter that enforces a consistent style.\nProfiling is a way to measure the performance of your code.\nMakefiles simplify project related commands for everyone."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python package development",
    "section": "",
    "text": "Introduction"
  },
  {
    "objectID": "index.html#learning-modules",
    "href": "index.html#learning-modules",
    "title": "Python package development",
    "section": "Learning modules",
    "text": "Learning modules\n\nGit, Pull Requests, and code reviews üõù\n\nDiscussion\nHomework\n\nPython functions, classes, and modules üõù\n\nDiscussion\nHomework\n\nTesting and auto-formatting üõù\n\nDiscussion\nHomework\n\nDependencies and GitHub actions üõù\n\nDiscussion\nHomework\n\nObject oriented design in Python üõù\n\nDiscussion\nHomework\n\nDocumentation üõù\n\nDiscussion\nHomework\n\nDistributing your package üõù\n\nHomework\n\n\nHome work - Overview\n¬©Ô∏è DHI 2025"
  },
  {
    "objectID": "00_introduction.html#instructors",
    "href": "00_introduction.html#instructors",
    "title": "Python package development",
    "section": "Instructors",
    "text": "Instructors\n\nHenrik Andersson - @ecomodeller\nJesper Sandvig Mariegaard - @jsmariegaard"
  },
  {
    "objectID": "00_introduction.html#participants",
    "href": "00_introduction.html#participants",
    "title": "Python package development",
    "section": "Participants",
    "text": "Participants\nIntroduce yourselves in a break out session later today."
  },
  {
    "objectID": "00_introduction.html#learning-modules",
    "href": "00_introduction.html#learning-modules",
    "title": "Python package development",
    "section": "Learning modules",
    "text": "Learning modules\n\nGit, Pull Requests, and code reviews\nPython functions, classes, and modules\nTesting and auto-formatting\nDependencies and GitHub actions\nObject oriented design in Python\nDocumentation\nDistributing your package"
  },
  {
    "objectID": "00_introduction.html#learning-objectives",
    "href": "00_introduction.html#learning-objectives",
    "title": "Python package development",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nimproved Python skills\nknowledge of how to create reusable Python code\nknow how to share code with others through a Python package"
  },
  {
    "objectID": "00_introduction.html#format",
    "href": "00_introduction.html#format",
    "title": "Python package development",
    "section": "Format",
    "text": "Format\n\nOnline session Tuesday and Friday\nHomework assignments\nQuiz (learning platform)"
  },
  {
    "objectID": "00_introduction.html#course-material",
    "href": "00_introduction.html#course-material",
    "title": "Python package development",
    "section": "Course material",
    "text": "Course material\n\nHillard, 2019, Practices of the Python Pro, Manning \nSlides"
  },
  {
    "objectID": "00_introduction.html#section",
    "href": "00_introduction.html#section",
    "title": "Python package development",
    "section": "",
    "text": "Book\n\nObject oriented design\nTesting\nData structures\n\n\nLectures\n\nExamples\nVersion control\nDocumentation\nAutomation\nPackaging"
  },
  {
    "objectID": "06_documentation_slides.html#why-document-your-code",
    "href": "06_documentation_slides.html#why-document-your-code",
    "title": "Documentation",
    "section": "Why document your code?",
    "text": "Why document your code?\n\n\nMake it easier for others to use your code\nMake it easier for you to use your code"
  },
  {
    "objectID": "06_documentation_slides.html#readme.md",
    "href": "06_documentation_slides.html#readme.md",
    "title": "Documentation",
    "section": "Readme.md",
    "text": "Readme.md\n\nA readme file is a text file that introduces and explains a project.\nAlways include a readme file in your project.\nYou can put readme files in any directory, and you can have more than one in a single project."
  },
  {
    "objectID": "06_documentation_slides.html#requirements",
    "href": "06_documentation_slides.html#requirements",
    "title": "Documentation",
    "section": "Requirements",
    "text": "Requirements\n\nMention the requirements for your package\n\nOperating system\nPython version\nOther non-Python dependencies, e.g.¬†VC++ redistributables\n\nInclude information on how to install your package\n\npip install my_package\npip install https://github.com/DHI/{repo}/archive/main.zip"
  },
  {
    "objectID": "06_documentation_slides.html#notebooks",
    "href": "06_documentation_slides.html#notebooks",
    "title": "Documentation",
    "section": "Notebooks",
    "text": "Notebooks\n\nJupyter notebooks are a great way to document your code\nGood for prototyping\nIn a later stage, notebooks can be used to demonstrate how to use your code\nNot a replacement for documentation for a professional package"
  },
  {
    "objectID": "06_documentation_slides.html#docstrings",
    "href": "06_documentation_slides.html#docstrings",
    "title": "Documentation",
    "section": "Docstrings",
    "text": "Docstrings\n\"\"\"K-means clustering.\"\"\"\n\nclass KMeans(_BaseKMeans):\n  \"\"\"K-Means clustering.\n  \n  Parameters\n  ----------\n  n_clusters : int, default=8\n      The number of clusters to form as well as the number of\n      centroids to generate.\n\n  Examples\n  --------\n  &gt;&gt;&gt; X = np.array([[1, 2], [1, 4], [1, 0],\n  ...               [10, 2], [10, 4], [10, 0]])\n  &gt;&gt;&gt; kmeans = KMeans(n_clusters=2, random_state=0, n_init=\"auto\").fit(X)\n  &gt;&gt;&gt; kmeans.labels_\n  array([1, 1, 1, 0, 0, 0], dtype=int32)\nsklearn.KMeans"
  },
  {
    "objectID": "06_documentation_slides.html#docstring---numpy-format",
    "href": "06_documentation_slides.html#docstring---numpy-format",
    "title": "Documentation",
    "section": "Docstring - Numpy format",
    "text": "Docstring - Numpy format\ndef function_name(param1, param2, param3):\n    \"\"\"Short summary.\n    \n    Long description.\n    \n    Parameters\n    ----------\n    param1 : int\n        Description of `param1`.\n    param2 : str\n        Description of `param2`.\n    param3 : list of str\n        Description of `param3`.\n    \n    Returns\n    -------\n    bool\n        Description of return value.\n    \"\"\"\n    pass\n\nThere are several docstring formats. The most common is the numpy format, used by scikit-learn, pandas, numpy, scipy, etc."
  },
  {
    "objectID": "06_documentation_slides.html#type-hints",
    "href": "06_documentation_slides.html#type-hints",
    "title": "Documentation",
    "section": "Type hints",
    "text": "Type hints\nFrom Python 3.6, type hints can be used in addition to the type in the docstring.\ndef remove_outlier(data:pd.DataFrame, column:str, threshold:float=3) -&gt; pd.DataFrame:\n    \"\"\"Remove outliers from a dataframe.\n    \n    Parameters\n    ----------\n    data : pd.DataFrame\n        Dataframe to remove outliers from.\n    column : str\n        Column to remove outliers from.\n    threshold : float, optional\n        Number of standard deviations to use as threshold, by default 3"
  },
  {
    "objectID": "06_documentation_slides.html#doctest",
    "href": "06_documentation_slides.html#doctest",
    "title": "Documentation",
    "section": "doctest",
    "text": "doctest\nUsing code without documentation is hard, but using code with wrong documentation is even harder.\nHow can you make sure that the documentation is correct?\n\nThe answer is the doctest module built in to the Python standard library.\n\n\n\n\n\n\n\n\nTip\n\n\nThe extensive standard library is why Python is described as a language with ‚Äúbatteries included!‚Äù"
  },
  {
    "objectID": "06_documentation_slides.html#documentation-generators",
    "href": "06_documentation_slides.html#documentation-generators",
    "title": "Documentation",
    "section": "Documentation generators",
    "text": "Documentation generators\n\nSphinx\nmkdocs\n\n\nSphinx has been around for a long time, has lot‚Äôs of functionality but is based on reStructuredText. mkdocs is a new kid on the block, based on markdown and has a lot of functionality."
  },
  {
    "objectID": "06_documentation_slides.html#mkdocs",
    "href": "06_documentation_slides.html#mkdocs",
    "title": "Documentation",
    "section": "mkdocs",
    "text": "mkdocs\n\nText is written in markdown\nEasy to use\nAPI documentation can be generated with mkdocstrings\nThe end result is a static website that can be hosted on e.g.¬†GitHub pages"
  },
  {
    "objectID": "06_documentation_slides.html#configuration",
    "href": "06_documentation_slides.html#configuration",
    "title": "Documentation",
    "section": "Configuration",
    "text": "Configuration\n\n\nmkdocs.yml\n\nsite_name: my_library\n\ntheme: \"material\" # or readthedocs, mkdocs, etc.\n\nplugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          show_source: false # change if you want able to show source code\n          heading_level: 2\n          docstring_style: \"numpy\" # important!, since default is google"
  },
  {
    "objectID": "06_documentation_slides.html#api-docs",
    "href": "06_documentation_slides.html#api-docs",
    "title": "Documentation",
    "section": "API docs",
    "text": "API docs\n\ninstall mkdocstrings\n$ uv add --dev \"mkdocstrings[python]\"\nInstall theme, e.g.¬†material\n$ uv add --dev mkdocs-material\nAdd plugin to mkdocs.yml (see above)\nCreate index.md in docs folder\nRun uv run mkdocs serve to view locally\n\n\ndocs/index.md\n# Reference\n\n::: my_library.simulation"
  },
  {
    "objectID": "06_documentation_slides.html#github-pages",
    "href": "06_documentation_slides.html#github-pages",
    "title": "Documentation",
    "section": "GitHub pages",
    "text": "GitHub pages\n\nOnce you have a static website, you need to share it with the world\nGitHub pages allows you to easily host a static website on GitHub\nThe website is available at https://dhi.github.io/&lt;repository&gt;/\nThe website can be created locally by manually editing html pages.\nFor use as documentation, it is easier to use a documentation generator like mkdocs."
  },
  {
    "objectID": "06_documentation_slides.html#github-pages-1",
    "href": "06_documentation_slides.html#github-pages-1",
    "title": "Documentation",
    "section": "GitHub pages",
    "text": "GitHub pages"
  },
  {
    "objectID": "06_documentation_slides.html#private-website",
    "href": "06_documentation_slides.html#private-website",
    "title": "Documentation",
    "section": "‚ÄúPrivate‚Äù website",
    "text": "‚ÄúPrivate‚Äù website\n\nA GitHub repository can be made private\nThe website is still publicly available\nIn order to ‚Äúhide‚Äù it from search engines, add a robots.txt file to the root of the website\nThis is not a secure way to hide a website, but it is a simple way to hide it from search engines.\n\n\n\nrobots.txt\n\nUser-agent: *\nDisallow: /"
  },
  {
    "objectID": "06_documentation_slides.html#additional-resources",
    "href": "06_documentation_slides.html#additional-resources",
    "title": "Documentation",
    "section": "Additional resources",
    "text": "Additional resources\n\nhttps://realpython.com/python-project-documentation-with-mkdocs/"
  },
  {
    "objectID": "06_documentation_slides.html#summary",
    "href": "06_documentation_slides.html#summary",
    "title": "Documentation",
    "section": "Summary",
    "text": "Summary\n\nDocumentation is important\nUse a README file\nUse docstrings\nUse type hints\nUse mkdocs to generate API documentation"
  },
  {
    "objectID": "06_documentation.html",
    "href": "06_documentation.html",
    "title": "Documentation",
    "section": "",
    "text": "Make it easier for others to use your code\nMake it easier for you to use your code"
  },
  {
    "objectID": "06_documentation.html#why-document-your-code",
    "href": "06_documentation.html#why-document-your-code",
    "title": "Documentation",
    "section": "",
    "text": "Make it easier for others to use your code\nMake it easier for you to use your code"
  },
  {
    "objectID": "06_documentation.html#readme.md",
    "href": "06_documentation.html#readme.md",
    "title": "Documentation",
    "section": "Readme.md",
    "text": "Readme.md\n\nA readme file is a text file that introduces and explains a project.\nAlways include a readme file in your project.\nYou can put readme files in any directory, and you can have more than one in a single project."
  },
  {
    "objectID": "06_documentation.html#requirements",
    "href": "06_documentation.html#requirements",
    "title": "Documentation",
    "section": "Requirements",
    "text": "Requirements\n\nMention the requirements for your package\n\nOperating system\nPython version\nOther non-Python dependencies, e.g.¬†VC++ redistributables\n\nInclude information on how to install your package\n\npip install my_package\npip install https://github.com/DHI/{repo}/archive/main.zip"
  },
  {
    "objectID": "06_documentation.html#notebooks",
    "href": "06_documentation.html#notebooks",
    "title": "Documentation",
    "section": "Notebooks",
    "text": "Notebooks\n\nJupyter notebooks are a great way to document your code\nGood for prototyping\nIn a later stage, notebooks can be used to demonstrate how to use your code\nNot a replacement for documentation for a professional package"
  },
  {
    "objectID": "06_documentation.html#docstrings",
    "href": "06_documentation.html#docstrings",
    "title": "Documentation",
    "section": "Docstrings",
    "text": "Docstrings\n\"\"\"K-means clustering.\"\"\"\n\nclass KMeans(_BaseKMeans):\n  \"\"\"K-Means clustering.\n  \n  Parameters\n  ----------\n  n_clusters : int, default=8\n      The number of clusters to form as well as the number of\n      centroids to generate.\n\n  Examples\n  --------\n  &gt;&gt;&gt; X = np.array([[1, 2], [1, 4], [1, 0],\n  ...               [10, 2], [10, 4], [10, 0]])\n  &gt;&gt;&gt; kmeans = KMeans(n_clusters=2, random_state=0, n_init=\"auto\").fit(X)\n  &gt;&gt;&gt; kmeans.labels_\n  array([1, 1, 1, 0, 0, 0], dtype=int32)\nsklearn.KMeans\n\n&gt;&gt;&gt; from sklearn.cluster import KMeans\n&gt;&gt;&gt; help(KMeans)\nclass KMeans(_BaseKMeans)\n |  KMeans(n_clusters=8, *, init='k-means++', n_init='warn')\n |\n |  K-Means clustering.\n |\n |  Parameters\n |  ----------\n |  n_clusters : int, default=8\n. . . \n\n\n\nWrite once, read anywhere!"
  },
  {
    "objectID": "06_documentation.html#docstring---numpy-format",
    "href": "06_documentation.html#docstring---numpy-format",
    "title": "Documentation",
    "section": "Docstring - Numpy format",
    "text": "Docstring - Numpy format\ndef function_name(param1, param2, param3):\n    \"\"\"Short summary.\n    \n    Long description.\n    \n    Parameters\n    ----------\n    param1 : int\n        Description of `param1`.\n    param2 : str\n        Description of `param2`.\n    param3 : list of str\n        Description of `param3`.\n    \n    Returns\n    -------\n    bool\n        Description of return value.\n    \"\"\"\n    pass\n\nThere are several docstring formats. The most common is the numpy format, used by scikit-learn, pandas, numpy, scipy, etc."
  },
  {
    "objectID": "06_documentation.html#type-hints",
    "href": "06_documentation.html#type-hints",
    "title": "Documentation",
    "section": "Type hints",
    "text": "Type hints\nFrom Python 3.6, type hints can be used in addition to the type in the docstring.\ndef remove_outlier(data:pd.DataFrame, column:str, threshold:float=3) -&gt; pd.DataFrame:\n    \"\"\"Remove outliers from a dataframe.\n    \n    Parameters\n    ----------\n    data : pd.DataFrame\n        Dataframe to remove outliers from.\n    column : str\n        Column to remove outliers from.\n    threshold : float, optional\n        Number of standard deviations to use as threshold, by default 3"
  },
  {
    "objectID": "06_documentation.html#doctest",
    "href": "06_documentation.html#doctest",
    "title": "Documentation",
    "section": "doctest",
    "text": "doctest\nUsing code without documentation is hard, but using code with wrong documentation is even harder.\nHow can you make sure that the documentation is correct?\n. . .\nThe answer is the doctest module built in to the Python standard library.\n. . .\n\n\n\n\n\n\nTip\n\n\n\nThe extensive standard library is why Python is described as a language with ‚Äúbatteries included!‚Äù\n\n\n\nInput, output examples in docstrings are run as tests.\ndef add(a, b):\n    \"\"\"Add two numbers.\n    &gt;&gt;&gt; add(1, 2)\n    3\n    &gt;&gt;&gt; add(1, 3)\n    5\n    \"\"\"\n    return a + b\n. . .\n$ python -m doctest -v add.py\nFailed example:\n    add(1, 3)\nExpected:\n    5\nGot:\n    4\n**********************************************************************\n1 items had failures:\n   1 of   2 in mod.add\n***Test Failed*** 1 failures.\n\nDoctest can pick up anything that looks like a Python session and run it as a test."
  },
  {
    "objectID": "06_documentation.html#documentation-generators",
    "href": "06_documentation.html#documentation-generators",
    "title": "Documentation",
    "section": "Documentation generators",
    "text": "Documentation generators\n\nSphinx\nmkdocs\n\n\nSphinx has been around for a long time, has lot‚Äôs of functionality but is based on reStructuredText. mkdocs is a new kid on the block, based on markdown and has a lot of functionality."
  },
  {
    "objectID": "06_documentation.html#mkdocs",
    "href": "06_documentation.html#mkdocs",
    "title": "Documentation",
    "section": "mkdocs",
    "text": "mkdocs\n\nText is written in markdown\nEasy to use\nAPI documentation can be generated with mkdocstrings\nThe end result is a static website that can be hosted on e.g.¬†GitHub pages"
  },
  {
    "objectID": "06_documentation.html#configuration",
    "href": "06_documentation.html#configuration",
    "title": "Documentation",
    "section": "Configuration",
    "text": "Configuration\n\n\nmkdocs.yml\n\nsite_name: my_library\n\ntheme: \"material\" # or readthedocs, mkdocs, etc.\n\nplugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          show_source: false # change if you want able to show source code\n          heading_level: 2\n          docstring_style: \"numpy\" # important!, since default is google"
  },
  {
    "objectID": "06_documentation.html#api-docs",
    "href": "06_documentation.html#api-docs",
    "title": "Documentation",
    "section": "API docs",
    "text": "API docs\n\n\ninstall mkdocstrings\n$ uv add --dev \"mkdocstrings[python]\"\nInstall theme, e.g.¬†material\n$ uv add --dev mkdocs-material\nAdd plugin to mkdocs.yml (see above)\nCreate index.md in docs folder\nRun uv run mkdocs serve to view locally\n\n\n. . .\ndocs/index.md\n# Reference\n\n::: my_library.simulation"
  },
  {
    "objectID": "06_documentation.html#github-pages",
    "href": "06_documentation.html#github-pages",
    "title": "Documentation",
    "section": "GitHub pages",
    "text": "GitHub pages\n\n\nOnce you have a static website, you need to share it with the world\nGitHub pages allows you to easily host a static website on GitHub\nThe website is available at https://dhi.github.io/&lt;repository&gt;/\nThe website can be created locally by manually editing html pages.\nFor use as documentation, it is easier to use a documentation generator like mkdocs."
  },
  {
    "objectID": "06_documentation.html#github-pages-1",
    "href": "06_documentation.html#github-pages-1",
    "title": "Documentation",
    "section": "GitHub pages",
    "text": "GitHub pages"
  },
  {
    "objectID": "06_documentation.html#private-website",
    "href": "06_documentation.html#private-website",
    "title": "Documentation",
    "section": "‚ÄúPrivate‚Äù website",
    "text": "‚ÄúPrivate‚Äù website\n\nA GitHub repository can be made private\nThe website is still publicly available\nIn order to ‚Äúhide‚Äù it from search engines, add a robots.txt file to the root of the website\nThis is not a secure way to hide a website, but it is a simple way to hide it from search engines.\n\n\n\nrobots.txt\n\nUser-agent: *\nDisallow: /"
  },
  {
    "objectID": "06_documentation.html#additional-resources",
    "href": "06_documentation.html#additional-resources",
    "title": "Documentation",
    "section": "Additional resources",
    "text": "Additional resources\n\nhttps://realpython.com/python-project-documentation-with-mkdocs/"
  },
  {
    "objectID": "06_documentation.html#summary",
    "href": "06_documentation.html#summary",
    "title": "Documentation",
    "section": "Summary",
    "text": "Summary\n\n\nDocumentation is important\nUse a README file\nUse docstrings\nUse type hints\nUse mkdocs to generate API documentation"
  }
]